{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cligenius","text":"<p> Cligenius, build great CLIs. Easy to code. Based on Python type hints. </p> <p> <p>Documentation: https://cligenius.khulnasoft.com</p> <p>Source Code: https://github.com/khulnasoft/cligenius</p> <p>Cligenius is a library for building CLI applications that users will love using and developers will love creating. Based on Python type hints.</p> <p>It's also a command line tool to run scripts, automatically converting them to CLI applications.</p> <p>The key features are:</p> <ul> <li>Intuitive to write: Great editor support. Completion everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.</li> <li>Easy to use: It's easy to use for the final users. Automatic help, and automatic completion for all shells.</li> <li>Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.</li> <li>Start simple: The simplest example adds only 2 lines of code to your app: 1 import, 1 function call.</li> <li>Grow large: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.</li> <li>Run scripts: Cligenius includes a <code>cligenius</code> command/program that you can use to run scripts, automatically converting them to CLIs, even if they don't use Cligenius internally.</li> </ul>"},{"location":"#readyapi-of-clis","title":"ReadyAPI of CLIs","text":"<p>Cligenius is ReadyAPI's little sibling, it's the ReadyAPI of CLIs.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install cligenius\n---&gt; 100%\nSuccessfully installed cligenius rich shellingham\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#the-absolute-minimum","title":"The absolute minimum","text":"<ul> <li>Create a file <code>main.py</code> with:</li> </ul> <pre><code>def main(name: str):\n    print(f\"Hello {name}\")\n</code></pre> <p>This script doesn't even use Cligenius internally. But you can use the <code>cligenius</code> command to run it as a CLI application.</p>"},{"location":"#run-it","title":"Run it","text":"<p>Run your application with the <code>cligenius</code> command:</p> <pre><code>// Run your application\n$ cligenius main.py run\n\n// You get a nice error, you are missing NAME\nUsage: cligenius [PATH_OR_MODULE] run [OPTIONS] NAME\nTry 'cligenius [PATH_OR_MODULE] run --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Missing argument 'NAME'.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n// You get a --help for free\n$ cligenius main.py run --help\n\nUsage: cligenius [PATH_OR_MODULE] run [OPTIONS] NAME\n\nRun the provided Cligenius app.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   |\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Now pass the NAME argument\n$ cligenius main.py run Camila\n\nHello Camila\n\n// It works! \ud83c\udf89\n</code></pre> <p>This is the simplest use case, not even using Cligenius internally, but it can already be quite useful for simple scripts.</p> <p>Note: auto-completion works when you create a Python package and run it with <code>--install-completion</code> or when you use the <code>cligenius</code> command.</p>"},{"location":"#use-cligenius-in-your-code","title":"Use Cligenius in your code","text":"<p>Now let's start using Cligenius in your own code, update <code>main.py</code> with:</p> <pre><code>import cligenius\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now you could run it with Python directly:</p> <pre><code>// Run your application\n$ python main.py\n\n// You get a nice error, you are missing NAME\nUsage: main.py [OPTIONS] NAME\nTry 'main.py --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Missing argument 'NAME'.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n// You get a --help for free\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   |\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Now pass the NAME argument\n$ python main.py Camila\n\nHello Camila\n\n// It works! \ud83c\udf89\n</code></pre> <p>Note: you can also call this same script with the <code>cligenius</code> command, but you don't need to.</p>"},{"location":"#example-upgrade","title":"Example upgrade","text":"<p>This was the simplest example possible.</p> <p>Now let's see one a bit more complex.</p>"},{"location":"#an-example-with-two-subcommands","title":"An example with two subcommands","text":"<p>Modify the file <code>main.py</code>.</p> <p>Create a <code>cligenius.Cligenius()</code> app, and create two subcommands with their parameters.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And that will:</p> <ul> <li>Explicitly create a <code>cligenius.Cligenius</code> app.<ul> <li>The previous <code>cligenius.run</code> actually creates one implicitly for you.</li> </ul> </li> <li>Add two subcommands with <code>@app.command()</code>.</li> <li>Execute the <code>app()</code> itself, as if it was a function (instead of <code>cligenius.run</code>).</li> </ul>"},{"location":"#run-the-upgraded-example","title":"Run the upgraded example","text":"<p>Check the new help:</p> <pre><code>$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion          Install completion  \u2502\n\u2502                               for the current     \u2502\n\u2502                               shell.              \u2502\n\u2502 --show-completion             Show completion for \u2502\n\u2502                               the current shell,  \u2502\n\u2502                               to copy it or       \u2502\n\u2502                               customize the       \u2502\n\u2502                               installation.       \u2502\n\u2502 --help                        Show this message   \u2502\n\u2502                               and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 goodbye                                           \u2502\n\u2502 hello                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// When you create a package you get \u2728 auto-completion \u2728 for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n</code></pre> <p>Now check the help for the <code>hello</code> command:</p> <pre><code>$ python main.py hello --help\n\n Usage: main.py hello [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>And now check the help for the <code>goodbye</code> command:</p> <pre><code>$ python main.py goodbye --help\n\n Usage: main.py goodbye [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --formal    --no-formal      [default: no-formal] \u2502\n\u2502 --help                       Show this message    \u2502\n\u2502                              and exit.            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Automatic --formal and --no-formal for the bool option \ud83c\udf89\n</code></pre> <p>Now you can try out the new command line application:</p> <pre><code>// Use it with the hello command\n\n$ python main.py hello Camila\n\nHello Camila\n\n// And with the goodbye command\n\n$ python main.py goodbye Camila\n\nBye Camila!\n\n// And with --formal\n\n$ python main.py goodbye --formal Camila\n\nGoodbye Ms. Camila. Have a good day.\n</code></pre>"},{"location":"#recap","title":"Recap","text":"<p>In summary, you declare once the types of parameters (CLI arguments and CLI options) as function parameters.</p> <p>You do that with standard modern Python types.</p> <p>You don't have to learn a new syntax, the methods or classes of a specific library, etc.</p> <p>Just standard Python.</p> <p>For example, for an <code>int</code>:</p> <pre><code>total: int\n</code></pre> <p>or for a <code>bool</code> flag:</p> <pre><code>force: bool\n</code></pre> <p>And similarly for files, paths, enums (choices), etc. And there are tools to create groups of subcommands, add metadata, extra validation, etc.</p> <p>You get: great editor support, including completion and type checks everywhere.</p> <p>Your users get: automatic <code>--help</code>, auto-completion in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using the <code>cligenius</code> command.</p> <p>For a more complete example including more features, see the Tutorial - User Guide.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>Cligenius stands on the shoulders of a giant. Its only internal required dependency is Click.</p> <p>By default it also comes with extra standard dependencies:</p> <ul> <li><code>rich</code>: to show nicely formatted errors automatically.</li> <li><code>shellingham</code>: to automatically detect the current shell when installing completion.<ul> <li>With <code>shellingham</code> you can just use <code>--install-completion</code>.</li> <li>Without <code>shellingham</code>, you have to pass the name of the shell to install completion for, e.g. <code>--install-completion bash</code>.</li> </ul> </li> </ul>"},{"location":"#cligenius-slim","title":"<code>cligenius-slim</code>","text":"<p>If you don't want the extra standard optional dependencies, install <code>cligenius-slim</code> instead.</p> <p>When you install with:</p> <pre><code>pip install cligenius\n</code></pre> <p>...it includes the same code and dependencies as:</p> <pre><code>pip install \"cligenius-slim[standard]\"\n</code></pre> <p>The <code>standard</code> extra dependencies are <code>rich</code> and <code>shellingham</code>.</p> <p>Note: The <code>cligenius</code> command is only included in the <code>cligenius</code> package.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"alternatives/","title":"Alternatives, Inspiration and Comparisons","text":"<p>What inspired Cligenius, how it compares to other alternatives and what it learned from them.</p>"},{"location":"alternatives/#intro","title":"Intro","text":"<p>Cligenius wouldn't exist if not for the previous work of others.</p> <p>There have been many tools created before that have helped inspire its creation.</p>"},{"location":"alternatives/#previous-tools","title":"Previous tools","text":""},{"location":"alternatives/#argparse","title":"<code>argparse</code>","text":"<p><code>argparse</code> is the Python standard library's module to write CLIs.</p> <p>It provides a better alternative than reading the CLI Parameters as a <code>list</code> of <code>str</code> and parsing everything by hand.</p> <p>Inspired Cligenius to</p> <p>Provide a better development experience than just reading CLI Parameters by hand.</p>"},{"location":"alternatives/#hug","title":"Hug","text":"<p>Hug is a library to create APIs and CLIs, it uses parameters in functions to declare the required data.</p> <p>It inspired a lot of the ideas in ReadyAPI and Cligenius.</p> <p>Inspired Cligenius to</p> <p>Use function parameters to declare CLI arguments and CLI options as it simplifies a lot the development experience.</p>"},{"location":"alternatives/#plac","title":"Plac","text":"<p>Plac is another library to create CLIs using parameters in functions, similar to Hug.</p> <p>Inspired Cligenius to</p> <p>Provide a simple way to use a function as a command line app, without having to create a complete app, with <code>cligenius.run(some_function)</code>.</p>"},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic is a library to handle data validation using standard modern Python type annotations.</p> <p>It powers ReadyAPI underneath.</p> <p>It is not used by Cligenius, but it inspired a lot of the design (through ReadyAPI).</p> <p>Inspired Cligenius to</p> <p>Use standard Python type annotations to declare types instead of library-specific types or classes and use them for data validation and documentation.</p>"},{"location":"alternatives/#click","title":"Click","text":"<p>Click is one of the most widely used libraries to create CLIs in Python.</p> <p>It's a very powerful tool and there are many CLIs built with it. It is what powers Cligenius underneath.</p> <p>It also uses functions with parameters for CLI arguments and CLI options, but the declaration of the specific CLI arguments, CLI options, types, etc, is done in decorators on top of the function. This requires some code repetition (e.g. a CLI Option name <code>--verbose</code> and a variable name <code>verbose</code>) and synchronization between two places related to the same information (the decorator and the parameter function).</p> <p>It uses decorators on top of functions to modify the actual value of those functions, converting them to instances of a specific class. This is a clever trick, but code editors can't provide great support for autocompletion that way.</p> <p>It was built with some great ideas and design using the features available in the language at the time (Python 2.x).</p> <p>Cligenius uses it for</p> <p>Everything. \ud83d\ude80</p> <p>Cligenius mainly adds a layer on top of Click, making the code simpler and easier to use, with autocompletion everywhere, etc, but providing all the powerful features of Click underneath.</p> <p>As someone pointed out: \"Nice to see it is built on Click but adds the type stuff. Me gusta!\"</p>"},{"location":"alternatives/#click-completion","title":"<code>click-completion</code>","text":"<p><code>click-completion</code> is a plug-in for Click. It was created to extend completion support for shells when Click only had support for Bash completion.</p> <p>Previous versions of Cligenius had deep integrations with <code>click-completion</code> and used it as an optional dependency. But now all the completion logic is implemented internally in Cligenius itself, the internal logic was heavily inspired and using some parts of <code>click-completion</code>.</p> <p>And now Cligenius improved it to have new features, tests, some bug fixes (for issues in plain <code>click-completion</code> and Click), and better support for shells, including modern versions of PowerShell (e.g. the default versions that come with Windows 10).</p> <p>Inspired Cligenius to</p> <p>Provide auto completion for all the shells.</p>"},{"location":"alternatives/#readyapi","title":"ReadyAPI","text":"<p>I created ReadyAPI to provide an easy way to build APIs with autocompletion for everything in the code (and some other features).</p> <p>Cligenius is the \"ReadyAPI of CLIs\".</p> <p>It uses the same design and usage of ReadyAPI as much as possible. So, if you have used ReadyAPI, you know how to use Cligenius.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>First, you might want to see the basic ways to help Cligenius and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the repository and you know that you need to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment-with-venv","title":"Virtual environment with <code>venv</code>","text":"<p>You can create a virtual environment in a directory using Python's <code>venv</code> module:</p> <pre><code>$ python -m venv env\n</code></pre> <p>That will create a directory <code>./env/</code> with the Python binaries and then you will be able to install packages for that isolated environment.</p>"},{"location":"contributing/#activate-the-environment","title":"Activate the environment","text":"<p>Activate the new environment with:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source ./env/bin/activate\n</code></pre> <pre><code>$ .\\env\\Scripts\\Activate.ps1\n</code></pre> <p>Or if you use Bash for Windows (e.g. Git Bash):</p> <pre><code>$ source ./env/Scripts/activate\n</code></pre> <p>To check it worked, use:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which pip\n\nsome/directory/cligenius/env/bin/pip\n</code></pre> <pre><code>$ Get-Command pip\n\nsome/directory/cligenius/env/bin/pip\n</code></pre> <p>If it shows the <code>pip</code> binary at <code>env/bin/pip</code> then it worked. \ud83c\udf89</p> <p>Tip</p> <p>Every time you install a new package with <code>pip</code> under that environment, activate the environment again.</p> <p>This makes sure that if you use a terminal program installed by that package (like <code>flit</code>), you use the one from your local environment and not any other that could be installed globally.</p>"},{"location":"contributing/#flit","title":"Flit","text":"<p>Cligenius uses Flit to build, package and publish the project.</p> <p>After activating the environment as described above, install <code>flit</code>:</p> <pre><code>$ pip install flit\n\n---&gt; 100%\n</code></pre> <p>Now re-activate the environment to make sure you are using the <code>flit</code> you just installed (and not a global one).</p> <p>And now use <code>flit</code> to install the development dependencies:</p> Linux, macOSWindows <pre><code>$ flit install --deps develop --symlink\n\n---&gt; 100%\n</code></pre> <p>If you are on Windows, use <code>--pth-file</code> instead of <code>--symlink</code>:</p> <pre><code>$ flit install --deps develop --pth-file\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local Cligenius in your local environment.</p>"},{"location":"contributing/#using-your-local-cligenius","title":"Using your local Cligenius","text":"<p>If you create a Python file that imports and uses Cligenius, and run it with the Python from your local environment, it will use your local Cligenius source code.</p> <p>And if you update that local Cligenius source code, as it is installed with <code>--symlink</code> (or <code>--pth-file</code> on Windows), when you run that Python file again, it will use the fresh version of Cligenius you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p>"},{"location":"contributing/#format","title":"Format","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p> <p>For it to sort them correctly, you need to have Cligenius installed locally in your environment, with the command in the section above using <code>--symlink</code> (or <code>--pth-file</code> on Windows).</p>"},{"location":"contributing/#format-imports","title":"Format imports","text":"<p>There is another script that formats all the imports and makes sure you don't have unused imports:</p> <pre><code>$ bash scripts/format-imports.sh\n</code></pre> <p>As it runs one command after the other and modifies and reverts many files, it takes a bit longer to run, so it might be easier to use <code>scripts/format.sh</code> frequently and <code>scripts/format-imports.sh</code> only before committing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>The documentation uses MkDocs.</p> <p>All the documentation is in Markdown format in the directory <code>./docs</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./docs_src/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps making sure that:</p> <ul> <li>The documentation is up to date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul> <p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ bash scripts/docs-live.sh\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt;    -  Building documentation...\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt;    -  Cleaning site directory\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt;    -  Documentation built in 2.74 seconds\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt;    -  Serving on http://127.0.0.1:8008\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#design-based-on-readyapi","title":"Design based on ReadyAPI","text":"<p>Cligenius is ReadyAPI's little sibling.</p> <p>It follows the same design and ideas. If you know ReadyAPI, you already know Cligenius... more or less.</p>"},{"location":"features/#just-modern-python","title":"Just Modern Python","text":"<p>It's all based on standard Python type declarations. No new syntax to learn. Just standard modern Python.</p> <p>If you need a 2 minute refresher of how to use Python types (even if you don't use ReadyAPI or Cligenius), check the ReadyAPI tutorial section: Python types intro.</p> <p>You will also see a 20 seconds refresher on the section Tutorial - User Guide: First Steps.</p>"},{"location":"features/#editor-support","title":"Editor support","text":"<p>Cligenius was designed to be easy and intuitive to use, to ensure the best development experience. With autocompletion everywhere.</p> <p>You will rarely need to come back to the docs.</p> <p>Here's how your editor might help you:</p> <ul> <li>in Visual Studio Code:</li> </ul> <p></p> <ul> <li>in PyCharm:</li> </ul> <p></p> <p>You will get completion for everything. That's something no other CLI library provides right now.</p> <p>No more guessing what type was that variable, if it could be <code>None</code>, etc.</p>"},{"location":"features/#short","title":"Short","text":"<p>It has sensible defaults for everything, with optional configurations everywhere. All the parameters can be fine-tuned to do what you need, customize the help, callbacks per parameter, make them required or not, etc.</p> <p>But by default, it all \"just works\".</p>"},{"location":"features/#user-friendly-cli-apps","title":"User friendly CLI apps","text":"<p>The resulting CLI apps created with Cligenius have the nice features of many \"pro\" command line programs you probably already love.</p> <ul> <li>Automatic help options for the main CLI program and all its subcommands.</li> <li>Automatic command and subcommand structure handling (you will see more about subcommands in the Tutorial - User Guide).</li> <li>Automatic completion for the CLI app in all operating systems, in all the shells (Bash, Zsh, Fish, PowerShell), so that the final user of your app can just hit TAB and get the available options or subcommands. *</li> </ul> <p>* Auto completion</p> <p>Auto completion works when you create a package (installable with <code>pip</code>). Or when using the <code>cligenius</code> command.</p> <p>Cligenius uses <code>shellingham</code> to auto-detect the current shell when installing completion. If you don't want to include <code>shellingham</code>, install <code>cligenius-slim</code>.</p> <p>Cligenius will automatically create 2 CLI options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> </ul> <p>If you didn't add <code>shellingham</code> (if you installed <code>pip install cligenius-slim</code>) those CLI options take a value with the name of the shell to install completion for, e.g.:</p> <ul> <li><code>--install-completion bash</code>.</li> <li><code>--show-completion powershell</code>.</li> </ul> <p>Then you can tell the user to install completion after installing your CLI program and the rest will just work.</p> <p>Tip</p> <p>Cligenius's completion is implemented internally, it uses ideas and components from Click and ideas from <code>click-completion</code>, but it doesn't use <code>click-completion</code> and re-implements some of the relevant parts of Click.</p> <p>Then it extends those ideas with features and bug fixes. For example, Cligenius programs also support modern versions of PowerShell (e.g. in Windows 10) among all the other shells.</p>"},{"location":"features/#the-power-of-click","title":"The power of Click","text":"<p>Click is one of the most popular tools for building CLIs in Python.</p> <p>Cligenius is based on it, so you get all its benefits.</p> <p>But you can write simpler code with the benefits of modern Python.</p>"},{"location":"features/#tested","title":"Tested","text":"<ul> <li>100% test coverage.</li> <li>100% type annotated code base.</li> <li>Used in production applications.</li> </ul>"},{"location":"help-cligenius/","title":"Help Cligenius - Get Help","text":"<p>Are you liking Cligenius?</p> <p>Would you like to help Cligenius, other users, and the author?</p> <p>Or would you like to get help with Cligenius?</p> <p>There are very simple ways to help (several involve just one or two clicks).</p> <p>And there are several ways to get help too.</p>"},{"location":"help-cligenius/#subscribe-to-the-newsletter","title":"Subscribe to the newsletter","text":"<p>You can subscribe to the (infrequent) ReadyAPI and friends newsletter to stay updated about:</p> <ul> <li>News about ReadyAPI and friends, including Cligenius \ud83d\ude80</li> <li>Guides \ud83d\udcdd</li> <li>Features \u2728</li> <li>Breaking changes \ud83d\udea8</li> <li>Tips and tricks \u2705</li> </ul>"},{"location":"help-cligenius/#star-cligenius-in-github","title":"Star Cligenius in GitHub","text":"<p>You can \"star\" Cligenius in GitHub (clicking the star button at the top right): https://github.com/khulnasoft/cligenius.</p> <p>By adding a star, other users will be able to find it more easily and see that it has been already useful for others.</p>"},{"location":"help-cligenius/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases","text":"<p>You can \"watch\" Cligenius in GitHub (clicking the \"watch\" button at the top right): https://github.com/khulnasoft/cligenius.</p> <p>There you can select \"Releases only\".</p> <p>By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of Cligenius with bug fixes and new features.</p>"},{"location":"help-cligenius/#connect-with-the-author","title":"Connect with the author","text":"<p>You can connect with me (KhulnaSoft DevOps / <code>khulnasoft</code>), the author.</p> <p>You can:</p> <ul> <li>Follow me on GitHub.<ul> <li>See other Open Source projects I have created that could help you.</li> <li>Follow me to see when I create a new Open Source project.</li> </ul> </li> <li>Follow me on Twitter.<ul> <li>Tell me how you use Cligenius (I love to hear that).</li> <li>Hear when I make announcements or release new tools.</li> </ul> </li> <li>Connect with me on Linkedin.<ul> <li>Hear when I make announcements or release new tools (although I use Twitter more often \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Read what I write (or follow me) on Dev.to or Medium.<ul> <li>Read other ideas, articles, and read about tools I have created.</li> <li>Follow me to read when I publish something new.</li> </ul> </li> </ul>"},{"location":"help-cligenius/#tweet-about-cligenius","title":"Tweet about Cligenius","text":"<p>Tweet about Cligenius and let me and others know why you like it.</p> <p>I love to hear about how Cligenius is being used, what have you liked in it, in which project/company you are using it, etc.</p>"},{"location":"help-cligenius/#help-others-with-questions-in-github","title":"Help others with questions in GitHub","text":"<p>You can try and help others with their questions in:</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>In many cases you might already know the answer for those questions. \ud83e\udd13</p> <p>Just remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. \ud83e\udd17</p> <p>The idea is for the Cligenius community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.</p> <p>Here's how to help others with questions (in discussions or issues):</p>"},{"location":"help-cligenius/#understand-the-question","title":"Understand the question","text":"<ul> <li> <p>Check if you can understand what is the purpose and use case of the person asking.</p> </li> <li> <p>Then check if the question (the vast majority are questions) is clear.</p> </li> <li> <p>In many cases the question asked is about an imaginary solution from the user, but there might be a better one. If you can understand the problem and use case better, you might be able to suggest a better alternative solution.</p> </li> <li> <p>If you can't understand the question, ask for more details.</p> </li> </ul>"},{"location":"help-cligenius/#reproduce-the-problem","title":"Reproduce the problem","text":"<p>For most of the cases and most of the questions there's something related to the person's original code.</p> <p>In many cases they will only copy a fragment of the code, but that's not enough to reproduce the problem.</p> <ul> <li> <p>You can ask them to provide a minimal, reproducible, example, that you can copy-paste and run locally to see the same error or behavior they are seeing, or to understand their use case better.</p> </li> <li> <p>If you are feeling too generous, you can try to create an example like that yourself, just based on the description of the problem. Just have in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.</p> </li> </ul>"},{"location":"help-cligenius/#suggest-solutions","title":"Suggest solutions","text":"<ul> <li> <p>After being able to understand the question, you can give them a possible answer.</p> </li> <li> <p>In many cases, it's better to understand their underlying problem or use case, because there might be a better way to solve it than what they are trying to do.</p> </li> </ul>"},{"location":"help-cligenius/#ask-to-close","title":"Ask to close","text":"<p>If they reply, there's a high chance you would have solved their problem, congrats, you're a hero! \ud83e\uddb8</p> <ul> <li> <p>Now, if that solved their problem, you can ask them to:</p> <ul> <li>In GitHub Discussions: mark the comment as the answer.</li> <li>In GitHub Issues: close the issue**.</li> </ul> </li> </ul>"},{"location":"help-cligenius/#watch-the-github-repository","title":"Watch the GitHub repository","text":"<p>You can \"watch\" Cligenius in GitHub (clicking the \"watch\" button at the top right): https://github.com/khulnasoft/cligenius.</p> <p>If you select \"Watching\" instead of \"Releases only\" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.</p> <p>Then you can try and help them solve those questions.</p>"},{"location":"help-cligenius/#ask-questions","title":"Ask Questions","text":"<p>You can create a new question in the GitHub repository, for example to:</p> <ul> <li>Ask a question or ask about a problem.</li> <li>Suggest a new feature.</li> </ul> <p>Note: if you do it, then I'm going to ask you to also help others. \ud83d\ude09</p>"},{"location":"help-cligenius/#review-pull-requests","title":"Review Pull Requests","text":"<p>You can help me review pull requests from others.</p> <p>Again, please try your best to be kind. \ud83e\udd17</p> <p>Here's what to have in mind and how to review a pull request:</p>"},{"location":"help-cligenius/#understand-the-problem","title":"Understand the problem","text":"<ul> <li> <p>First, make sure you understand the problem that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.</p> </li> <li> <p>There's also a good chance that the pull request is not actually needed because the problem can be solved in a different way. Then you can suggest or ask about that.</p> </li> </ul>"},{"location":"help-cligenius/#dont-worry-about-style","title":"Don't worry about style","text":"<ul> <li> <p>Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.</p> </li> <li> <p>Also don't worry about style rules, there are already automatized tools checking that.</p> </li> </ul> <p>And if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.</p>"},{"location":"help-cligenius/#check-the-code","title":"Check the code","text":"<ul> <li> <p>Check and read the code, see if it makes sense, run it locally and see if it actually solves the problem.</p> </li> <li> <p>Then comment saying that you did that, that's how I will know you really checked it.</p> </li> </ul> <p>Info</p> <p>Unfortunately, I can't simply trust PRs that just have several approvals.</p> <p>Several times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. \ud83d\ude05</p> <p>So, it's really important that you actually read and run the code, and let me know in the comments that you did. \ud83e\udd13</p> <ul> <li>If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well \ud83d\ude48), so it's better if you can focus on the fundamental things.</li> </ul>"},{"location":"help-cligenius/#tests","title":"Tests","text":"<ul> <li> <p>Help me check that the PR has tests.</p> </li> <li> <p>Check that the tests fail before the PR. \ud83d\udea8</p> </li> <li> <p>Then check that the tests pass after the PR. \u2705</p> </li> <li> <p>Many PRs don't have tests, you can remind them to add tests, or you can even suggest some tests yourself. That's one of the things that consume most time and you can help a lot with that.</p> </li> <li> <p>Then also comment what you tried, that way I'll know that you checked it. \ud83e\udd13</p> </li> </ul>"},{"location":"help-cligenius/#create-a-pull-request","title":"Create a Pull Request","text":"<p>You can contribute to the source code with Pull Requests, for example:</p> <ul> <li>To fix a typo you found on the documentation.</li> <li>To propose new documentation sections.</li> <li>To fix an existing issue/bug.<ul> <li>Make sure to add tests.</li> </ul> </li> <li>To add a new feature.<ul> <li>Make sure to add tests.</li> <li>Make sure to add documentation if it's relevant.</li> </ul> </li> </ul>"},{"location":"help-cligenius/#help-maintain-cligenius","title":"Help Maintain Cligenius","text":"<p>Help me maintain Cligenius! \ud83e\udd13</p> <p>There's a lot of work to do, and for most of it, YOU can do it.</p> <p>The main tasks that you can do right now are:</p> <ul> <li>Help others with questions in GitHub (see the section above).</li> <li>Review Pull Requests (see the section above).</li> </ul> <p>Those two tasks are what consume time the most. That's the main work of maintaining Cligenius.</p> <p>If you can help me with that, you are helping me maintain Cligenius and making sure it keeps advancing faster and better. \ud83d\ude80</p>"},{"location":"help-cligenius/#join-the-chat","title":"Join the chat","text":"<p>Join the \ud83d\udc65 ReadyAPI and Friends Discord chat server \ud83d\udc65 and hang out with others in the community. There's a <code>#cligenius</code> channel.</p> <p>Tip</p> <p>For questions, ask them in GitHub Discussions, there's a much better chance you will receive help there.</p> <p>Use the chat only for other general conversations.</p>"},{"location":"help-cligenius/#dont-use-the-chat-for-questions","title":"Don't use the chat for questions","text":"<p>Have in mind that as chats allow more \"free conversation\", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.</p> <p>In GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat. \ud83d\ude05</p> <p>Conversations in the chat are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation.</p> <p>On the other side, there are thousands of users in the chat, so there's a high chance you'll find someone to talk to there, almost all the time. \ud83d\ude04</p>"},{"location":"help-cligenius/#sponsor-the-author","title":"Sponsor the author","text":"<p>You can also financially support the author (me) through GitHub sponsors.</p> <p>There you could buy me a coffee \u2615\ufe0f to say thanks. \ud83d\ude04</p>"},{"location":"help-cligenius/#sponsor-the-tools-that-power-cligenius","title":"Sponsor the tools that power Cligenius","text":"<p>As you have seen in the documentation, Cligenius is built on top of Click.</p> <p>You can also sponsor:</p> <ul> <li>Pallets Project (Click maintainers) via the PSF or via Tidelift</li> </ul> <p>Thanks! \ud83d\ude80</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":"<ul> <li>\u2b06 Bump mkdocs-material from 9.5.30 to 9.5.33. PR #71 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.4.2 to 24.8.0. PR #64 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.5 to 0.2.6. PR #66 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.25.1 to 0.25.2. PR #60 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.3.0 to 10.4.0. PR #50 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.27 to 9.5.30. PR #58 by @dependabot[bot].</li> <li>\u2b06 Bump cairosvg from 2.7.0 to 2.7.1. PR #37 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.26 to 9.5.27. PR #45 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.9.0. PR #46 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.2 to 0.2.5. PR #43 by @dependabot[bot].</li> <li>\u2b06 Update pytest-cov requirement from &lt;5.0.0,&gt;=2.10.0 to &gt;=2.10.0,&lt;6.0.0. PR #41 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.4.7 to 9.5.26. PR #42 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from &lt;8.0.0,&gt;=4.4.0 to &gt;=4.4.0,&lt;9.0.0. PR #39 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.4.2. PR #22 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.25.1. PR #34 by @dependabot[bot].</li> <li>\u2b06 Update pytest-sugar requirement from &lt;0.10.0,&gt;=0.9.4 to &gt;=0.9.4,&lt;1.1.0. PR #35 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #33 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12, tests in CI and official marker. PR #807 by @ivantodorovich.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #837 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.3.0. PR #836 by @dependabot[bot].</li> <li>\u2705 Add CI configs to run tests on Windows and MacOS. PR #824 by @svlandeg.</li> <li>\ud83d\udc77 Update GitHub Actions to upload and download artifacts. PR #829 by @khulnasoft.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #827 by @khulnasoft.</li> <li>\u2705 Generalize test suite to run on Windows. PR #810 by @svlandeg.</li> <li>\u2705 Add <code>__init__.py</code> files to fix test suite. PR #809 by @svlandeg.</li> <li>\ud83d\udd27 Update MkDocs Material, enable plugins. PR #813 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff, etc.. PR #797 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0123","title":"0.12.3","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix Rich formatting with no commands. PR #796 by @svlandeg.</li> </ul>"},{"location":"release-notes/#0122","title":"0.12.2","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Improve column help display, ensure commands column width is the same on all panels. PR #567 by @ssbarnea.</li> </ul>"},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add support for an argument of type <code>Optional[Tuple]</code> and default value <code>None</code>. PR #757 by @Asthestarsfalll.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83d\udd27 Fix typo in Github template. PR #793 by @svlandeg.</li> <li>\ud83d\udcdd Fix typos in documentation. PR #761 by @svlandeg.</li> <li>\ud83d\udcdd Update console output with Click 8 messages. PR #789 by @svlandeg.</li> <li>\ud83d\udcdd\u00a0Remove references to a .rst README generated by poetry new. PR #632 by @jonasmmiguel.</li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<p>Now you don't need to install <code>cligenius[all]</code>. When you install <code>cligenius</code> it comes with the default optional dependencies and the <code>cligenius</code> command.</p> <p>If you don't want the extra optional dependencies (<code>rich</code> and <code>shellingham</code>), you can install <code>cligenius-slim</code> instead.</p> <p>You can also install <code>cligenius-slim[standard]</code>, which includes the default optional dependencies, but not the <code>cligenius</code> command.</p> <p>Now the package <code>cligenius-cli</code> doesn't add anything on top of what <code>cligenius</code> has, it only depends on <code>cligenius</code>, and is there only for backwards compatibility, so that projects that depend on <code>cligenius-cli</code> can get the latest features of the <code>cligenius</code> command while they upgrade their dependencies to require <code>cligenius</code> directly.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for <code>cligenius ./someprogram.py utils docs --title</code>. PR #782 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix broken installation when upgrading from <code>cligenius &lt;0.12.0</code> to <code>cligenius &gt;=0.12.0</code>, make <code>cligenius</code> independent of <code>cligenius-slim</code>, include <code>cligenius</code> command in <code>cligenius</code> package. PR #791 by @khulnasoft.</li> </ul> <p>This fixes a problem that would break the <code>cligenius</code> installation directory when upgrading from <code>cligenius &lt;0.12.0</code> to <code>cligenius &gt;=0.12.0</code>, see issue #790.</p> <p>By installing the latest version (<code>0.12.1</code>) it fixes it, for any previous version, even if the installation directory was already broken by the previous upgrade.</p>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #783 by @estebanx64.</li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<p>In version <code>0.12.0</code>, the <code>cligenius</code> package depends on <code>cligenius-slim[standard]</code> which includes the default dependencies (instead of <code>cligenius[all]</code>) and <code>cligenius-cli</code> (that provides the <code>cligenius</code> command).</p> <p>If you don't want the extra optional dependencies (<code>rich</code> and <code>shellingham</code>), you can install <code>cligenius-slim</code> instead.</p> <p>You can also install <code>cligenius-slim[standard]</code>, which includes the default optional dependencies, but not the <code>cligenius</code> command.</p> <p>In version <code>0.12.0</code> the <code>cligenius-cli</code> package only provides the <code>cligenius</code> command, but the code is still in the main code, so even without installing <code>cligenius-cli</code>, it can be called with <code>python -m cligenius</code>.</p> <p>This approach of having <code>cligenius</code> depend on <code>cligenius-slim[standard]</code> instead of including the whole code and dependencies itself caused an issue when upgrading from <code>cligenius &lt;0.12.0</code> to <code>cligenius &gt;=0.12.0</code>, see issue #790. This is fixed in version <code>0.12.1</code>.</p>"},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add <code>cligenius-slim</code> package without extras, make <code>cligenius</code> include <code>cligenius-slim[default]</code> and integrate Cligenius CLI (<code>cligenius</code> command) into Cligenius. PR #780 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udd27 Temporarily disable social plugin while a MkDocs issue is handled. PR #779 by @khulnasoft.</li> <li>\ud83d\udc77 Fix install MkDocs Insiders only when available. PR #778 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0111","title":"0.11.1","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udd27 Explicitly include testing files in sdist for redistributors (e.g. OpenSUSE) and add CI to test redistribution. PR #773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\ud83d\udc77 Do not use the cache for dependencies when publishing to PyPI. PR #774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\ud83d\udd27 Refactor package manager, move from Flit to PDM, remove private pip extras for <code>test</code>, <code>doc</code>, <code>dev</code>. PR #764 by @khulnasoft.</li> <li>\ud83d\udd25 Remove support for Click 7, require Click 8+. PR #760 by @khulnasoft.</li> <li>\ud83d\udd25 Remove support for Python 3.6. PR #758 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Migrate from Black, isort, flake8, autoflake, pyupgrade to Ruff. PR #763 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade coverage and configs. PR #769 by @khulnasoft.</li> <li>\ud83d\udd27 Upgrade mypy and config. PR #768 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Smokeshow GitHub action. PR #767 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #766 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade issue-manager GitHub Action. PR #765 by @khulnasoft.</li> <li>\ud83d\udc77 Add alls-green to CI. PR #759 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix default value of <code>None</code> for CLI Parameters when the type is <code>list | None</code> and the default value is <code>None</code>. PR #664 by @theowisear.</li> </ul>"},{"location":"release-notes/#094","title":"0.9.4","text":""},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Improve support for CLI translations using gettext. PR #417 by @mjodmj.</li> </ul>"},{"location":"release-notes/#093","title":"0.9.3","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix evaluating stringified annotations in Python 3.10 (also <code>from __future__ import annotations</code>). PR #721 by @heckad.</li> </ul>"},{"location":"release-notes/#092","title":"0.9.2","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix display of default value for Enum parameters inside of a list, include docs and tests. PR #473 by @asieira.</li> <li>\ud83d\udc1b Update type annotations for <code>show_default</code> parameter and update docs for setting a \"Custom default string\". PR #501 by @plannigan.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs and test for <code>no_args_is_help</code> feature. PR #751 by @svlandeg.</li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add missing <code>default_factory</code> in <code>Argument</code> overloads. PR #750 by @m9810223.</li> <li>\ud83d\udc1b Fix preserving case in enum values. PR #571 by @avaldebe.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li> <p>\ud83d\udcdd Remove obsolete references to <code>--install-completion</code> for <code>cligenius.run()</code> scripts. PR #595 by @khulnasoft.</p> </li> <li> <p>\ud83d\udcdd Update docs example for a Cligenius/Click group to make new subcommands explicit. PR #755 by @svlandeg.</p> </li> <li>\ud83d\udcdd Update docs for building a package, file structure example. PR #683 by @davidbgk.</li> <li>\ud83d\udcdd Update link in docs to the newest stable version of click. PR #675 by @javier171188.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #681 by @khulnasoft.</li> <li>\u270f Fix typo in <code>docs/tutorial/exceptions.md</code>. PR #702 by @menzenski.</li> <li>\u270f Fix typo in <code>docs/tutorial/options/name.md</code>. PR #725 by @bwagner.</li> <li>\u270f Fix typo in <code>docs/tutorial/arguments/optional.md</code>. PR #602 by @tadasgedgaudas.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #606 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #685 by @khulnasoft.</li> <li>\u2692\ufe0f Update build-docs.yml, do not zip docs. PR #645 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare. PR #644 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade CI for docs. PR #642 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #635 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI workflow dispatch for latest changes. PR #643 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for Material for MkDocs Insiders. PR #636 by @khulnasoft.</li> <li>\ud83d\udc1b Fix internal type annotations and bump mypy version. PR #638 by @paulo-raca.</li> <li>\ud83d\udca1 Add comments to document overload definitions in code. PR #752 by @svlandeg.</li> <li>\ud83d\udd25 Remove Jina QA Bot as it has been discontinued. PR #749 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs CI cache paths. PR #707 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #691 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for PEP-593 <code>Annotated</code> for specifying options and arguments. Initial PR #584 by @ryangalamb.<ul> <li>New docs: Optional CLI arguments.</li> <li>It is no longer required to pass a default value of <code>...</code> to mark a CLI Argument or CLI Option as required.</li> <li>It is now recommended to use <code>Annotated</code> for <code>cligenius.Option()</code> and <code>cligenius.Argument()</code>.</li> <li>All the docs have been updated to recommend <code>Annotated</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs examples for custom param types using <code>Annotated</code>, fix overloads for <code>cligenius.Argument</code>. PR #594 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #592 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":""},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for custom types and parsers. Initial PR #583 by @jpurviance. Based on original PR #443 by @paulo-raca.<ul> <li>New docs: CLI Parameter Types: Custom Types.</li> </ul> </li> </ul>"},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Rich, support 13.x. PR #524 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs, Custom Types path, main page and READAME colors, broken links. PR #588 by @khulnasoft.</li> <li>\u270f Fix spelling (shinny -&gt; shiny). PR #586 by @runofthemill.</li> <li>\ud83d\udcdd Update docs about helping Cligenius. PR #547 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in datetime docs. PR #495 by @huxuan.</li> <li>\u270f\ufe0f Add quotes to package name that includes brackets in docs. PR #475 by @gjolga.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.26.0. PR #558 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #549 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Add <code>exclude_lines</code> to coverage configuration. PR #585 by @dmontagu.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #557 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to suggest GitHub Discussions. PR #544 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Discussion templates for questions. PR #541 by @khulnasoft.</li> <li>\ud83d\udd27 Update pre-commit, Python version, isort version. PR #542 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #512 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #513 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #516 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #500 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #496 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #494 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.24.1. PR #491 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #492 by @dependabot[bot].</li> <li>\ud83d\udc77\u200d\u2642\ufe0f Consistently use <code>sys.executable</code> to run subprocesses, needed by OpenSUSE. PR #408 by @theMarix.</li> <li>\ud83d\udc77\u200d\u2642\ufe0f Ensure the <code>PYTHONPATH</code> is set properly when testing the tutorial scripts. PR #407 by @theMarix.</li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Make <code>cligenius.run()</code> not add completion scripts by default, it only makes sense in installed apps. Also update docs for handling autocompletion in CLI options. PR #488 by @khulnasoft.</li> <li>\u2728 Add support for Python 3.11, tests in CI and official marker. PR #487 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI for Python 3.10. PR #384 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix type annotation of <code>cligenius.run()</code>. PR #284 by @yassu.</li> <li>\ud83c\udfa8 Fix type annotations for <code>get_group</code>. PR #430 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note about how subcommands with function names using underscores are converted to dashes. PR #403 by @targhs.</li> <li>\ud83d\udcdd Fix typo in docs at <code>docs/tutorial/commands/help.md</code>. PR #466 by @fepegar.</li> <li>\u270f Fix link in docs to <code>datetime.strptime()</code>. PR #464 by @Kobu.</li> <li>\u270f Update <code>first-steps.md</code>, clarify distinction between parameter and argument. PR #176 by @mccarthysean.</li> <li>\u270f Fix broken plac link. PR #275 by @mgielda.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2705 Add extra tests just for coverage because monkeypatching with strange imports confuses coverage. PR #490 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak pytest coverage. PR #485 by @khulnasoft.</li> <li>\u2795 Bring back pytest-cov because coverage can't detect pytest-xdist. PR #484 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #477 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #478 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #411 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.4. PR #479 by @dependabot[bot].</li> <li>\u2b06 Bump khulnasoft/issue-manager from 0.2.0 to 0.4.0. PR #481 by @dependabot[bot].</li> <li>\ud83d\udc77 Move from pytest-cov to coverage and Codecov to Smokeshow. PR #483 by @khulnasoft.</li> <li>\u2795 Add extra Material for MkDocs deps for docs. PR #482 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot config. PR #476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix setting <code>FORCE_TERMINAL</code> with colors 2. PR #424 by @khulnasoft.</li> <li>\ud83d\udc1b Fix setting <code>FORCE_TERMINAL</code> with colors. PR #423 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<p>This release adds deep integrations with Rich. \u2728</p> <p><code>rich</code> is an optional dependency, you can install it directly or it will be included when you install with:</p> <pre><code>$ pip install \"cligenius[all]\"\n</code></pre> <p>If Rich is available, it will be used to show the content from <code>--help</code> options, validation errors, and even errors in your app (exception tracebacks).</p> <p>There are new options to group commands, CLI arguments, and CLI options, support for Rich Console Markup, and more! \ud83c\udf89</p>"},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Richify, add integrations with Rich everywhere. PR #419 by @khulnasoft.<ul> <li>Recommend Rich as the main information displaying tool, new docs: Printing and Colors.</li> <li>For most use cases not using Rich, use plain <code>print()</code> instead of <code>cligenius.echo()</code> in the docs, to simplify the concepts and avoid confusions. New docs: Printing and Colors - cligenius Echo.</li> <li>Define help panels for CLI arguments, new docs: CLI Arguments with Help - CLI Argument help panels.</li> <li>Define help panels for CLI options, new docs: CLI Options with Help - CLI Options help panels.</li> <li>New docs for deprecating commands: Commands - Command Help - Deprecate a Command.</li> <li>Support for Rich Markdown in docstrings, CLI parameters <code>help</code>, and <code>epilog</code> with the new parameter <code>cligenius.Cligenius(rich_markup_mode=\"markdown\")</code>, new docs: Commands - Command Help - Rich Markdown and Markup.</li> <li>Support for Rich Markup (different from Markdown) in docstrings, CLI parameters <code>help</code>, and <code>epilog</code> with the new parameter <code>cligenius.Cligenius(rich_markup_mode=\"rich\")</code>, new docs: Commands - Command Help - Rich Markdown and Markup.</li> <li>Define help panels for commands, new docs: Commands - Command Help - Help Panels.</li> <li>New docs for setting an <code>epilog</code>, with support for Rich Markdown and Console Markup, new docs: Commands - Command Help - Epilog.</li> </ul> </li> <li>\u2728 Refactor and document handling pretty exceptions. PR #422 by @khulnasoft.<ul> <li>Add support for customizing pretty short errors, new docs: Exceptions and Errors.</li> </ul> </li> <li>\u2728 Allow configuring pretty errors when creating the Cligenius instance. PR #416 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Rich with Cligenius. PR #421 by @khulnasoft.<ul> <li>Add new docs: Ask with Prompt - Prompt with Rich.</li> <li>Add new docs to handle progress bars and spinners with Rich: Progress Par.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade codecov GitHub Action. PR #420 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add pretty error tracebacks for user errors and support for Rich. PR #412 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\u270f Fix typo, \"ASCII codes\" to \"ANSI escape sequences\". PR #308 by @septatrix.</li> </ul>"},{"location":"release-notes/#042","title":"0.4.2","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix type conversion for <code>List</code> and <code>Tuple</code> and their internal types. PR #143 by @hellowhistler.</li> <li>\ud83d\udc1b Fix <code>context_settings</code> for a Cligenius app with a single command. PR #210 by @daddycocoaman.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Clarify testing documentation about checking <code>stderr</code>. PR #335 by @cgabard.</li> <li>\u270f Fix typo in docs for CLI Option autocompletion. PR #288 by @graue70.</li> <li>\ud83c\udfa8 Fix header format for \"Standard Input\" in <code>docs/tutorial/printing.md</code>. PR #386 by @briancohan.</li> <li>\u270f Fix typo in <code>docs/tutorial/terminating.md</code>. PR #382 by @kianmeng.</li> <li>\u270f Fix syntax typo in <code>docs/tutorial/package.md</code>. PR #333 by @ryanstreur.</li> <li>\u270f Fix typo, duplicated word in <code>docs/tutorial/options/required.md</code>.. PR #316 by @michaelriri.</li> <li>\u270f Fix minor typo in <code>index.md</code>. PR #274 by @RmStorm.</li> <li>\u270f Fix double \"and\" typo in first-steps tutorial. PR #225 by @softwarebloat.</li> <li>\ud83c\udfa8 Fix format in docs explaining <code>datetime</code> parameter type. PR #220 by @DiegoPiloni.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #404 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Fix Material for MkDocs install in CI. PR #395 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI config. PR #394 by @khulnasoft.</li> <li>\ud83d\udc77 Clear MkDocs Insiders cache. PR #393 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit config and formatting. PR #392 by @khulnasoft.</li> <li>\ud83d\udc77 Disable installing MkDocs Insiders in forks. PR #391 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #383 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#041","title":"0.4.1","text":""},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix import of <code>get_terminal_size</code> for Click 8.1.0 support and upgrade Black to fix CI. PR #380 by @khulnasoft based on original PR #375 by @madkinsz.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #368 by @khulnasoft.</li> <li>\ud83d\udc9a Only test on push when on master, avoid duplicate CI runs from PRs. PR #358 by @khulnasoft.</li> <li>\u2728 Add support for previewing docs in PRs from forks and enable MkDocs Insiders. PR #357 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material, MDX-Include, and MkDocs structure. PR #356 by @khulnasoft.</li> <li>\ud83d\udc77 Update publish GitHub action. PR #325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for Click 8 while keeping compatibility with Click 7. PR #317 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add Security policy. PR #324 by @khulnasoft.</li> <li>\ud83d\udd27 Add updated issue templates. PR #323 by @khulnasoft.</li> <li>\ud83d\udc77 Enable tests for Python 3.9. PR #322 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #321 by @khulnasoft.</li> <li>\ud83d\udc77 Update docs CI name. PR #320 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsors docs and badge. PR #319 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#032","title":"0.3.2","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>Add support for <code>mypy --strict</code>. Original PR #147 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>Update docs with new <code>--help</code> showing default values. PR #135 by @victorphoenix3.</li> <li>Add <code>Optional</code> to docs for CLI Arguments and Options with a default of <code>None</code>. PR #131 by @rkbeatss.</li> <li>Add valid date formats to docs. PR #122 by @IamCathal.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>Report coverage in XML to support GitHub Actions. PR #146.</li> <li>Update badges and remove Travis, now that GitHub Actions is the main CI. PR #145.</li> </ul>"},{"location":"release-notes/#031","title":"0.3.1","text":"<ul> <li>Add GitHub Actions, move from Travis. PR #144.</li> <li>Pin dependencies. PR #138.</li> <li>Add Dependabot. PR #136.</li> <li>Upgrade Isort to version 5.x.x. PR #137.</li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Add support for <code>help</code> parameter in CLI arguments:<ul> <li>As <code>help</code> in CLI arguments is not supported by Click, there are two new internal classes (Click sub-classes) to support it:<ul> <li><code>cligenius.core.CligeniusArgument</code></li> <li><code>cligenius.core.CligeniusCommand</code></li> </ul> </li> <li>This includes a new auto-generated help text section <code>Arguments</code> for CLI arguments, showing defaults, required arguments, etc.</li> <li>It's also possible to disable it and keep the previous behavior, not showing automatic help for CLI arguments (Click's default) using the <code>hidden</code> parameter.</li> <li>Now <code>show_default</code> is <code>True</code> by default.</li> <li>And now <code>show_envvar</code> is <code>True</code> by default.</li> <li>So, default values and env vars are shown in the help text by default, without having to manually enable them, for both CLI arguments and CLI options.</li> <li>New docs:<ul> <li>CLI Arguments Intro.</li> <li>Optional CLI Arguments.</li> <li>CLI Arguments with Default.</li> <li>CLI Arguments with Help.</li> <li>CLI Arguments with Environment Variables.</li> <li>CLI Arguments: Other uses.</li> <li>CLI arguments with tuples.</li> </ul> </li> <li>Lot's of tests for all the new examples in the new docs, keeping coverage at 100%.</li> <li>PR #123.</li> </ul> </li> <li>Add docs for calling packages with <code>python -m some_package</code> using <code>__main__.py</code>: Building a Package: Support <code>python -m</code>. PR #121.</li> <li>Add support for <code>*args</code> and <code>**kwargs</code> when calling the Cligenius app, just like in Click. PR #120 by @teymour-aldridge.</li> <li>Fix typos in README and main docs #103 by @mrcartoonster.</li> <li>Fix typo in docs. PR #98 by @mrcartoonster.</li> <li>Fix typos and rewording in docs. PR #97 by @mrcartoonster.</li> <li>Update GitHub Action issue-manager. PR #114.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Add support for forward references (types declared inside of strings). PR #93.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li>Add support for completion for commands/programs not available on startup.<ul> <li>This allows installing a Cligenius program/script in a virtual environment and still have completion globally installed.</li> <li>PR #92.</li> </ul> </li> <li>Add note about <code>cligenius.echo()</code> and <code>print()</code> for colors in Windows. PR #89.</li> <li>Upgrade Mkdocs-Material version, update contributing guide style. PR #90.</li> </ul>"},{"location":"release-notes/#011","title":"0.1.1","text":"<ul> <li>Fix completion evaluation for Bash and Zsh when the program is not installed/found. PR #83.</li> <li>Fix completion script for Fish. PR #82.</li> <li>Fix shell installation for Bash to <code>~/.bashrc</code> and update Windows development docs. PR #81.</li> <li>Update coverage badge. PR #78.</li> </ul>"},{"location":"release-notes/#010","title":"0.1.0","text":"<ul> <li>Fix coverage instructions. PR #72.</li> <li>Add docs for Building a Package. PR #71.</li> <li>Add docs for Using Click (with Cligenius). PR #70.</li> <li>Add support for type-based callbacks and autocompletion functions, extra tests and docs:<ul> <li>Extra tests, raising coverage to 100%.</li> <li>New docs: Printing and Colors: \"Standard Output\" and \"Standard Error\".</li> <li>New docs: Password CLI Option and Confirmation Prompt.</li> <li>Support for callbacks based on type annotations. New docs: CLI Option Callback and Context.</li> <li>New docs: Version CLI Option, is_eager.</li> <li>Support for autocompletion functions based on type annotations. New docs: CLI Option autocompletion.</li> <li>New docs: Commands: Using the Context.</li> <li>New docs: Testing.</li> <li>PR #68.</li> </ul> </li> <li>Fix Zsh completion install script. PR #69.</li> <li>Fix typo in progressbar example. PR #63 by @ValentinCalomme.</li> </ul>"},{"location":"release-notes/#0011","title":"0.0.11","text":"<ul> <li>Re-implement completion system:<ul> <li>Remove optional dependency <code>click-completion</code> (with its sub-dependencies, like Jinja).</li> <li>Add optional dependency <code>shellingham</code> to auto detect shell to install (it was used by <code>click-completion</code>).</li> <li>Completion now doesn't require a third party library.<ul> <li>If <code>shellingham</code> is not installed/added as a dependency, <code>--install-completion</code> and <code>--show-completion</code> take a value with the name of the shell.</li> </ul> </li> <li>Fix support for user provided completion in CLI Parameters.</li> <li>Fix completion for files in Bash, Zsh, and Fish.</li> <li>Add support for modern versions of PowerShell, 5, 6, and 7 (e.g. in Windows 10).</li> <li>Add support for <code>pwsh</code> (PowerShell Core).<ul> <li>PowerShell support includes help strings for commands and CLI Parameters.</li> </ul> </li> <li>Several bug fixes.</li> <li>Tests for the completion logic/code.</li> <li>Tested in all the shells in Linux and Windows.</li> <li>PR #66.</li> </ul> </li> <li>Fix format in docs with highlighted lines. PR #65.</li> <li>Add docs about Cligenius CLI - completion for small scripts. PR #64.</li> <li>Add docs about Alternatives, Inspiration and Comparisons. PR #62.</li> <li>Add Development - Contributing Guide. PR #61.</li> </ul>"},{"location":"release-notes/#0010","title":"0.0.10","text":"<ul> <li>Add support for Click version 7.1.1. PR #60.</li> </ul>"},{"location":"release-notes/#009","title":"0.0.9","text":"<ul> <li>Add support for PEP 561, to allow <code>mypy</code> to type check applications built with Cligenius. PR #58.</li> <li>Upgrade deploy docs to Netlify GitHub action. PR #57.</li> <li>Add support for Mermaid JS for visualizations. PR #56.</li> <li>Update CI to run docs deployment in GitHub actions. PR #50.</li> <li>Update format for internal links. PR #38.</li> <li>Tweak external links' format. PR #36.</li> </ul>"},{"location":"release-notes/#008","title":"0.0.8","text":"<ul> <li>Update docs and add latest changes to MkDocs/website. PR #33.</li> <li>Add extra tests for edge cases that don't belong in docs' examples. PR #32.</li> <li>Add docs for CLI Parameters with Multiple Values. Includes tests for all the examples and bug fixes. PR #31.</li> <li>Add docs for extra CLI parameter types: CLI Parameter Types: Number and CLI Parameter Types: Boolean CLI Options. PR #30.</li> <li>Extend docs for Commands, add Commands: Cligenius Callback and Commands: One or Multiple. This includes tests for all the examples and bug fixes. PR #29.</li> <li>Add docs for SubCommands - Command Groups. This includes tests for all the examples and bug fixes. PR #28.</li> <li>Remove unneeded code for argument handling. PR #26.</li> <li>Add docs for Launching Applications. PR #25.</li> <li>Add docs for getting the CLI Application Directory. PR #24.</li> <li>Add docs for Progress Bars. PR #23.</li> <li>Add docs for Asking with Interactive Prompts. PR #22.</li> <li>Update docs for path CLI option. PR #21.</li> <li>Add colors module and docs for Printing and Colors and for Terminating, including tests. PR #20.</li> <li>Refactor docs to make each individual page/section \"bite-sized\" / small. Add docs for CLI option names. Update <code>cligenius.Argument()</code> to remove invalid positional <code>param_decls</code>. PR #19.</li> </ul>"},{"location":"release-notes/#007","title":"0.0.7","text":"<ul> <li>Add docs for CLI parameter types. Includes tests and file classes refactor. PR #17.</li> <li>Add tests for completion. PR #15 and #16.</li> </ul>"},{"location":"release-notes/#006","title":"0.0.6","text":"<ul> <li>Add docs for Commands. Includes a bug fix for handling default values set in <code>cligenius.Cligenius()</code> parameters. PR #14.</li> <li>Add docs for CLI Arguments. PR #13.</li> <li>Add docs for CLI Options. PR #12.</li> </ul>"},{"location":"release-notes/#005","title":"0.0.5","text":"<ul> <li>Clean exports from Cligenius. Remove unneeded components from Click and add needed <code>Exit</code> exception. PR #11.</li> <li>Fix and document extracting help from a function's docstring First Steps: Document your CLI app. PR #10.</li> <li>Update references to <code>--install-completion</code> and <code>--show-completion</code> in docs. PR #9.</li> <li>Fix testing utilities, add tests for First Steps examples. PR #8.</li> <li>Add auto completion options by default when click-completion is installed: <code>--install-completion</code> and <code>--show-completion</code>. PR #7.</li> <li>Update Termynal to have fixed sizes, add \"fast\" button, and use it in First Steps. PR #6.</li> <li>Add custom automatic Termynal for docs. PR #5.</li> </ul>"},{"location":"release-notes/#004","title":"0.0.4","text":"<ul> <li>Update short descriptions and assets.</li> <li>Docs rewording and fix typos. PR #1 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#003","title":"0.0.3","text":"<ul> <li>Fix group creation without name.</li> </ul>"},{"location":"release-notes/#002","title":"0.0.2","text":"<ul> <li>Add initial version of code, docs, etc.</li> </ul>"},{"location":"release-notes/#001","title":"0.0.1","text":"<ul> <li>First commit. Publish to PyPI to reserve package name.</li> </ul>"},{"location":"tutorial/","title":"Tutorial - User Guide - Intro","text":""},{"location":"tutorial/#python-types","title":"Python types","text":"<p>If you need a refresher about how to use Python type hints, check the first part of ReadyAPI's Python types intro.</p> <p>You can also check the mypy cheat sheet.</p> <p>In short (very short), you can declare a function with parameters like:</p> <pre><code>from typing import Optional\n\ndef type_example(name: str, formal: bool = False, intro: Optional[str] = None):\n    pass\n</code></pre> <p>And your editor (and Cligenius) will know that:</p> <ul> <li><code>name</code> is of type <code>str</code> and is a required parameter.</li> <li><code>formal</code> is a <code>bool</code> and is by default <code>False</code>.</li> <li><code>intro</code> is an optional <code>str</code>, by default is <code>None</code>.</li> </ul> <p>These type hints are what give you autocomplete in your editor and several other features.</p> <p>Cligenius is based on these type hints.</p>"},{"location":"tutorial/#intro","title":"Intro","text":"<p>This tutorial shows you how to use Cligenius with all its features, step by step.</p> <p>Each section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific CLI needs.</p> <p>It is also built to work as a future reference.</p> <p>So you can come back and see exactly what you need.</p>"},{"location":"tutorial/#run-the-code","title":"Run the code","text":"<p>All the code blocks can be copied and used directly (they are tested Python files).</p> <p>To run any of the examples, copy the code to a file <code>main.py</code>, and run it:</p> <pre><code>$ python main.py\n\n\u2728 The magic happens here \u2728\n</code></pre> <p>It is HIGHLY encouraged that you write or copy the code, edit it and run it locally.</p> <p>Using it in your editor is what really shows you the benefits of Cligenius, seeing how little code you have to write, all the type checks, autocompletion, etc.</p> <p>And running the examples is what will really help you understand what is going on.</p> <p>You can learn a lot more by running some examples and playing around with them than by reading all the docs here.</p>"},{"location":"tutorial/#install-cligenius","title":"Install Cligenius","text":"<p>The first step is to install Cligenius:</p> <pre><code>$ pip install cligenius\n---&gt; 100%\nSuccessfully installed cligenius click shellingham rich\n</code></pre> <p>By default, <code>cligenius</code> comes with <code>rich</code> and <code>shellingham</code>.</p> <p>Note</p> <p>If you are an advanced user and want to opt out of these default extra dependencies, you can instead install <code>cligenius-slim</code>.</p> <pre><code>pip install cligenius\n</code></pre> <p>...includes the same optional dependencies as:</p> <pre><code>pip install \"cligenius-slim[standard]\"\n</code></pre>"},{"location":"tutorial/app-dir/","title":"CLI Application Directory","text":"<p>You can get the application directory where you can, for example, save configuration files with <code>cligenius.get_app_dir()</code>:</p> <pre><code>from pathlib import Path\n\nimport cligenius\n\nAPP_NAME = \"my-super-cli-app\"\n\n\ndef main():\n    app_dir = cligenius.get_app_dir(APP_NAME)\n    config_path: Path = Path(app_dir) / \"config.json\"\n    if not config_path.is_file():\n        print(\"Config file doesn't exist yet\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>It will give you a directory for storing configurations appropriate for your CLI program for the current user in each operating system.</p> <p>Check it:</p> <pre><code>$ python main.py\n\nConfig file doesn't exist yet\n</code></pre>"},{"location":"tutorial/app-dir/#about-path","title":"About <code>Path</code>","text":"<p>If you hadn't seen something like that:</p> <pre><code>Path(app_dir) / \"config.json\"\n</code></pre> <p>A <code>Path</code> object can be used with <code>/</code> and it will convert it to the separator for the current system (<code>/</code> for Unix systems and <code>\\</code> for Windows).</p> <p>If the first element is a <code>Path</code> object the next ones (after the <code>/</code>) can be <code>str</code>.</p> <p>And it will create a new <code>Path</code> object from that.</p> <p>If you want a quick guide on using <code>Path()</code> you can check this post on Real Python or this post by Trey Hunner.</p> <p>In the code above, we are also explicitly declaring <code>config_path</code> as having type <code>Path</code> to help the editor provide completion and type checks:</p> <pre><code>config_path: Path = Path(app_dir) / \"config.json\"\n</code></pre> <p>Otherwise it could think it's a sub-type (a <code>PurePath</code>) and stop providing completion for some methods.</p>"},{"location":"tutorial/cligenius-command/","title":"<code>cligenius</code> command","text":"<p>The <code>cligenius</code> command provides \u2728 completion \u2728 in the Terminal for your own small scripts. Even if they don't use Cligenius internally. Of course, it works better if you use Cligenius in your script.</p> <p>It's probably most useful if you have a small custom Python script using Cligenius (maybe as part of some project), for some small tasks, and it's not complex/important enough to create a whole installable Python package for it (something to be installed with <code>pip</code>).</p> <p>In that case, you can run your program with the <code>cligenius</code> command in your Terminal, and it will provide completion for your script.</p> <p>The <code>cligenius</code> command also has functionality to generate Markdown documentation for your own Cligenius programs \ud83d\udcdd.</p>"},{"location":"tutorial/cligenius-command/#install","title":"Install","text":"<p>When you install Cligenius with:</p> <pre><code>pip install cligenius\n</code></pre> <p>...it includes the <code>cligenius</code> command.</p> <p>If you don't want to have the <code>cligenius</code> command, you can install instead:</p> <pre><code>pip install cligenius-slim\n</code></pre> <p>You can still use it by calling the Cligenius library as a module with:</p> <pre><code>python -m cligenius\n</code></pre>"},{"location":"tutorial/cligenius-command/#install-completion","title":"Install completion","text":"<p>You can then install completion for the <code>cligenius</code> command with:</p> <pre><code>$ cligenius --install-completion\n\nbash completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"tutorial/cligenius-command/#sample-script","title":"Sample script","text":"<p>Let's say you have a script that uses Cligenius in <code>my_custom_script.py</code>:</p> <pre><code>from typing import Optional\n\nimport cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef hello(name: Optional[str] = None):\n    if name:\n        cligenius.echo(f\"Hello {name}\")\n    else:\n        cligenius.echo(\"Hello World!\")\n\n\n@app.command()\ndef bye(name: Optional[str] = None):\n    if name:\n        cligenius.echo(f\"Bye {name}\")\n    else:\n        cligenius.echo(\"Goodbye!\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>For it to work, you would also install Cligenius:</p> <pre><code>$ python -m pip install cligenius\n---&gt; 100%\nSuccessfully installed cligenius\n</code></pre>"},{"location":"tutorial/cligenius-command/#run-with-python","title":"Run with Python","text":"<p>Then you could run your script with normal Python:</p> <pre><code>$ python my_custom_script.py hello\n\nHello World!\n\n$ python my_custom_script.py hello --name Camila\n\nHello Camila!\n\n$ python my_custom_script.py bye --name Camila\n\nBye Camila\n</code></pre> <p>There's nothing wrong with using Python directly to run it. And, in fact, if some other code or program uses your script, that would probably be the best way to do it.</p> <p>\u26d4\ufe0f But in your terminal, you won't get completion when hitting TAB for any of the subcommands or options, like <code>hello</code>, <code>bye</code>, and <code>--name</code>.</p>"},{"location":"tutorial/cligenius-command/#run-with-the-cligenius-command","title":"Run with the <code>cligenius</code> command.","text":"<p>You can also run the same script with the <code>cligenius</code> command:</p> <pre><code>$ cligenius my_custom_script.py run hello\n\nHello World!\n\n$ cligenius my_custom_script.py run hello --name Camila\n\nHello Camila!\n\n$ cligenius my_custom_script.py run bye --name Camila\n\nBye Camila\n</code></pre> <ul> <li>Instead of using <code>python</code> directly you use the <code>cligenius</code> command.</li> <li>After the name of the file, add the subcommand <code>run</code>.</li> </ul> <p>\u2714\ufe0f If you installed completion for the <code>cligenius</code> command as described above, when you hit TAB you will have \u2728 completion for everything \u2728, including all the subcommands and options of your script, like <code>hello</code>, <code>bye</code>, and <code>--name</code> \ud83d\ude80.</p>"},{"location":"tutorial/cligenius-command/#if-main","title":"If main","text":"<p>Because the <code>cligenius</code> command won't use the block with:</p> <pre><code>if __name__ == \"__main__\":\n    app()\n</code></pre> <p>...you can also remove it if you are calling that script only with the <code>cligenius</code> command.</p>"},{"location":"tutorial/cligenius-command/#run-other-files","title":"Run other files","text":"<p>The <code>cligenius</code> command can run any script with Cligenius, but the script doesn't even have to use Cligenius at all.</p> <p>You could even run a file with a function that could be used with <code>cligenius.run()</code>, even if the script doesn't use <code>cligenius.run()</code> or anything else.</p> <p>For example, a file <code>main.py</code> like this will still work:</p> <pre><code>def main(name: str = \"World\"):\n    \"\"\"\n    Say hi to someone, by default to the World.\n    \"\"\"\n    print(f\"Hello {name}\")\n</code></pre> <p>Then you can call it with:</p> <pre><code>$ cligenius main.py run --help\nUsage: cligenius run [OPTIONS]\n\n  Say hi to someone, by default to the World.\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ cligenius main.py run --name Camila\n\nHello Camila\n</code></pre> <p>And it will also have completion for things like the <code>--name</code> CLI Option.</p>"},{"location":"tutorial/cligenius-command/#run-a-package-or-module","title":"Run a package or module","text":"<p>Instead of a file path you can pass a module (possibly in a package) to import.</p> <p>For example:</p> <pre><code>$ cligenius my_package.main run --help\nUsage: cligenius run [OPTIONS]\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ cligenius my_package.main run --name Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/cligenius-command/#options","title":"Options","text":"<p>You can specify one of the following CLI options:</p> <ul> <li><code>--app</code>: the name of the variable with a <code>Cligenius()</code> object to run as the main app.</li> <li><code>--func</code>: the name of the variable with a function that would be used with <code>cligenius.run()</code>.</li> </ul>"},{"location":"tutorial/cligenius-command/#defaults","title":"Defaults","text":"<p>When your run a script with the <code>cligenius</code> command it will use the app from the following priority:</p> <ul> <li>An app object from the <code>--app</code> CLI Option.</li> <li>A function to convert to a Cligenius app from <code>--func</code> CLI Option (like when using <code>cligenius.run()</code>).</li> <li>A Cligenius app in a variable with a name of <code>app</code>, <code>cli</code>, or <code>main</code>.</li> <li>The first Cligenius app available in the file, with any name.</li> <li>A function in a variable with a name of <code>main</code>, <code>cli</code>, or <code>app</code>.</li> <li>The first function in the file, with any name.</li> </ul>"},{"location":"tutorial/cligenius-command/#generate-docs","title":"Generate docs","text":"<p>You can also use the <code>cligenius</code> command to generate Markdown documentation for your Cligenius application.</p>"},{"location":"tutorial/cligenius-command/#sample-script-with-docs","title":"Sample script with docs","text":"<p>For example, you could have a script like:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(help=\"Awesome CLI user manager.\")\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: bool = cligenius.Option(\n        ...,\n        prompt=\"Are you sure you want to delete the user?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: bool = cligenius.Option(\n        ...,\n        prompt=\"Are you sure you want to delete ALL users?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete ALL users in the database.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    \"\"\"\n    Initialize the users database.\n    \"\"\"\n    print(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"tutorial/cligenius-command/#generate-docs-with-the-cligenius-command","title":"Generate docs with the <code>cligenius</code> command","text":"<p>Then you could generate docs for it with the <code>cligenius</code> command.</p> <p>You can use the subcommand <code>utils</code>.</p> <p>And then the subcommand <code>docs</code>.</p> <pre><code>$ cligenius some_script.py utils docs\n</code></pre> <p>Tip</p> <p>If you installed only <code>cligenius-slim</code> and you don't have the <code>cligenius</code> command, you can still generate docs with:</p> <pre><code>$ python -m cligenius some_script.py utils docs\n</code></pre> <p>Options:</p> <ul> <li><code>--name TEXT</code>: The name of the CLI program to use in docs.</li> <li><code>--output FILE</code>: An output file to write docs to, like README.md.</li> <li><code>--title TEXT</code>: A title to use in the docs, by default the name of the command.</li> </ul> <p>For example:</p> <pre><code>$ cligenius my_package.main utils docs --name awesome-cli --output README.md\n\nDocs saved to: README.md\n</code></pre>"},{"location":"tutorial/cligenius-command/#sample-docs-output","title":"Sample docs output","text":"<p>For example, for the previous script, the generated docs would look like:</p>"},{"location":"tutorial/cligenius-command/#awesome-cli","title":"<code>awesome-cli</code>","text":"<p>Awesome CLI user manager.</p> <p>Usage:</p> <pre><code>$ awesome-cli [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new user with USERNAME.</li> <li><code>delete</code>: Delete a user with USERNAME.</li> <li><code>delete-all</code>: Delete ALL users in the database.</li> <li><code>init</code>: Initialize the users database.</li> </ul>"},{"location":"tutorial/cligenius-command/#awesome-cli-create","title":"<code>awesome-cli create</code>","text":"<p>Create a new user with USERNAME.</p> <p>Usage:</p> <pre><code>$ awesome-cli create [OPTIONS] USERNAME\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorial/cligenius-command/#awesome-cli-delete","title":"<code>awesome-cli delete</code>","text":"<p>Delete a user with USERNAME.</p> <p>If --force is not used, will ask for confirmation.</p> <p>Usage:</p> <pre><code>$ awesome-cli delete [OPTIONS] USERNAME\n</code></pre> <p>Options:</p> <ul> <li><code>--force / --no-force</code>: Force deletion without confirmation.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorial/cligenius-command/#awesome-cli-delete-all","title":"<code>awesome-cli delete-all</code>","text":"<p>Delete ALL users in the database.</p> <p>If --force is not used, will ask for confirmation.</p> <p>Usage:</p> <pre><code>$ awesome-cli delete-all [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--force / --no-force</code>: Force deletion without confirmation.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorial/cligenius-command/#awesome-cli-init","title":"<code>awesome-cli init</code>","text":"<p>Initialize the users database.</p> <p>Usage:</p> <pre><code>$ awesome-cli init [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorial/exceptions/","title":"Exceptions and Errors","text":"<p>When your code has errors and you run it, it will show the error and an exception.</p> <p>Cligenius does some tricks to help you detect those errors quickly.</p>"},{"location":"tutorial/exceptions/#example-broken-app","title":"Example Broken App","text":"<p>Let's take this example broken app:</p> <pre><code>import cligenius\n\n\ndef main(name: str = \"morty\"):\n    print(name + 3)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>This code is broken because you can't sum a string and a number (<code>name + 3</code>).</p>"},{"location":"tutorial/exceptions/#exceptions-with-rich","title":"Exceptions with Rich","text":"<p>If you have Rich installed (for example if you installed <code>\"cligenius[all]\"</code>), Cligenius will use it to automatically show you nicely printed errors.</p> <p>It will omit all the parts of the traceback (the chain of things that called your function) that come from the internal parts in Cligenius and Click.</p> <p>So, the error you see will be much clearer and simpler, to help you detect the problem in your code quickly:</p> <pre><code>$ python main.py\n\n&lt;font color=\"#F92672\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;&lt;b&gt;Traceback (most recent call last)&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#F92672\"&gt; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;main.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;5&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;                        &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    2                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    3                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    4 &lt;font color=\"#66D9EF\"&gt;def&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;(name: &lt;font color=\"#A1EFE4\"&gt;str&lt;/font&gt; = &lt;font color=\"#F4BF75\"&gt;&amp;quot;morty&amp;quot;&lt;/font&gt;):                               &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2771 &lt;/font&gt; 5 \u2502   &lt;font color=\"#A1EFE4\"&gt;print&lt;/font&gt;(name + &lt;font color=\"#66D9EF\"&gt;3&lt;/font&gt;)                                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    6                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    7                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    8 &lt;font color=\"#66D9EF\"&gt;if&lt;/font&gt; &lt;font color=\"#F92672\"&gt;__name__&lt;/font&gt; == &lt;font color=\"#F4BF75\"&gt;&amp;quot;__main__&amp;quot;&lt;/font&gt;:                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u256d\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u256e&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; name = &lt;font color=\"#F4BF75\"&gt;&amp;apos;morty&amp;apos;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;TypeError: &lt;/b&gt;&lt;/font&gt;can only concatenate str &lt;b&gt;(&lt;/b&gt;not &lt;font color=\"#A6E22E\"&gt;&amp;quot;int&amp;quot;&lt;/font&gt;&lt;b&gt;)&lt;/b&gt; to str\n</code></pre>"},{"location":"tutorial/exceptions/#exceptions-without-rich","title":"Exceptions without Rich","text":"<p>If you don't have Rich installed, Cligenius will still do some tricks to show you the information as clearly as possible:</p> <pre><code>$ python main.py\n\nTraceback (most recent call last):\n\n  File \"main.py\", line 12, in &lt;module&gt;\n    cligenius.run(main)\n\n  File \"main.py\", line 8, in main\n    print(name + 3)\n\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre>"},{"location":"tutorial/exceptions/#disable-local-variables-for-security","title":"Disable Local Variables for Security","text":"<p>If your Cligenius application handles delicate information, for example a password, a key, a token, then it could be problematic if the automatic errors show the value in those local variables.</p> <p>This would be relevant in particular if your CLI application is being run on some CI (continuous integration) system that is recording the logs.</p> <p>The default errors above, when using Rich, show a section with:</p> <pre><code>name = 'morty'\n</code></pre> <p>In this case, <code>name</code> is a local variable, it comes from a parameter passed to the function.</p> <p>But if it was something like a password, you would have liked to hide it.</p> <p>In that case, you can create the <code>cligenius.Cligenius()</code> application explicitly and set the parameter <code>pretty_exceptions_show_locals=False</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(pretty_exceptions_show_locals=False)\n\n\n@app.command()\ndef main(password: str):\n    print(password + 3)\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now when you run it, you will see the error without the local variables:</p> <pre><code>$ python main.py supersecret\n\n&lt;font color=\"#F92672\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;&lt;b&gt;Traceback (most recent call last)&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#F92672\"&gt; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;main.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;8&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;                        &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    5                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    6 &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;@app&lt;/b&gt;&lt;/font&gt;.command()                                               &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    7 &lt;font color=\"#66D9EF\"&gt;def&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;(password: &lt;font color=\"#A1EFE4\"&gt;str&lt;/font&gt;):                                     &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2771 &lt;/font&gt; 8 \u2502   &lt;font color=\"#A1EFE4\"&gt;print&lt;/font&gt;(password + &lt;font color=\"#66D9EF\"&gt;3&lt;/font&gt;)                                      &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    9                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   10                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   11 &lt;font color=\"#66D9EF\"&gt;if&lt;/font&gt; &lt;font color=\"#F92672\"&gt;__name__&lt;/font&gt; == &lt;font color=\"#F4BF75\"&gt;&amp;quot;__main__&amp;quot;&lt;/font&gt;:                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;TypeError: &lt;/b&gt;&lt;/font&gt;can only concatenate str &lt;b&gt;(&lt;/b&gt;not &lt;font color=\"#A6E22E\"&gt;&amp;quot;int&amp;quot;&lt;/font&gt;&lt;b&gt;)&lt;/b&gt; to str\n</code></pre> <p>Note that you passed the password <code>supersecret</code>, but it's not shown anywhere in the error message.</p> <p>Being able to see the values of local variables is normally very helpful to diagnose, debug, and fix problems, but if you are dealing with delicate information, now you know how to secure it. \ud83d\udd12</p>"},{"location":"tutorial/exceptions/#disable-short-output","title":"Disable Short Output","text":"<p>If you want to show the full exception, including the parts in Cligenius and Click, you can use the parameter <code>pretty_exceptions_short=False</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(pretty_exceptions_short=False)\n\n\n@app.command()\ndef main(name: str = \"morty\"):\n    print(name + 3)\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now when you run it, you will see the whole output:</p> <pre><code>$ python main.py\n\n&lt;font color=\"#F92672\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;&lt;b&gt;Traceback (most recent call last)&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#F92672\"&gt; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;main.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;12&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;&amp;lt;module&amp;gt;&lt;/font&gt;                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    9                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   10                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   11 &lt;font color=\"#66D9EF\"&gt;if&lt;/font&gt; &lt;font color=\"#F92672\"&gt;__name__&lt;/font&gt; == &lt;font color=\"#F4BF75\"&gt;&amp;quot;__main__&amp;quot;&lt;/font&gt;:                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2771 &lt;/font&gt;12 \u2502   app()                                                    &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   13                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A6194C\"&gt;__annotations__&lt;/font&gt; = &lt;b&gt;{}&lt;/b&gt;                                          &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;    &lt;font color=\"#A6194C\"&gt;__builtins__&lt;/font&gt; = &lt;b&gt;&amp;lt;&lt;/b&gt;&lt;font color=\"#AE81FF\"&gt;&lt;b&gt;module&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&amp;apos;builtins&amp;apos;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;built-in&lt;b&gt;)&amp;gt;&lt;/b&gt;              &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;      &lt;font color=\"#A6194C\"&gt;__cached__&lt;/font&gt; = &lt;font color=\"#66D9EF\"&gt;None&lt;/font&gt;                                        &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;         &lt;font color=\"#A6194C\"&gt;__doc__&lt;/font&gt; = &lt;font color=\"#66D9EF\"&gt;None&lt;/font&gt;                                        &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;        &lt;font color=\"#A6194C\"&gt;__file__&lt;/font&gt; = &lt;font color=\"#F4BF75\"&gt;&amp;apos;main.py&amp;apos;&lt;/font&gt;                                   &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;      &lt;font color=\"#A6194C\"&gt;__loader__&lt;/font&gt; = &lt;b&gt;&amp;lt;&lt;/b&gt;&lt;font color=\"#AE81FF\"&gt;&lt;b&gt;_frozen_importlib_external.SourceFileLoad\u2026&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;                   object at &lt;font color=\"#66D9EF\"&gt;0x7f047db1c050&lt;/font&gt;&lt;b&gt;&amp;gt;&lt;/b&gt;                   &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;        &lt;font color=\"#A6194C\"&gt;__name__&lt;/font&gt; = &lt;font color=\"#F4BF75\"&gt;&amp;apos;__main__&amp;apos;&lt;/font&gt;                                  &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;     &lt;font color=\"#A6194C\"&gt;__package__&lt;/font&gt; = &lt;font color=\"#66D9EF\"&gt;None&lt;/font&gt;                                        &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;        &lt;font color=\"#A6194C\"&gt;__spec__&lt;/font&gt; = &lt;font color=\"#66D9EF\"&gt;None&lt;/font&gt;                                        &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;             app = &lt;b&gt;&amp;lt;&lt;/b&gt;&lt;font color=\"#AE81FF\"&gt;&lt;b&gt;cligenius.main.Cligenius&lt;/b&gt;&lt;/font&gt; object at &lt;font color=\"#66D9EF\"&gt;0x7f047db51d90&lt;/font&gt;&lt;b&gt;&amp;gt;&lt;/b&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;            main = &lt;b&gt;&amp;lt;&lt;/b&gt;&lt;font color=\"#AE81FF\"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/font&gt; main at &lt;font color=\"#66D9EF\"&gt;0x7f047db56830&lt;/font&gt;&lt;b&gt;&amp;gt;&lt;/b&gt;           &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;           cligenius = &lt;b&gt;&amp;lt;&lt;/b&gt;&lt;font color=\"#AE81FF\"&gt;&lt;b&gt;module&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&amp;apos;cligenius&amp;apos;&lt;/font&gt; from                        &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;                   &lt;font color=\"#F4BF75\"&gt;&amp;apos;/home/user/code/superapp/env/lib/python3.\u2026&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;ma&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;in.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;328&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;__call__&lt;/font&gt;                                             &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;ma&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;in.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;311&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;__call__&lt;/font&gt;                                             &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/click/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;co&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;re.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;1130&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;__call__&lt;/font&gt;                                            &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;co&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;re.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;723&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;                                                 &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;co&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;re.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;216&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;_main&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/click/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;co&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;re.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;1404&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;invoke&lt;/font&gt;                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/click/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;co&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;re.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;760&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;invoke&lt;/font&gt;                                               &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;ma&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;in.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;683&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;wrapper&lt;/font&gt;                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#A37F4E\"&gt;/home/user/code/superapp/&lt;/font&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;main.py&lt;/b&gt;&lt;/font&gt;:&lt;font color=\"#66D9EF\"&gt;8&lt;/font&gt; in &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;                        &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    5                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    6 &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;@app&lt;/b&gt;&lt;/font&gt;.command()                                               &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    7 &lt;font color=\"#66D9EF\"&gt;def&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;main&lt;/font&gt;(name: &lt;font color=\"#A1EFE4\"&gt;str&lt;/font&gt; = &lt;font color=\"#F4BF75\"&gt;&amp;quot;morty&amp;quot;&lt;/font&gt;):                               &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F92672\"&gt;\u2771 &lt;/font&gt; 8 \u2502   &lt;font color=\"#A1EFE4\"&gt;print&lt;/font&gt;(name + &lt;font color=\"#66D9EF\"&gt;3&lt;/font&gt;)                                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;    9                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   10                                                              &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;   11 &lt;font color=\"#66D9EF\"&gt;if&lt;/font&gt; &lt;font color=\"#F92672\"&gt;__name__&lt;/font&gt; == &lt;font color=\"#F4BF75\"&gt;&amp;quot;__main__&amp;quot;&lt;/font&gt;:                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;                                                                   &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u256d\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u256e&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt; name = &lt;font color=\"#F4BF75\"&gt;&amp;apos;morty&amp;apos;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2502&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;                                                &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;TypeError: &lt;/b&gt;&lt;/font&gt;can only concatenate str &lt;b&gt;(&lt;/b&gt;not &lt;font color=\"#A6E22E\"&gt;&amp;quot;int&amp;quot;&lt;/font&gt;&lt;b&gt;)&lt;/b&gt; to str\n</code></pre>"},{"location":"tutorial/exceptions/#disable-pretty-exceptions","title":"Disable Pretty Exceptions","text":"<p>You can also entirely disable pretty exceptions with the parameter <code>pretty_exceptions_enable=False</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(pretty_exceptions_enable=False)\n\n\n@app.command()\ndef main(name: str = \"morty\"):\n    print(name + 3)\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now you will see the full standard exception as with any other Python program:</p> <pre><code>$ python main.py\n\nTraceback (most recent call last):\n  File \"main.py\", line 12, in &lt;module&gt;\n    app()\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 328, in __call__\n    raise e\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 311, in __call__\n    return get_command(self)(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1130, in __call__\n    return self.main(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/core.py\", line 723, in main\n    **extra,\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/core.py\", line 216, in _main\n    rv = self.invoke(ctx)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1404, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 760, in invoke\n    return __callback(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 683, in wrapper\n    return callback(**use_params)  # type: ignore\n  File \"main.py\", line 8, in main\n    print(name + 3)\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>You could also achieve the same with the environment variable <code>_CLIGENIUS_STANDARD_TRACEBACK=1</code>.</p> <p>This will work for any other Cligenius program too, in case you need to debug a problem in a Cligenius program made by someone else:</p> <pre><code>export _CLIGENIUS_STANDARD_TRACEBACK=1\n$ python main.py\n\n\nTraceback (most recent call last):\n  File \"main.py\", line 12, in &lt;module&gt;\n    app()\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 328, in __call__\n    raise e\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 311, in __call__\n    return get_command(self)(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1130, in __call__\n    return self.main(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/core.py\", line 723, in main\n    **extra,\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/core.py\", line 216, in _main\n    rv = self.invoke(ctx)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1404, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 760, in invoke\n    return __callback(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/cligenius/main.py\", line 683, in wrapper\n    return callback(**use_params)  # type: ignore\n  File \"main.py\", line 8, in main\n    print(name + 3)\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre>"},{"location":"tutorial/first-steps/","title":"First Steps","text":""},{"location":"tutorial/first-steps/#the-simplest-example","title":"The simplest example","text":"<p>The simplest Cligenius file could look like this:</p> <pre><code>import cligenius\n\n\ndef main():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Copy that to a file <code>main.py</code>.</p> <p>Test it:</p> <pre><code>$ python main.py\n\nHello World\n\n// It just prints \"Hello World\".\n\n// Now check the --help\n$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS]                            &lt;/b&gt;\n&lt;b&gt;                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               and exit.           \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>...but this program is still not very useful. Let's extend it.</p>"},{"location":"tutorial/first-steps/#what-is-a-cli-argument","title":"What is a CLI argument","text":"<p>Here we will use the word CLI argument to refer to CLI parameters passed in some specific order to the CLI application. By default, they are required.</p> <p>If you go to your terminal and type:</p> <pre><code>$ ls ./myproject\n\nfirst-steps.md  intro.md\n</code></pre> <p><code>ls</code> will show the contents of the directory <code>./myproject</code>.</p> <ul> <li><code>ls</code> is the program (or \"command\", \"CLI app\").</li> <li><code>./myproject</code> is a CLI argument, in this case it refers to the path of a directory.</li> </ul> <p>They are a bit different from CLI options that you will see later below.</p>"},{"location":"tutorial/first-steps/#add-a-cli-argument","title":"Add a CLI argument","text":"<p>Update the previous example with an argument <code>name</code>:</p> <pre><code>import cligenius\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <pre><code>$ python main.py\n\n// If you run it without the argument, it shows a nice error\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// Now pass that NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Here \"Camila\" is the CLI argument\n\n// To pass a name with spaces for the same CLI argument, use quotes\n$ python main.py \"Camila Guti\u00e9rrez\"\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>If you need to pass a single value that contains spaces to a CLI argument, use quotes (<code>\"</code>) around it.</p>"},{"location":"tutorial/first-steps/#two-cli-arguments","title":"Two CLI arguments","text":"<p>Now let's say we want to have the name and last name separated.</p> <p>So, extend that to have 2 arguments, <code>name</code> and <code>lastname</code>:</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <pre><code>// Check the main --help\n$ python main.py --help\n\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;cligenius&lt;/b&gt;&lt;/font&gt; on &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;\ue0a0 richify&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;&lt;b&gt;[\u00bb!?] &lt;/b&gt;&lt;/font&gt;via &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;\ud83d\udc0d v3.7.5 (env3.7)&lt;/b&gt;&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;\u276f&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;python&lt;/font&gt; &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME LASTNAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;NAME&amp;apos;.                          &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// There are now 2 CLI arguments, name and lastname\n\n// Now pass a single name argument\n$ python main.py Camila\n\n&lt;font color=\"#F4BF75\"&gt;Usage: &lt;/font&gt;main.py [OPTIONS] NAME LASTNAME\n&lt;font color=\"#A5A5A1\"&gt;Try &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;main.py &lt;/font&gt;&lt;font color=\"#44919F\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#44919F\"&gt;&amp;apos;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; for help.&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt; Missing argument &amp;apos;LASTNAME&amp;apos;.                      &lt;font color=\"#F92672\"&gt;\u2502&lt;/font&gt;\n&lt;font color=\"#F92672\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n// These 2 arguments are required, so, pass both:\n$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>Notice that the order is important. The last name has to go after the first name.</p> <p>If you called it with:</p> <pre><code>$ python main.py Guti\u00e9rrez Camila\n</code></pre> <p>your app wouldn't have a way to know which is the <code>name</code> and which the <code>lastname</code>. It expects the first CLI argument to be the <code>name</code> and the second CLI argument to be the <code>lastname</code>.</p>"},{"location":"tutorial/first-steps/#what-is-a-cli-option","title":"What is a CLI option","text":"<p>Here we will use the word CLI option to refer to CLI parameters passed to the CLI application with a specific name. For example, if you go to your terminal and type:</p> <pre><code>$ ls ./myproject --size\n\n12 first-steps.md   4 intro.md\n</code></pre> <p><code>ls</code> will show the contents of the directory <code>./myproject</code> with their <code>size</code>.</p> <ul> <li><code>ls</code> is the program (or \"command\", \"CLI app\").</li> <li><code>./myproject</code> is a CLI argument.</li> <li><code>--size</code> is an optional CLI option.</li> </ul> <p>The program knows it has to show the size because it sees <code>--size</code>, not because of the order.</p> <p>A CLI option like <code>--size</code> doesn't depend on the order like a CLI argument.</p> <p>So, if you put the <code>--size</code> before the CLI argument, it still works (in fact, that's the most common way of doing it):</p> <pre><code>$ ls --size ./myproject\n\n12 first-steps.md   4 intro.md\n</code></pre> <p>The main visual difference between a CLI option and a CLI argument is that the CLI option has <code>--</code> prepended to the name, like in \"<code>--size</code>\".</p> <p>A CLI option doesn't depend on the order because it has a predefined name (here it's <code>--size</code>). This is because the CLI app is looking specifically for a literal <code>--size</code> parameter (also known as \"flag\" or \"switch\"), with that specific \"name\" (here the specific name is \"<code>--size</code>\"). The CLI app will check if you typed it or not, it will be actively looking for <code>--size</code> even if you didn't type it (to check if it's there or not).</p> <p>In contrast, the CLI app is not actively looking for the CLI argument with a text \"<code>./myproject</code>\", it has no way to know if you would type <code>./myproject</code> or <code>./my-super-awesome-project</code> or anything else. It's just waiting to get whatever you give it. The only way to know that you refer to a specific CLI argument is because of the order. The same way that it knows that the first CLI argument was the <code>name</code> and the second was the <code>lastname</code>, but if you mixed the order, it wouldn't be able to handle it.</p> <p>Instead, with a CLI option, the order doesn't matter.</p> <p>Also, by default, a CLI option is optional (not required).</p> <p>So, by default:</p> <ul> <li>A CLI argument is required</li> <li>A CLI option is optional</li> </ul> <p>But the required and optional defaults can be changed.</p> <p>So, the main and most important difference is that:</p> <ul> <li>CLI options start with <code>--</code> and don't depend on the order</li> <li>CLI arguments depend on the sequence order</li> </ul> <p>Tip</p> <p>In this example above the CLI option <code>--size</code> is just a \"flag\" or \"switch\" that will contain a boolean value, <code>True</code> or <code>False</code>, depending on if it was added to the command or not.</p> <p>This one doesn't receive any values. But CLI options can also receive values like CLI arguments. You'll see how later.</p>"},{"location":"tutorial/first-steps/#add-one-cli-option","title":"Add one CLI option","text":"<p>Now add a <code>--formal</code> CLI option:</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str, formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Here <code>formal</code> is a <code>bool</code> that is <code>False</code> by default.</p> <pre><code>// Get the help\n$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME LASTNAME                            &lt;/b&gt;\n&lt;b&gt;                                                                   &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name          &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;             \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    lastname      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;             \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;      [default: no-formal]   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                   Show this message and  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                          exit.                  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>Notice that it automatically creates a <code>--formal</code> and a <code>--no-formal</code> because it detected that <code>formal</code> is a <code>bool</code>.</p> <p>Now call it normally:</p> <pre><code>$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n\n// But if you pass --formal\n$ python main.py Camila Guti\u00e9rrez --formal\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n// And as --formal is a CLI option you can put it anywhere in this command\n$ python main.py Camila --formal Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n$ python main.py --formal Camila Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n</code></pre>"},{"location":"tutorial/first-steps/#a-cli-option-with-a-value","title":"A CLI option with a value","text":"<p>To convert the <code>lastname</code> from a CLI argument to a CLI option, give it a default value of <code>\"\"</code>:</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>As <code>lastname</code> now has a default value of <code>\"\"</code> (an empty string) it is no longer required in the function, and Cligenius will now by default make it an optional CLI option.</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME                                       &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;                             &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  [default: no-formal] \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                 &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show this message    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              and exit.            \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>Notice the <code>--lastname</code>, and notice that it takes a textual value.</p> <p>A CLI option with a value like <code>--lastname</code> (contrary to a CLI option without a value, a <code>bool</code> flag, like <code>--formal</code> or <code>--size</code>) takes as its value whatever is at the right side of the CLI option.</p> <pre><code>// Call it without a --lastname\n$ python main.py Camila\n\nHello Camila\n\n// Pass the --lastname\n$ python main.py Camila --lastname Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre> <p>Tip</p> <p>Notice that \"<code>Guti\u00e9rrez</code>\" is at the right side of <code>--lastname</code>. A CLI option with a value takes as its value whatever is at the right side.</p> <p>And as <code>--lastname</code> is now a CLI option that doesn't depend on the order, you can pass it before the name:</p> <pre><code>$ python main.py --lastname Guti\u00e9rrez Camila\n\n// and it will still work normally\nHello Camila Guti\u00e9rrez\n</code></pre>"},{"location":"tutorial/first-steps/#document-your-cli-app","title":"Document your CLI app","text":"<p>If you add a docstring to your function it will be used in the help text:</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now see it with the <code>--help</code> option:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME                                       &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n Say hi to NAME, optionally with a &lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;.\n If &lt;font color=\"#6B9F98\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; is used, say hi very formally.                          &lt;/font&gt;\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;                             &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;                &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  [default: no-formal] \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                                 &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show this message    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                              and exit.            \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Tip</p> <p>There is another place to document the specific CLI options and CLI arguments that will show up next to them in the help text as with <code>--install-completion</code> or <code>--help</code>, you will learn that later in the tutorial.</p>"},{"location":"tutorial/first-steps/#arguments-options-parameters-optional-required","title":"Arguments, options, parameters, optional, required","text":"<p>Be aware that these terms refer to multiple things depending on the context, and sadly, those \"contexts\" mix frequently, so it's easy to get confused.</p>"},{"location":"tutorial/first-steps/#in-python","title":"In Python","text":"<p>In Python, the names of the variables in a function, like <code>name</code> and <code>lastname</code>:</p> <pre><code>def main(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>are called \"Python function parameters\" or \"Python function arguments\".</p> <p>Technical Details</p> <p>There's actually a very small distinction in Python between \"parameter\" and \"argument\".</p> <p>It's quite technical... and somewhat pedantic.</p> <p>Parameter refers to the variable name in a function declaration. Like:</p> <pre><code>def bring_person(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>Argument refers to the value passed when calling a function. Like:</p> <pre><code>person = bring_person(\"Camila\", lastname=\"Guti\u00e9rrez\")\n</code></pre> <p>...but you will probably see them used interchangeably in most of the places (including here).</p>"},{"location":"tutorial/first-steps/#python-default-values","title":"Python default values","text":"<p>In Python, in a function, a parameter with a default value like <code>lastname</code> in:</p> <pre><code>def main(name: str, lastname: str = \"\"):\n    pass\n</code></pre> <p>is considered an \"optional parameter\" (or \"optional argument\").</p> <p>The default value can be anything, like <code>\"\"</code> or <code>None</code>.</p> <p>And a parameter like <code>name</code>, that doesn't have a default value, is considered required.</p>"},{"location":"tutorial/first-steps/#in-clis","title":"In CLIs","text":"<p>When talking about command line interface applications, the words \"argument\" and \"parameter\" are commonly used to refer to that data passed to a CLI app, those parameters.</p> <p>But those words don't imply anything about the data being required, needing to be passed in a certain order, nor having a flag like <code>--lastname</code>.</p> <p>The parameters that come with a name like <code>--lastname</code> (and optionally a value) are commonly optional, not required. So, when talking about CLIs it's common to call them optional arguments or optional parameters. Sometimes these optional parameters that start with <code>--</code> are also called a flag or a switch.</p> <p>In reality, the parameters that require an order can be made optional too. And the ones that come with a flag (like <code>--lastname</code>) can be required too.</p>"},{"location":"tutorial/first-steps/#in-cligenius","title":"In Cligenius","text":"<p>To try and make it a bit easier, we'll normally use the words \"parameter\" or \"argument\" to refer to Python functions.</p> <p>We'll use CLI argument to refer to those CLI parameters that depend on the specific order. That are required by default.</p> <p>And we'll use CLI option to refer to those CLI parameters that depend on a name that starts with <code>--</code> (like <code>--lastname</code>). That are optional by default.</p> <p>We will use CLI parameter to refer to both, CLI arguments and CLI options.</p>"},{"location":"tutorial/first-steps/#the-cligenius-command","title":"The <code>cligenius</code> Command","text":"<p>When you install <code>cligenius</code>, by default it adds a <code>cligenius</code> command to your shell.</p> <p>This <code>cligenius</code> command allows you to run your scripts with \u2728 auto completion \u2728 in your terminal.</p> <p>As an alternative to running with Python:</p> <pre><code>$ python main.py\n\nHello World\n</code></pre> <p>You can run with the <code>cligenius</code> command:</p> <pre><code>$ cligenius main.py run\n\nHello World\n</code></pre> <p>...and it will give you auto completion in your terminal when you hit TAB for all your code.</p> <p>So you can use it to have auto completion for your own scripts as you continue with the tutorial.</p> <p>Tip</p> <p>Your CLI application built with Cligenius won't need the <code>cligenius</code> command to have auto completion once you create a Python package.</p> <p>But for short scripts and for learning, before creating a Python package, it might be useful.</p>"},{"location":"tutorial/launch/","title":"Launching Applications","text":"<p>You can launch applications from your CLI program with <code>cligenius.launch()</code>.</p> <p>It will launch the appropriate application depending on the URL or file type you pass it:</p> <pre><code>import cligenius\n\n\ndef main():\n    print(\"Opening Cligenius's docs\")\n    cligenius.launch(\"https://cligenius.khulnasoft.com\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\nOpening Cligenius docs\n\n// Opens browser with Cligenius's docs\n</code></pre>"},{"location":"tutorial/launch/#locating-a-file","title":"Locating a file","text":"<p>You can also make the operating system open the file browser indicating where a file is located with <code>locate=True</code>:</p> <pre><code>from pathlib import Path\n\nimport cligenius\n\nAPP_NAME = \"my-super-cli-app\"\n\n\ndef main():\n    app_dir = cligenius.get_app_dir(APP_NAME)\n    app_dir_path = Path(app_dir)\n    app_dir_path.mkdir(parents=True, exist_ok=True)\n    config_path: Path = Path(app_dir) / \"config.json\"\n    if not config_path.is_file():\n        config_path.write_text('{\"version\": \"1.0.0\"}')\n    config_file_str = str(config_path)\n    print(\"Opening config directory\")\n    cligenius.launch(config_file_str, locate=True)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>The rest of the code in this example is just making sure the app directory exists and creating the config file.</p> <p>But the most important part is the <code>cligenius.launch(config_file_str, locate=True)</code> with the argument <code>locate=True</code>.</p> <p>Check it:</p> <pre><code>$ python main.py\n\nOpening config directory\n\n// Opens a file browser indicating where the config file is located\n</code></pre>"},{"location":"tutorial/options-autocompletion/","title":"CLI Option autocompletion","text":"<p>As you have seen, apps built with Cligenius have completion in your shell that works when you create a Python package or using the <code>cligenius</code> command.</p> <p>It normally completes CLI options, CLI arguments, and subcommands (that you will learn about later).</p> <p>But you can also provide auto completion for the values of CLI options and CLI arguments. We will learn about that here.</p>"},{"location":"tutorial/options-autocompletion/#review-completion","title":"Review completion","text":"<p>Before checking how to provide custom completions, let's check again how it works.</p> <p>After installing completion for your own Python package (or using the <code>cligenius</code> command), when you use your CLI program and start adding a CLI option with <code>--</code> an then hit TAB, your shell will show you the available CLI options (the same for CLI arguments, etc).</p> <p>To check it quickly without creating a new Python package, use the <code>cligenius</code> command.</p> <p>Then let's create small example program:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[str, cligenius.Option(help=\"The name to say hi to.\")] = \"World\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str = cligenius.Option(\"World\", help=\"The name to say hi to.\")):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And let's try it with the <code>cligenius</code> command to get completion:</p> <pre><code>// Hit the TAB key in your keyboard below where you see the: [TAB]\n$ cligenius ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this \u2728\nrun    -- Run the provided Cligenius app.\nutils  -- Extra utility commands for Cligenius apps.\n\n// Then try with \"run\" and --\n$ cligenius ./main.py run --[TAB][TAB]\n\n// You will get completion for --name, depending on your terminal it will look something like this\n--name  -- The name to say hi to.\n\n// And you can run it as if it was with Python directly\n$ cligenius ./main.py run --name Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/options-autocompletion/#custom-completion-for-values","title":"Custom completion for values","text":"<p>Right now we get completion for the CLI option names, but not for the values.</p> <p>We can provide completion for the values creating an <code>autocompletion</code> function, similar to the <code>callback</code> functions from CLI Option Callback and Context:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        str,\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: str = cligenius.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>We return a <code>list</code> of strings from the <code>complete_name()</code> function.</p> <p>And then we get those values when using completion:</p> <pre><code>$ cligenius ./main.py run --name [TAB][TAB]\n\n// We get the values returned from the function \ud83c\udf89\nCamila     Carlos     Sebastian\n</code></pre> <p>We got the basics working. Now let's improve it.</p>"},{"location":"tutorial/options-autocompletion/#check-the-incomplete-value","title":"Check the incomplete value","text":"<p>Right now, we always return those values, even if users start typing <code>Sebast</code> and then hit TAB, they will also get the completion for <code>Camila</code> and <code>Carlos</code> (depending on the shell), while we should only get completion for <code>Sebastian</code>.</p> <p>But we can fix that so that it always works correctly.</p> <p>Modify the <code>complete_name()</code> function to receive a parameter of type <code>str</code>, it will contain the incomplete value.</p> <p>Then we can check and return only the values that start with the incomplete value from the command line:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\nvalid_names = [\"Camila\", \"Carlos\", \"Sebastian\"]\n\n\ndef complete_name(incomplete: str):\n    completion = []\n    for name in valid_names:\n        if name.startswith(incomplete):\n            completion.append(name)\n    return completion\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        str,\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\nvalid_names = [\"Camila\", \"Carlos\", \"Sebastian\"]\n\n\ndef complete_name(incomplete: str):\n    completion = []\n    for name in valid_names:\n        if name.startswith(incomplete):\n            completion.append(name)\n    return completion\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: str = cligenius.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now let's try it:</p> <pre><code>$ cligenius ./main.py run --name Ca[TAB][TAB]\n\n// We get the values returned from the function that start with Ca \ud83c\udf89\nCamila     Carlos\n</code></pre> <p>Now we are only returning the valid values, that start with <code>Ca</code>, we are no longer returning <code>Sebastian</code> as a completion option.</p> <p>Tip</p> <p>You have to declare the incomplete value of type <code>str</code> and that's what you will receive in the function.</p> <p>No matter if the actual value will be an <code>int</code>, or something else, when doing completion, you will only get a <code>str</code> as the incomplete value.</p> <p>And the same way, you can only return <code>str</code>, not <code>int</code>, etc.</p>"},{"location":"tutorial/options-autocompletion/#add-help-to-completions","title":"Add help to completions","text":"<p>Right now we are returning a <code>list</code> of <code>str</code>.</p> <p>But some shells (Zsh, Fish, PowerShell) are capable of showing extra help text for completion.</p> <p>We can provide that extra help text so that those shells can show it.</p> <p>In the <code>complete_name()</code> function, instead of providing one <code>str</code> per completion element, we provide a <code>tuple</code> with 2 items. The first item is the actual completion string, and the second item is the help text.</p> <p>So, in the end, we return a <code>list</code> of <code>tuples</code> of <code>str</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(incomplete: str):\n    completion = []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            completion_item = (name, help_text)\n            completion.append(completion_item)\n    return completion\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        str,\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(incomplete: str):\n    completion = []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            completion_item = (name, help_text)\n            completion.append(completion_item)\n    return completion\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: str = cligenius.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>If you want to have help text for each item, make sure each item in the list is a <code>tuple</code>. Not a <code>list</code>.</p> <p>Click checks specifically for a <code>tuple</code> when extracting the help text.</p> <p>So in the end, the return will be a <code>list</code> (or other iterable) of <code>tuples</code> of 2 <code>str</code>.</p> <p>Info</p> <p>The help text will be visible in Zsh, Fish, and PowerShell.</p> <p>Bash doesn't support showing the help text, but completion will still work the same.</p> <p>If you have a shell like Zsh, it would look like:</p> <pre><code>$ cligenius ./main.py run --name [TAB][TAB]\n\n// We get the completion items with their help text \ud83c\udf89\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n</code></pre>"},{"location":"tutorial/options-autocompletion/#simplify-with-yield","title":"Simplify with <code>yield</code>","text":"<p>Instead of creating and returning a list with values (<code>str</code> or <code>tuple</code>), we can use <code>yield</code> with each value that we want in the completion.</p> <p>That way our function will be a generator that Cligenius (actually Click) can iterate:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(incomplete: str):\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        str,\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(incomplete: str):\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: str = cligenius.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>That simplifies our code a bit and works the same.</p> <p>Tip</p> <p>If all the <code>yield</code> part seems complex for you, don't worry, you can just use the version with the <code>list</code> above.</p> <p>In the end, that's just to save us a couple of lines of code.</p> <p>Info</p> <p>The function can use <code>yield</code>, so it doesn't have to return strictly a <code>list</code>, it just has to be iterable.</p> <p>But each of the elements for completion has to be a <code>str</code> or a <code>tuple</code> (when containing a help text).</p>"},{"location":"tutorial/options-autocompletion/#access-other-cli-parameters-with-the-context","title":"Access other CLI parameters with the Context","text":"<p>Let's say that now we want to modify the program to be able to \"say hi\" to multiple people at the same time.</p> <p>So, we will allow multiple <code>--name</code> CLI options.</p> <p>Tip</p> <p>You will learn more about CLI parameters with multiple values later in the tutorial.</p> <p>So, for now, take this as a sneak peek \ud83d\ude09.</p> <p>For this we use a <code>List</code> of <code>str</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List\n\nimport cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[List[str], cligenius.Option(help=\"The name to say hi to.\")] = [\n        \"World\"\n    ],\n):\n    for each_name in name:\n        print(f\"Hello {each_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nimport cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: List[str] = cligenius.Option([\"World\"], help=\"The name to say hi to.\")):\n    for each_name in name:\n        print(f\"Hello {each_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And then we can use it like:</p> <pre><code>$ cligenius ./main.py run --name Camila --name Sebastian\n\nHello Camila\nHello Sebastian\n</code></pre>"},{"location":"tutorial/options-autocompletion/#getting-completion-for-multiple-values","title":"Getting completion for multiple values","text":"<p>And the same way as before, we want to provide completion for those names. But we don't want to provide the same names for completion if they were already given in previous parameters.</p> <p>For that, we will access and use the \"Context\". When you create a Cligenius application it uses Click underneath. And every Click application has a special object called a \"Context\" that is normally hidden.</p> <p>But you can access the context by declaring a function parameter of type <code>cligenius.Context</code>.</p> <p>And from that context you can get the current values for each parameter.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List\n\nimport cligenius\nfrom typing_extensions import Annotated\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(ctx: cligenius.Context, incomplete: str):\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        List[str],\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nimport cligenius\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\n\ndef complete_name(ctx: cligenius.Context, incomplete: str):\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: List[str] = cligenius.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>We are getting the <code>names</code> already provided with <code>--name</code> in the command line before this completion was triggered.</p> <p>If there's no <code>--name</code> in the command line, it will be <code>None</code>, so we use <code>or []</code> to make sure we have a <code>list</code> (even if empty) to check its contents later.</p> <p>Then, when we have a completion candidate, we check if each <code>name</code> was already provided with <code>--name</code> by checking if it's in that list of <code>names</code> with <code>name not in names</code>.</p> <p>And then we <code>yield</code> each item that has not been used yet.</p> <p>Check it:</p> <pre><code>$ cligenius ./main.py run --name [TAB][TAB]\n\n// The first time we trigger completion, we get all the names\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n\n// Add a name and trigger completion again\n$ cligenius ./main.py run --name Sebastian --name Ca[TAB][TAB]\n\n// Now we get completion only for the names we haven't used \ud83c\udf89\nCamila  -- The reader of books.\nCarlos  -- The writer of scripts.\n\n// And if we add another of the available names:\n$ cligenius ./main.py run --name Sebastian --name Camila --name [TAB][TAB]\n\n// We get completion for the only available one\nCarlos  -- The writer of scripts.\n</code></pre> <p>Tip</p> <p>It's quite possible that if there's only one option left, your shell will complete it right away instead of showing the option with the help text, to save you more typing.</p>"},{"location":"tutorial/options-autocompletion/#getting-the-raw-cli-parameters","title":"Getting the raw CLI parameters","text":"<p>You can also get the raw CLI parameters, just a <code>list</code> of <code>str</code> with everything passed in the command line before the incomplete value.</p> <p>For example, something like <code>[\"cligenius\", \"main.py\", \"run\", \"--name\"]</code>.</p> <p>Tip</p> <p>This would be for advanced scenarios, in most use cases you would be better off using the context.</p> <p>But it's still possible if you need it.</p> <p>As a simple example, let's show it on the screen before completion.</p> <p>Because completion is based on the output printed by your program (handled internally by Cligenius), during completion we can't just print something else as we normally do.</p>"},{"location":"tutorial/options-autocompletion/#printing-to-standard-error","title":"Printing to \"standard error\"","text":"<p>Tip</p> <p>If you need a refresher about what is \"standard output\" and \"standard error\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\".</p> <p>The completion system only reads from \"standard output\", so, printing to \"standard error\" won't break completion. \ud83d\ude80</p> <p>You can print to \"standard error\" with a Rich <code>Console(stderr=True)</code>.</p> <p>Using <code>stderr=True</code> tells Rich that the output should be shown in \"standard error\".</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List\n\nimport cligenius\nfrom rich.console import Console\nfrom typing_extensions import Annotated\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\nerr_console = Console(stderr=True)\n\n\ndef complete_name(args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        List[str],\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nimport cligenius\nfrom rich.console import Console\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\nerr_console = Console(stderr=True)\n\n\ndef complete_name(args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: List[str] = cligenius.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Info</p> <p>If you can't install and use Rich, you can also use <code>print(lastname, file=sys.stderr)</code> or <code>cligenius.echo(\"some text\", err=True)</code> instead.</p> <p>We get all the CLI parameters as a raw <code>list</code> of <code>str</code> by declaring a parameter with type <code>List[str]</code>, here it's named <code>args</code>.</p> <p>Tip</p> <p>Here we name the list of all the raw CLI parameters <code>args</code> because that's the convention with Click.</p> <p>But it doesn't contain only CLI arguments, it has everything, including CLI options and values, as a raw <code>list</code> of <code>str</code>.</p> <p>And then we just print it to \"standard error\".</p> <pre><code>$ cligenius ./main.py run --name [TAB][TAB]\n\n// First we see the raw CLI parameters\n['./main.py', 'run', '--name']\n\n// And then we see the actual completion\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n</code></pre> <p>Tip</p> <p>This is a very simple (and quite useless) example, just so you know how it works and that you can use it.</p> <p>But it's probably useful only in very advanced use cases.</p>"},{"location":"tutorial/options-autocompletion/#getting-the-context-and-the-raw-cli-parameters","title":"Getting the Context and the raw CLI parameters","text":"<p>Of course, you can declare everything if you need it, the context, the raw CLI parameters, and the incomplete <code>str</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List\n\nimport cligenius\nfrom rich.console import Console\nfrom typing_extensions import Annotated\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\nerr_console = Console(stderr=True)\n\n\ndef complete_name(ctx: cligenius.Context, args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        List[str],\n        cligenius.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nimport cligenius\nfrom rich.console import Console\n\nvalid_completion_items = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\"),\n]\n\nerr_console = Console(stderr=True)\n\n\ndef complete_name(ctx: cligenius.Context, args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(\n    name: List[str] = cligenius.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>$ cligenius ./main.py run --name [TAB][TAB]\n\n// First we see the raw CLI parameters\n['./main.py', 'run', '--name']\n\n// And then we see the actual completion\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n\n$ cligenius ./main.py run --name Sebastian --name Ca[TAB][TAB]\n\n// Again, we see the raw CLI parameters\n['./main.py', 'run', '--name', 'Sebastian', '--name']\n\n// And then we see the rest of the valid completion items\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\n</code></pre>"},{"location":"tutorial/options-autocompletion/#types-types-everywhere","title":"Types, types everywhere","text":"<p>Cligenius uses the type declarations to detect what it has to provide to your <code>autocompletion</code> function.</p> <p>You can declare function parameters of these types:</p> <ul> <li><code>str</code>: for the incomplete value.</li> <li><code>cligenius.Context</code>: for the current context.</li> <li><code>List[str]</code>: for the raw CLI parameters.</li> </ul> <p>It doesn't matter how you name them, in which order, or which ones of the 3 options you declare. It will all \"just work\" \u2728</p>"},{"location":"tutorial/package/","title":"Building a Package","text":"<p>When you create a CLI program with Cligenius you probably want to create your own Python package.</p> <p>That's what allows your users to install it and have it as an independent program that they can use in their terminal.</p> <p>And that's also required for shell auto completion to work (unless you use your program through <code>cligenius</code> command).</p> <p>Nowadays, there are several ways and tools to create Python packages (what you install with <code>pip install something</code>).</p> <p>You might even have your favorite already.</p> <p>Here's a very opinionated, short guide, showing one of the alternative ways of creating a Python package with a Cligenius app, from scratch.</p> <p>Tip</p> <p>If you already have a favorite way of creating Python packages, feel free to skip this.</p>"},{"location":"tutorial/package/#prerequisites","title":"Prerequisites","text":"<p>For this guide we'll use Poetry.</p> <p>Poetry's docs are great, so go ahead, check them and install it.</p>"},{"location":"tutorial/package/#create-a-project","title":"Create a project","text":"<p>Let's say we want to create a CLI application called <code>portal-gun</code>.</p> <p>To make sure your package doesn't collide with the package created by someone else, we'll name it with a prefix of your name.</p> <p>So, if your name is Rick, we'll call it <code>rick-portal-gun</code>.</p> <p>Create a project with Poetry:</p> <pre><code>$ poetry new rick-portal-gun\n\nCreated package rick_portal_gun in rick-portal-gun\n\n// Enter the new project directory\ncd ./rick-portal-gun\n</code></pre>"},{"location":"tutorial/package/#dependencies-and-environment","title":"Dependencies and environment","text":"<p>Add <code>cligenius[all]</code> to your dependencies:</p> <pre><code>$ poetry add \"cligenius[all]\"\n\n// It creates a virtual environment for your project\nCreating virtualenv rick-portal-gun-w31dJa0b-py3.10 in /home/rick/.cache/pypoetry/virtualenvs\nUsing version ^0.1.0 for cligenius\n\nUpdating dependencies\nResolving dependencies... (1.2s)\n\nWriting lock file\n\n---&gt; 100%\n\nPackage operations: 15 installs, 0 updates, 0 removals\n\n  - Installing zipp (3.1.0)\n  - Installing importlib-metadata (1.5.0)\n  - Installing pyparsing (2.4.6)\n  - Installing six (1.14.0)\n  - Installing attrs (19.3.0)\n  - Installing click (7.1.1)\n  - Installing colorama (0.4.3)\n  - Installing more-itertools (8.2.0)\n  - Installing packaging (20.3)\n  - Installing pluggy (0.13.1)\n  - Installing py (1.8.1)\n  - Installing shellingham (1.3.2)\n  - Installing wcwidth (0.1.8)\n  - Installing pytest (5.4.1)\n  - Installing cligenius (0.0.11)\n\n// Activate that new virtual environment\n$ poetry shell\n\nSpawning shell within /home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.10\n\n// Open an editor using this new environment, for example VS Code\n$ code ./\n</code></pre> <p>You can see that you have a generated project structure that looks like:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 rick_portal_gun\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre>"},{"location":"tutorial/package/#create-your-app","title":"Create your app","text":"<p>Now let's create an extremely simple Cligenius app.</p> <p>Create a file <code>rick_portal_gun/main.py</code> with:</p> <pre><code>import cligenius\n\n\napp = cligenius.Cligenius()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    cligenius.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    cligenius.echo(\"Loading portal gun\")\n</code></pre> <p>Tip</p> <p>As we are creating an installable Python package, there's no need to add a section with <code>if __name__ == \"__main__\":</code>.</p>"},{"location":"tutorial/package/#modify-the-readme","title":"Modify the README","text":"<p>Let's change the README to have something like:</p> <pre><code># Portal Gun\n\nThe awesome Portal Gun\n</code></pre>"},{"location":"tutorial/package/#add-a-script","title":"Add a \"script\"","text":"<p>We are creating a Python package that can be installed with <code>pip install</code>.</p> <p>But we want it to provide a CLI program that can be executed in the shell.</p> <p>To do that, we add a configuration to the <code>pyproject.toml</code> in the section <code>[tool.poetry.scripts]</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ncligenius = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>Here's what that line means:</p> <p><code>rick-portal-gun</code>: will be the name of the CLI program. That's how we will call it in the terminal once it is installed. Like:</p> <pre><code>$ rick-portal-gun\n\n// Something happens here \u2728\n</code></pre> <p><code>rick_portal_gun.main</code>, in the part <code>\"rick_portal_gun.main:app\"</code>, with underscores, refers to the Python module to import. That's what someone would use in a section like:</p> <pre><code>from rick_portal_gun.main import # something goes here\n</code></pre> <p>The <code>app</code> in <code>\"rick_portal_gun.main:app\"</code> is the thing to import from the module, and to call as a function, like:</p> <pre><code>from rick_portal_gun.main import app\napp()\n</code></pre> <p>That config section tells Poetry that when this package is installed we want it to create a command line program called <code>rick-portal-gun</code>.</p> <p>And that the object to call (like a function) is the one in the variable <code>app</code> inside of the module <code>rick_portal_gun.main</code>.</p>"},{"location":"tutorial/package/#install-your-package","title":"Install your package","text":"<p>That's what we need to create a package.</p> <p>You can now install it:</p> <pre><code>$ poetry install\n\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\n  - Installing rick-portal-gun (0.1.0)\n</code></pre>"},{"location":"tutorial/package/#try-your-cli-program","title":"Try your CLI program","text":"<p>Your package is installed in the environment created by Poetry, but you can already use it.</p> <pre><code>// You can use the which program to check which rick-portal-gun program is available (if any)\n$ which rick-portal-gun\n\n// You get the one from your environment\n/home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.10/bin/rick-portal-gun\n\n// Try it\n$ rick-portal-gun\n\n// You get all the standard help\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre>"},{"location":"tutorial/package/#create-a-wheel-package","title":"Create a wheel package","text":"<p>Python packages have a standard format called a \"wheel\". It's a file that ends in <code>.whl</code>.</p> <p>You can create a wheel with Poetry:</p> <pre><code>$ poetry build\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n</code></pre> <p>After that, if you check in your project directory, you should now have a couple of extra files at <code>./dist/</code>:</p> <pre><code>.\n\u251c\u2500\u2500 dist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rick_portal_gun-0.1.0-py3-none-any.whl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rick-portal-gun-0.1.0.tar.gz\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ...\n</code></pre> <p>The <code>.whl</code> is the wheel file. You can send that wheel file to anyone and they can use it to install your program (we'll see how to upload it to PyPI in a bit).</p>"},{"location":"tutorial/package/#test-your-wheel-package","title":"Test your wheel package","text":"<p>Now you can open another terminal and install that package from the file for your own user with:</p> <pre><code>$ pip install --user /home/rock/code/rick-portal-gun/dist/rick_portal_gun-0.1.0-py3-none-any.whl\n\n---&gt; 100%\n</code></pre> <p>Warning</p> <p>The <code>--user</code> is important, that ensures you install it in your user's directory and not in the global system.</p> <p>If you installed it in the global system (e.g. with <code>sudo</code>) you could install a version of a library (e.g. a sub-dependency) that is incompatible with your system.</p> <p>Tip</p> <p>Bonus points if you use <code>pipx</code> to install it while keeping an isolated environment for your Python CLI programs \ud83d\ude80</p> <p>Now you have your CLI program installed. And you can use it freely:</p> <pre><code>$ rick-portal-gun shoot\n\n// It works \ud83c\udf89\nShooting portal gun\n</code></pre> <p>Having it installed globally (and not in a single environment), you can now install completion globally for it:</p> <pre><code>$ rick-portal-gun --install-completion\n\nzsh completion installed in /home/user/.zshrc.\nCompletion will take effect once you restart the terminal.\n</code></pre> <p>Tip</p> <p>If you want to remove completion you can just delete the added line in that file.</p> <p>And after you restart the terminal you will get completion for your new CLI program:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n\n// You get completion for your CLI program \u2728\nload   -- Load the portal gun\nshoot  -- Shoot the portal gun\n</code></pre>"},{"location":"tutorial/package/#support-python-m-optional","title":"Support <code>python -m</code> (optional)","text":"<p>You may have seen that you can call many Python modules as scripts with <code>python -m some-module</code>.</p> <p>For example, one way to call <code>pip</code> is:</p> <pre><code>$ pip install readyapi\n</code></pre> <p>But you can also call Python with the <code>-m</code> CLI Option and pass a module for it to execute as if it was a script, like:</p> <pre><code>$ python -m pip install readyapi\n</code></pre> <p>Here we pass <code>pip</code> as the value for <code>-m</code>, so, Python will execute the module <code>pip</code> as if it was a script. And then it will pass the rest of the CLI Parameters (<code>install readyapi</code>) to it.</p> <p>These two are more or less equivalent, the <code>install readyapi</code> will be passed to <code>pip</code>.</p> <p>Tip</p> <p>In the case of <code>pip</code>, in many occasions it's actually recommended that you run it with <code>python -m</code>, because if you create a virtual environment with its own <code>python</code>, that will ensure that you use the <code>pip</code> from that environment.</p>"},{"location":"tutorial/package/#add-a-__main__py","title":"Add a <code>__main__.py</code>","text":"<p>You can support that same style of calling the package/module for your own package, simply by adding a file <code>__main__.py</code>.</p> <p>Python will look for that file and execute it.</p> <p>The file would live right beside <code>__init__.py</code>:</p> <pre><code>.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 rick_portal_gun\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_rick_portal_gun.py\n</code></pre> <p>No other file has to import it, you don't have to reference it in your <code>pyproject.toml</code> or anything else, it just works by default, as it is standard Python behavior.</p> <p>Then in that file you can execute your Cligenius program:</p> <pre><code>from .main import app\napp()\n</code></pre> <p>Now, after installing your package, if you call it with <code>python -m</code> it will work (for the main part):</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: __main__.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Tip</p> <p>Notice that you have to pass the importable version of the package name, so <code>rick_portal_gun</code> instead of <code>rick-portal-gun</code>.</p> <p>That works! \ud83d\ude80 Sort of... \ud83e\udd14</p> <p>See the <code>__main__.py</code> in the help instead of <code>rick-portal-gun</code>? We'll fix that next.</p>"},{"location":"tutorial/package/#set-a-program-name-in-__main__py","title":"Set a program name in <code>__main__.py</code>","text":"<p>We are setting the program name in the file <code>pyproject.toml</code> in the line like:</p> <pre><code>[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n</code></pre> <p>But when Python runs our package as a script with <code>python -m</code>, it doesn't have the information of the program name.</p> <p>So, to fix the help text to use the correct program name when called with <code>python -m</code>, we can pass it to the app in <code>__main__.py</code>:</p> <pre><code>from .main import app\napp(prog_name=\"rick-portal-gun\")\n</code></pre> <p>Tip</p> <p>You can pass all the arguments and keyword arguments you could pass to a Click application, including <code>prog_name</code>.</p> <pre><code>$ python -m rick_portal_gun\n\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n</code></pre> <p>Great! That works correctly! \ud83c\udf89 \u2705</p> <p>Notice that now it uses <code>rick-portal-gun</code> instead of <code>__main__.py</code> in the help.</p>"},{"location":"tutorial/package/#autocompletion-and-python-m","title":"Autocompletion and <code>python -m</code>","text":"<p>Have in mind that TAB completion (shell auto-completion) won't work when using <code>python -m</code>.</p> <p>Auto-completion depends on the name of the program called, it's tied to each specific program name.</p> <p>So, to have shell completion for <code>rick-portal-gun</code> you would have to call it directly:</p> <pre><code>$ rick-portal-gun [TAB][TAB]\n</code></pre> <p>But you can still support <code>python -m</code> for the cases where it's useful.</p>"},{"location":"tutorial/package/#publish-to-pypi-optional","title":"Publish to PyPI (optional)","text":"<p>You can publish that new package to PyPI to make it public, so others can install it easily.</p> <p>So, go ahead and create an account there (it's free).</p>"},{"location":"tutorial/package/#pypi-api-token","title":"PyPI API token","text":"<p>To do it, you first need to configure a PyPI auth token.</p> <p>Login to PyPI.</p> <p>And then go to https://pypi.org/manage/account/token/ to create a new token.</p> <p>Let's say your new API token is:</p> <pre><code>pypi-wubalubadubdub-deadbeef1234\n</code></pre> <p>Now configure Poetry to use this token with the command <code>poetry config pypi-token.pypi</code>:</p> <pre><code>$ poetry config pypi-token.pypi pypi-wubalubadubdub-deadbeef1234\n// It won't show any output, but it's already configured\n</code></pre>"},{"location":"tutorial/package/#publish-to-pypi","title":"Publish to PyPI","text":"<p>Now you can publish your package with Poetry.</p> <p>You could build the package (as we did above) and then publish later, or you could tell poetry to build it before publishing in one go:</p> <pre><code>$ poetry publish --build\n\n# There are 2 files ready for publishing. Build anyway? (yes/no) [no] $ yes\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.1.0) to PyPI\n - Uploading rick-portal-gun-0.1.0.tar.gz 100%\n - Uploading rick_portal_gun-0.1.0-py3-none-any.whl 100%\n</code></pre> <p>Now you can go to PyPI and check your projects at https://pypi.org/manage/projects/.</p> <p>You should now see your new \"rick-portal-gun\" package.</p>"},{"location":"tutorial/package/#install-from-pypi","title":"Install from PyPI","text":"<p>Now to see that we can install it form PyPI, open another terminal, and uninstall the currently installed package.</p> <pre><code>$ pip uninstall rick-portal-gun\n\nFound existing installation: rick-portal-gun 0.1.0\nUninstalling rick-portal-gun-0.1.0:\n  Would remove:\n    /home/user/.local/bin/rick-portal-gun\n    /home/user/.local/lib/python3.10/site-packages/rick_portal_gun-0.1.0.dist-info/*\n    /home/user/.local/lib/python3.10/site-packages/rick_portal_gun/*\n# Proceed (y/n)? $ y\n    Successfully uninstalled rick-portal-gun-0.1.0\n</code></pre> <p>And now install it again, but this time using just the name, so that <code>pip</code> pulls it from PyPI:</p> <pre><code>$ pip install --user rick-portal-gun\n\n// Notice that it says \"Downloading\" \ud83d\ude80\nCollecting rick-portal-gun\n  Downloading rick_portal_gun-0.1.0-py3-none-any.whl (1.8 kB)\nRequirement already satisfied: cligenius[all]&lt;0.0.12,&gt;=0.0.11 in ./.local/lib/python3.10/site-packages (from rick-portal-gun) (0.0.11)\nRequirement already satisfied: click&lt;7.2.0,&gt;=7.1.1 in ./anaconda3/lib/python3.10/site-packages (from cligenius[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (7.1.1)\nRequirement already satisfied: colorama; extra == \"all\" in ./anaconda3/lib/python3.10/site-packages (from cligenius[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (0.4.3)\nRequirement already satisfied: shellingham; extra == \"all\" in ./anaconda3/lib/python3.10/site-packages (from cligenius[all]&lt;0.0.12,&gt;=0.0.11-&gt;rick-portal-gun) (1.3.1)\nInstalling collected packages: rick-portal-gun\nSuccessfully installed rick-portal-gun-0.1.0\n</code></pre> <p>And now test the newly installed package from PyPI:</p> <pre><code>$ rick-portal-gun load\n\n// It works! \ud83c\udf89\nLoading portal gun\n</code></pre>"},{"location":"tutorial/package/#generate-docs","title":"Generate docs","text":"<p>You can use the <code>cligenius</code> command to generate docs for your package that you can put in your <code>README.md</code>:</p> <pre><code>$ cligenius rick_portal_gun.main utils docs --output README.md --name rick-portal-gun\n\nDocs saved to: README.md\n</code></pre> <p>You just have to pass it the module to import (<code>rick_portal_gun.main</code>) and it will detect the <code>cligenius.Cligenius</code> app automatically.</p> <p>By specifying the <code>--name</code> of the program it will be able to use it while generating the docs.</p> <p>Tip</p> <p>If you installed <code>cligenius-slim</code> and don't have the <code>cligenius</code> command, you can use <code>python -m cligenius</code> instead.</p>"},{"location":"tutorial/package/#publish-a-new-version-with-the-docs","title":"Publish a new version with the docs","text":"<p>Now you can publish a new version with the updated docs.</p> <p>For that you need to first increase the version in <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez &lt;rick@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ncligenius = {extras = [\"all\"], version = \"^0.1.0\"}\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> <p>And in the file <code>rick_portal_gun/__init__.py</code>:</p> <pre><code>__version__ = '0.2.0'\n</code></pre> <p>And then build and publish again:</p> <pre><code>$ poetry publish --build\n\n---&gt; 100%\n\nBuilding rick-portal-gun (0.2.0)\n - Building sdist\n - Built rick-portal-gun-0.2.0.tar.gz\n\n - Building wheel\n - Built rick_portal_gun-0.2.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.2.0) to PyPI\n - Uploading rick-portal-gun-0.2.0.tar.gz 100%\n - Uploading rick_portal_gun-0.2.0-py3-none-any.whl 100%\n</code></pre> <p>And now you can go to PyPI, to the project page, and reload it, and it will now have your new generated docs.</p>"},{"location":"tutorial/package/#whats-next","title":"What's next","text":"<p>This is a very simple guide. You could add many more steps.</p> <p>For example, you should use Git, the version control system, to save your code.</p> <p>You can add a lot of extra metadata to your <code>pyproject.toml</code>, check the docs for Poetry: Libraries.</p> <p>You could use <code>pipx</code> to manage your installed CLI Python programs in isolated environments.</p> <p>Maybe use automatic formatting with Black.</p> <p>You'll probably want to publish your code as open source to GitHub.</p> <p>And then you could integrate a CI tool to run your tests and deploy your package automatically.</p> <p>And there's a long etc. But now you have the basics and you can continue on your own \ud83d\ude80.</p>"},{"location":"tutorial/printing/","title":"Printing and Colors","text":"<p>You can use the normal <code>print()</code> to show information on the screen:</p> <pre><code>import cligenius\n\n\ndef main():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>It will show the output normally:</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"tutorial/printing/#use-rich","title":"Use Rich","text":"<p>You can also display beautiful and more complex information using Rich. It comes by default when you install <code>cligenius</code>.</p>"},{"location":"tutorial/printing/#use-rich-print","title":"Use Rich <code>print</code>","text":"<p>For the simplest cases, you can just import <code>print</code> from <code>rich</code> and use it instead of the standard <code>print</code>:</p> <pre><code>import cligenius\nfrom rich import print\n\ndata = {\n    \"name\": \"Rick\",\n    \"age\": 42,\n    \"items\": [{\"name\": \"Portal Gun\"}, {\"name\": \"Plumbus\"}],\n    \"active\": True,\n    \"affiliation\": None,\n}\n\n\ndef main():\n    print(\"Here's the data\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Just with that, Rich will be able to print your data with nice colors and structure:</p> <pre><code>$ python main.py\n\nHere's the data\n&lt;b&gt;{&lt;/b&gt;\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Rick&amp;apos;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;age&amp;apos;&lt;/font&gt;: &lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;42&lt;/b&gt;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;items&amp;apos;&lt;/font&gt;: &lt;b&gt;[&lt;/b&gt;\n        &lt;b&gt;{&lt;/b&gt;&lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Portal Gun&amp;apos;&lt;/font&gt;&lt;b&gt;}&lt;/b&gt;,\n        &lt;b&gt;{&lt;/b&gt;&lt;font color=\"#A6E22E\"&gt;&amp;apos;name&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&amp;apos;Plumbus&amp;apos;&lt;/font&gt;&lt;b&gt;}&lt;/b&gt;\n    &lt;b&gt;]&lt;/b&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;active&amp;apos;&lt;/font&gt;: &lt;font color=\"#A6E22E\"&gt;&lt;i&gt;True&lt;/i&gt;&lt;/font&gt;,\n    &lt;font color=\"#A6E22E\"&gt;&amp;apos;affiliation&amp;apos;&lt;/font&gt;: &lt;font color=\"#AE81FF\"&gt;&lt;i&gt;None&lt;/i&gt;&lt;/font&gt;\n&lt;b&gt;}&lt;/b&gt;\n</code></pre>"},{"location":"tutorial/printing/#rich-markup","title":"Rich Markup","text":"<p>Rich also supports a custom markup syntax to set colors and styles, for example:</p> <pre><code>import cligenius\nfrom rich import print\n\n\ndef main():\n    print(\"[bold red]Alert![/bold red] [green]Portal gun[/green] shooting! :boom:\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <pre><code>$ python main.py\n\n&lt;font color=\"#F92672\"&gt;&lt;b&gt;Alert!&lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;Portal gun&lt;/font&gt; shooting! \ud83d\udca5\n</code></pre> <p>In this example you can see how to use font styles, colors, and even emojis.</p> <p>To learn more check out the Rich docs.</p>"},{"location":"tutorial/printing/#rich-tables","title":"Rich Tables","text":"<p>The way Rich works internally is that it uses a <code>Console</code> object to display the information.</p> <p>When you call Rich's <code>print</code>, it automatically creates this object and uses it.</p> <p>But for advanced use cases, you could create a <code>Console</code> yourself.</p> <pre><code>import cligenius\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\n\ndef main():\n    table = Table(\"Name\", \"Item\")\n    table.add_row(\"Rick\", \"Portal Gun\")\n    table.add_row(\"Morty\", \"Plumbus\")\n    console.print(table)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>In this example, we create a <code>Console</code>, and a <code>Table</code>. And then we can add some rows to the table, and print it.</p> <p>If you run it, you will see a nicely formatted table:</p> <pre><code>$ python main.py\n\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503&lt;b&gt; Name  &lt;/b&gt;\u2503&lt;b&gt; Item       &lt;/b&gt;\u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Rick  \u2502 Portal Gun \u2502\n\u2502 Morty \u2502 Plumbus    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Rich has many other features, as an example, you can check the docs for:</p> <ul> <li>Prompt</li> <li>Markdown</li> <li>Panel</li> <li>...and more.</li> </ul>"},{"location":"tutorial/printing/#cligenius-and-rich","title":"Cligenius and Rich","text":"<p>If you are wondering what tool should be used for what, Cligenius is useful for structuring the command line application, with options, arguments, subcommands, data validation, etc.</p> <p>In general, Cligenius tends to be the entry point to your program, taking the first input from the user.</p> <p>Rich is useful for the parts that need to display information. Showing beautiful content on the screen.</p> <p>The best results for your command line application would be achieved combining both Cligenius and Rich.</p>"},{"location":"tutorial/printing/#standard-output-and-standard-error","title":"\"Standard Output\" and \"Standard Error\"","text":"<p>The way printing works underneath is that the operating system (Linux, Windows, macOS) treats what we print as if our CLI program was writing text to a \"virtual file\" called \"standard output\".</p> <p>When our code \"prints\" things it is actually \"writing\" to this \"virtual file\" of \"standard output\".</p> <p>This might seem strange, but that's how the CLI program and the operating system interact with each other.</p> <p>And then the operating system shows on the screen whatever our CLI program \"wrote\" to that \"virtual file\" called \"standard output\".</p>"},{"location":"tutorial/printing/#standard-error","title":"Standard Error","text":"<p>And there's another \"virtual file\" called \"standard error\" that is normally only used for errors.</p> <p>But we can also \"print\" to \"standard error\". And both are shown on the terminal to the users.</p> <p>Info</p> <p>If you use PowerShell it's quite possible that what you print to \"standard error\" won't be shown in the terminal.</p> <p>In PowerShell, to see \"standard error\" you would have to check the variable <code>$Error</code>.</p> <p>But it will work normally in Bash, Zsh, and Fish.</p>"},{"location":"tutorial/printing/#printing-to-standard-error","title":"Printing to \"standard error\"","text":"<p>You can print to \"standard error\" creating a Rich <code>Console</code> with <code>stderr=True</code>.</p> <p>Tip</p> <p><code>stderr</code> is short for \"standard error\".</p> <p>Using <code>stderr=True</code> tells Rich that the output should be shown in \"standard error\".</p> <pre><code>import cligenius\nfrom rich.console import Console\n\nerr_console = Console(stderr=True)\n\n\ndef main():\n    err_console.print(\"Here is something written to standard error\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>When you try it in the terminal, it will probably just look the same:</p> <pre><code>$ python main.py\n\nHere is something written to standard error\n</code></pre>"},{"location":"tutorial/printing/#standard-input","title":"\"Standard Input\"","text":"<p>As a final detail, when you type text in your keyboard to your terminal, the operating system also considers it another \"virtual file\" that you are writing text to.</p> <p>This virtual file is called \"standard input\".</p>"},{"location":"tutorial/printing/#what-is-this-for","title":"What is this for","text":"<p>Right now this probably seems quite useless \ud83e\udd37\u200d\u2642.</p> <p>But understanding that will come handy in the future, for example for autocompletion and testing.</p>"},{"location":"tutorial/printing/#cligenius-echo","title":"Cligenius Echo","text":"<p>Warning</p> <p>In most of the cases, for displaying advanced information, it is recommended to use Rich.</p> <p>You can probably skip the rest of this section. \ud83c\udf89\ud83d\ude0e</p> <p>Cligenius also has a small utility <code>cligenius.echo()</code> to print information on the screen, it comes directly from Click. But normally you shouldn't need it.</p> <p>For the simplest cases, you can use the standard Python <code>print()</code>.</p> <p>And for the cases where you want to display data more beautifully, or more advanced content, you should use Rich instead.</p>"},{"location":"tutorial/printing/#why-cligeniusecho","title":"Why <code>cligenius.echo</code>","text":"<p><code>cligenius.echo()</code> (which is actually just <code>click.echo()</code>) applies some checks to try and convert binary data to strings, and other similar things.</p> <p>But in most of the cases you wouldn't need it, as in modern Python strings (<code>str</code>) already support and use Unicode, and you would rarely deal with pure <code>bytes</code> that you want to print on the screen.</p> <p>If you have some <code>bytes</code> objects, you would probably want to decode them intentionally and directly before trying to print them.</p> <p>And if you want to print data with colors and other features, you are much better off with the more advanced tools in Rich.</p> <p>Info</p> <p><code>cligenius.echo()</code> comes directly from Click, you can read more about it in Click's docs.</p>"},{"location":"tutorial/printing/#color","title":"Color","text":"<p>Technical Details</p> <p>The way color works in terminals is by using some codes (ANSI escape sequences) as part of the text.</p> <p>So, a colored text is still just a <code>str</code>.</p> <p>Tip</p> <p>Again, you are much better off using Rich for this. \ud83d\ude0e</p> <p>You can create colored strings to output to the terminal with <code>cligenius.style()</code>, that gives you <code>str</code>s that you can then pass to <code>cligenius.echo()</code>:</p> <pre><code>import cligenius\n\n\ndef main(good: bool = True):\n    message_start = \"everything is \"\n    if good:\n        ending = cligenius.style(\"good\", fg=cligenius.colors.GREEN, bold=True)\n    else:\n        ending = cligenius.style(\n            \"bad\", fg=cligenius.colors.WHITE, bg=cligenius.colors.RED\n        )\n    message = message_start + ending\n    cligenius.echo(message)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>The parameters <code>fg</code> and <code>bg</code> receive strings with the color names for the \"foreground\" and \"background\" colors. You could simply pass <code>fg=\"green\"</code> and <code>bg=\"red\"</code>.</p> <p>But Cligenius provides them all as variables like <code>cligenius.colors.GREEN</code> just so you can use autocompletion while selecting them.</p> <p>Check it:</p> python main.py everything is good python main.py --no-good everything is bad <p>You can pass these function arguments to <code>cligenius.style()</code>:</p> <ul> <li><code>fg</code>: the foreground color.</li> <li><code>bg</code>: the background color.</li> <li><code>bold</code>: enable or disable bold mode.</li> <li><code>dim</code>: enable or disable dim mode. This is badly supported.</li> <li><code>underline</code>: enable or disable underline.</li> <li><code>blink</code>: enable or disable blinking.</li> <li><code>reverse</code>: enable or disable inverse rendering (foreground becomes background and the other way round).</li> <li><code>reset</code>: by default a reset-all code is added at the end of the string which means that styles do not carry over.  This can be disabled to compose styles.</li> </ul> <p>Info</p> <p>You can read more about it in Click's docs about <code>style()</code></p>"},{"location":"tutorial/printing/#cligeniussecho-style-and-print","title":"<code>cligenius.secho()</code> - style and print","text":"<p>Tip</p> <p>In case you didn't see above, you are much better off using Rich for this. \ud83d\ude0e</p> <p>There's a shorter form to style and print at the same time with <code>cligenius.secho()</code> it's like <code>cligenius.echo()</code> but also adds style like <code>cligenius.style()</code>:</p> <pre><code>import cligenius\n\n\ndef main(name: str):\n    cligenius.secho(f\"Welcome here {name}\", fg=cligenius.colors.MAGENTA)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> python main.py Camila Welcome here Camila"},{"location":"tutorial/progressbar/","title":"Progress Bar","text":"<p>If you are executing an operation that can take some time, you can inform it to the user. \ud83e\udd13</p>"},{"location":"tutorial/progressbar/#progress-bar","title":"Progress Bar","text":"<p>You can use Rich's Progress Display to show a progress bar, for example:</p> <pre><code>import time\n\nimport cligenius\nfrom rich.progress import track\n\n\ndef main():\n    total = 0\n    for value in track(range(100), description=\"Processing...\"):\n        # Fake processing time\n        time.sleep(0.01)\n        total += 1\n    print(f\"Processed {total} things.\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>You put the thing that you want to iterate over inside of Rich's <code>track()</code>, and then iterate over that.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n---&gt; 100%\n\nProcessed 100 things.\n</code></pre> <p>...actually, it will look a lot prettier. \u2728 But I can't show you the animation here in the docs. \ud83d\ude05</p> <p>The colors and information will look something like this:</p> <pre><code>$ python main.py\n\nProcessing... &lt;font color=\"#F92672\"&gt;\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578&lt;/font&gt;&lt;font color=\"#3A3A3A\"&gt;\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501&lt;/font&gt; &lt;font color=\"#AE81FF\"&gt; 74%&lt;/font&gt; &lt;font color=\"#A1EFE4\"&gt;0:00:01&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/progressbar/#spinner","title":"Spinner","text":"<p>When you don't know how long the operation will take, you can use a spinner instead.</p> <p>Rich allows you to display many things in complex and advanced ways.</p> <p>For example, this will show two spinners:</p> <pre><code>import time\n\nimport cligenius\nfrom rich.progress import Progress, SpinnerColumn, TextColumn\n\n\ndef main():\n    with Progress(\n        SpinnerColumn(),\n        TextColumn(\"[progress.description]{task.description}\"),\n        transient=True,\n    ) as progress:\n        progress.add_task(description=\"Processing...\", total=None)\n        progress.add_task(description=\"Preparing...\", total=None)\n        time.sleep(5)\n    print(\"Done!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>I can't show you the beautiful animation here in the docs. \ud83d\ude05</p> <p>But at some point in time it will look like this (imagine it's spinning). \ud83e\udd13</p> <pre><code>$ python main.py\n\n&lt;font color=\"#A6E22E\"&gt;\u2839&lt;/font&gt; Processing...\n&lt;font color=\"#A6E22E\"&gt;\u2839&lt;/font&gt; Preparing...\n</code></pre> <p>You can learn more about it in the Rich docs for Progress Display.</p>"},{"location":"tutorial/progressbar/#cligenius-progressbar","title":"Cligenius <code>progressbar</code>","text":"<p>If you can, you should use Rich as explained above, it has more features, it's more advanced, and can display information more beautifully. \u2728</p> <p>Tip</p> <p>If you can use Rich, use the information above, the Rich docs, and skip the rest of this page. \ud83d\ude0e</p> <p>But if you can't use Rich, Cligenius (actually Click) comes with a simple utility to show progress bars.</p> <p>Info</p> <p><code>cligenius.progressbar()</code> comes directly from Click, you can read more about it in Click's docs.</p>"},{"location":"tutorial/progressbar/#use-cligeniusprogressbar","title":"Use <code>cligenius.progressbar</code>","text":"<p>Tip</p> <p>Remember, you are much better off using Rich for this. \ud83d\ude0e</p> <p>You can use <code>cligenius.progressbar()</code> with a <code>with</code> statement, as in:</p> <pre><code>with cligenius.progressbar(something) as progress:\n    pass\n</code></pre> <p>And you pass as function argument to <code>cligenius.progressbar()</code> the thing that you would normally iterate over.</p> <pre><code>import time\n\nimport cligenius\n\n\ndef main():\n    total = 0\n    with cligenius.progressbar(range(100)) as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} things.\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>So, if you have a list of users, this could be:</p> <pre><code>users = [\"Camila\", \"Rick\", \"Morty\"]\n\nwith cligenius.progressbar(users) as progress:\n    pass\n</code></pre> <p>And the <code>with</code> statement using <code>cligenius.progressbar()</code> gives you an object that you can iterate over, just like if it was the same thing that you would iterate over normally.</p> <p>But by iterating over this object Cligenius (actually Click) will know to update the progress bar:</p> <pre><code>users = [\"Camila\", \"Rick\", \"Morty\"]\n\nwith cligenius.progressbar(users) as progress:\n    for user in progress:\n        cligenius.echo(user)\n</code></pre> <p>Tip</p> <p>Notice that there are 2 levels of code blocks. One for the <code>with</code> statement and one for the <code>for</code> statement.</p> <p>Info</p> <p>This is mostly useful for operations that take some time.</p> <p>In the example above we are faking it with <code>time.sleep()</code>.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n---&gt; 100%\n\nProcessed 100 things.\n</code></pre>"},{"location":"tutorial/progressbar/#setting-a-progress-bar-length","title":"Setting a Progress Bar <code>length</code>","text":"<p>Tip</p> <p>Remember, you are much better off using Rich for this. \ud83d\ude0e</p> <p>The progress bar is generated from the length of the iterable (e.g. the list of users).</p> <p>But if the length is not available (for example, with something that fetches a new user from a web API each time) you can pass an explicit <code>length</code> to <code>cligenius.progressbar()</code>.</p> <pre><code>import time\n\nimport cligenius\n\n\ndef iterate_user_ids():\n    # Let's imagine this is a web API, not a range()\n    for i in range(100):\n        yield i\n\n\ndef main():\n    total = 0\n    with cligenius.progressbar(iterate_user_ids(), length=100) as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} user IDs.\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\n---&gt; 100%\n\nProcessed 100 user IDs.\n</code></pre>"},{"location":"tutorial/progressbar/#about-the-function-with-yield","title":"About the function with <code>yield</code>","text":"<p>If you hadn't seen something like that <code>yield</code> above, that's a \"generator\".</p> <p>You can iterate over that function with a <code>for</code> and at each iteration it will give you the value at <code>yield</code>.</p> <p><code>yield</code> is like a <code>return</code> that gives values multiple times and let's you use the function in a <code>for</code> loop.</p> <p>For example:</p> <pre><code>def iterate_user_ids():\n    # Let's imagine this is a web API, not a range()\n    for i in range(100):\n        yield i\n\nfor i in iterate_user_ids():\n    print(i)\n</code></pre> <p>would print each of the \"user IDs\" (here it's just the numbers from <code>0</code> to <code>99</code>).</p>"},{"location":"tutorial/progressbar/#add-a-label","title":"Add a <code>label</code>","text":"<p>Tip</p> <p>Remember, you are much better off using Rich for this. \ud83d\ude0e</p> <p>You can also set a <code>label</code>:</p> <pre><code>import time\n\nimport cligenius\n\n\ndef main():\n    total = 0\n    with cligenius.progressbar(range(100), label=\"Processing\") as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} things.\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> python main.py Processed 100 things."},{"location":"tutorial/progressbar/#iterate-manually","title":"Iterate manually","text":"<p>If you need to manually iterate over something and update the progress bar irregularly, you can do it by not passing an iterable but just a <code>length</code> to <code>cligenius.progressbar()</code>.</p> <p>And then calling the <code>.update()</code> method in the object from the <code>with</code> statement:</p> <pre><code>import time\n\nimport cligenius\n\n\ndef main():\n    total = 1000\n    with cligenius.progressbar(length=total) as progress:\n        for batch in range(4):\n            # Fake processing time\n            time.sleep(1)\n            progress.update(250)\n    print(f\"Processed {total} things in batches.\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> python main.py Processed 100 things in batches."},{"location":"tutorial/prompt/","title":"Ask with Prompt","text":"<p>When you need to ask the user for info interactively you should normally use CLI Options with Prompt, because they allow using the CLI program in a non-interactive way (for example, a Bash script could use it).</p> <p>But if you absolutely need to ask for interactive information without using a CLI option, you can use <code>cligenius.prompt()</code>:</p> <pre><code>import cligenius\n\n\ndef main():\n    person_name = cligenius.prompt(\"What's your name?\")\n    print(f\"Hello {person_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\n# What's your name?:$ Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/prompt/#confirm","title":"Confirm","text":"<p>There's also an alternative to ask for confirmation. Again, if possible, you should use a CLI Option with a confirmation prompt:</p> <pre><code>import cligenius\n\n\ndef main():\n    delete = cligenius.confirm(\"Are you sure you want to delete it?\")\n    if not delete:\n        print(\"Not deleting\")\n        raise cligenius.Abort()\n    print(\"Deleting it!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ y\n\nDeleting it!\n\n// This time cancel it\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ n\n\nNot deleting\nAborted!\n</code></pre>"},{"location":"tutorial/prompt/#confirm-or-abort","title":"Confirm or abort","text":"<p>As it's very common to abort if the user doesn't confirm, there's an integrated parameter <code>abort</code> that does it automatically:</p> <pre><code>import cligenius\n\n\ndef main():\n    delete = cligenius.confirm(\"Are you sure you want to delete it?\", abort=True)\n    print(\"Deleting it!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <pre><code>$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ y\n\nDeleting it!\n\n// This time cancel it\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ n\n\nAborted!\n</code></pre>"},{"location":"tutorial/prompt/#prompt-with-rich","title":"Prompt with Rich","text":"<p>If you installed Rich as described in Printing and Colors, you can use Rich to prompt the user for input:</p> <pre><code>import cligenius\nfrom rich.prompt import Prompt\n\n\ndef main():\n    name = Prompt.ask(\"Enter your name :sunglasses:\")\n    print(f\"Hey there {name}!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And when you run it, it will look like:</p> <pre><code>$ python main.py\n\n# Enter your name \ud83d\ude0e:$ Morty\n\nHello Morty\n</code></pre>"},{"location":"tutorial/terminating/","title":"Terminating","text":"<p>There are some cases where you might want to terminate a command at some point, and stop all subsequent execution.</p> <p>It could be that your code determined that the program completed successfully, or it could be an operation aborted.</p>"},{"location":"tutorial/terminating/#exit-a-cli-program","title":"<code>Exit</code> a CLI program","text":"<p>You can normally just let the code of your CLI program finish its execution, but in some scenarios, you might want to terminate at some point in the middle of it. And prevent any subsequent code to run.</p> <p>This doesn't have to mean that there's an error, just that nothing else needs to be executed.</p> <p>In that case, you can raise a <code>cligenius.Exit()</code> exception:</p> <pre><code>import cligenius\n\nexisting_usernames = [\"rick\", \"morty\"]\n\n\ndef maybe_create_user(username: str):\n    if username in existing_usernames:\n        print(\"The user already exists\")\n        raise cligenius.Exit()\n    else:\n        print(f\"User created: {username}\")\n\n\ndef send_new_user_notification(username: str):\n    # Somehow send a notification here for the new user, maybe an email\n    print(f\"Notification sent for new user: {username}\")\n\n\ndef main(username: str):\n    maybe_create_user(username=username)\n    send_new_user_notification(username=username)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>There are several things to see in this example.</p> <ul> <li>The CLI program is the function <code>main()</code>, not the others. This is the one that takes a CLI argument.</li> <li>The function <code>maybe_create_user()</code> can terminate the program by raising <code>cligenius.Exit()</code>.</li> <li>If the program is terminated by <code>maybe_create_user()</code> then <code>send_new_user_notification()</code> will never execute inside of <code>main()</code>.</li> </ul> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nUser created: Camila\nNotification sent for new user: Camila\n\n// Try with an existing user\n$ python main.py rick\n\nThe user already exists\n\n// Notice that the notification code was never run, the second message is not printed\n</code></pre> <p>Tip</p> <p>Even though you are raising an exception, it doesn't necessarily mean there's an error.</p> <p>This is done with an exception because it works as an \"error\" and stops all execution.</p> <p>But then Cligenius (actually Click) catches it and just terminates the program normally.</p>"},{"location":"tutorial/terminating/#exit-with-an-error","title":"Exit with an error","text":"<p><code>cligenius.Exit()</code> takes an optional <code>code</code> parameter. By default, <code>code</code> is <code>0</code>, meaning there was no error.</p> <p>You can pass a <code>code</code> with a number other than <code>0</code> to tell the terminal that there was an error in the execution of the program:</p> <pre><code>import cligenius\n\n\ndef main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise cligenius.Exit(code=1)\n    print(f\"New user created: {username}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Print the result code of the last program executed\n$ echo $?\n\n0\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\n\n// Print the result code of the last program executed\n$ echo $?\n\n1\n\n// 1 means there was an error, 0 means no errors.\n</code></pre> <p>Tip</p> <p>The error code might be used by other programs (for example a Bash script) that execute your CLI program.</p>"},{"location":"tutorial/terminating/#abort","title":"Abort","text":"<p>There's a special exception that you can use to \"abort\" a program.</p> <p>It works more or less the same as <code>cligenius.Exit()</code> but will print <code>\"Aborted!\"</code> to the screen and can be useful in certain cases later to make it explicit that the execution was aborted:</p> <pre><code>import cligenius\n\n\ndef main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise cligenius.Abort()\n    print(f\"New user created: {username}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\nNew user created: Camila\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\nAborted!\n</code></pre>"},{"location":"tutorial/testing/","title":"Testing","text":"<p>Testing Cligenius applications is very easy with pytest.</p> <p>Let's say you have an application <code>app/main.py</code> with:</p> <pre><code>from typing import Optional\n\nimport cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str, city: Optional[str] = None):\n    print(f\"Hello {name}\")\n    if city:\n        print(f\"Let's have a coffee in {city}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>So, you would use it like:</p> <pre><code>$ python main.py Camila --city Berlin\n\nHello Camila\nLet's have a coffee in Berlin\n</code></pre> <p>And the directory also has an empty <code>app/__init__.py</code> file.</p> <p>So, the <code>app</code> is a \"Python package\".</p>"},{"location":"tutorial/testing/#test-the-app","title":"Test the app","text":""},{"location":"tutorial/testing/#import-and-create-a-clirunner","title":"Import and create a <code>CliRunner</code>","text":"<p>Create another file/module <code>app/test_main.py</code>.</p> <p>Import <code>CliRunner</code> and create a <code>runner</code> object.</p> <p>This runner is what will \"invoke\" or \"call\" your command line application.</p> <pre><code>from cligenius.testing import CliRunner\n\nfrom .main import app\n\nrunner = CliRunner()\n\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n    assert \"Let's have a coffee in Berlin\" in result.stdout\n</code></pre> <p>Tip</p> <p>It's important that the name of the file starts with <code>test_</code>, that way pytest will be able to detect it and use it automatically.</p>"},{"location":"tutorial/testing/#call-the-app","title":"Call the app","text":"<p>Then create a function <code>test_app()</code>.</p> <p>And inside of the function, use the <code>runner</code> to <code>invoke</code> the application.</p> <p>The first parameter to <code>runner.invoke()</code> is a <code>Cligenius</code> app.</p> <p>The second parameter is a <code>list</code> of <code>str</code>, with all the text you would pass in the command line, right as you would pass it:</p> <pre><code>from cligenius.testing import CliRunner\n\nfrom .main import app\n\nrunner = CliRunner()\n\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n    assert \"Let's have a coffee in Berlin\" in result.stdout\n</code></pre> <p>Tip</p> <p>The name of the function has to start with <code>test_</code>, that way pytest can detect it and use it automatically.</p>"},{"location":"tutorial/testing/#check-the-result","title":"Check the result","text":"<p>Then, inside of the test function, add <code>assert</code> statements to ensure that everything in the result of the call is as it should be.</p> <pre><code>from cligenius.testing import CliRunner\n\nfrom .main import app\n\nrunner = CliRunner()\n\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n    assert \"Let's have a coffee in Berlin\" in result.stdout\n</code></pre> <p>Here we are checking that the exit code is 0, as it is for programs that exit without errors.</p> <p>Then we check that the text printed to \"standard output\" contains the text that our CLI program prints.</p> <p>Tip</p> <p>You could also check <code>result.stderr</code> for \"standard error\" independently from \"standard output\" if your <code>CliRunner</code> instance is created with the <code>mix_stderr=False</code> argument.</p> <p>Info</p> <p>If you need a refresher about what is \"standard output\" and \"standard error\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\".</p>"},{"location":"tutorial/testing/#call-pytest","title":"Call <code>pytest</code>","text":"<p>Then you can call <code>pytest</code> in your directory and it will run your tests:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.10, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 1 item\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;.                                 [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/testing/#testing-input","title":"Testing input","text":"<p>If you have a CLI with prompts, like:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str, email: Annotated[str, cligenius.Option(prompt=True)]):\n    print(f\"Hello {name}, your email is: {email}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str, email: str = cligenius.Option(..., prompt=True)):\n    print(f\"Hello {name}, your email is: {email}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>That you would use like:</p> <pre><code>$ python main.py Camila\n\n# Email: $ camila@example.com\n\nHello Camila, your email is: camila@example.com\n</code></pre> <p>You can test the input typed in the terminal using <code>input=\"camila@example.com\\n\"</code>.</p> <p>This is because what you type in the terminal goes to \"standard input\" and is handled by the operating system as if it was a \"virtual file\".</p> <p>Info</p> <p>If you need a refresher about what is \"standard output\", \"standard error\", and \"standard input\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\".</p> <p>When you hit the ENTER key after typing the email, that is just a \"new line character\". And in Python that is represented with <code>\"\\n\"</code>.</p> <p>So, if you use <code>input=\"camila@example.com\\n\"</code> it means: \"type <code>camila@example.com</code> in the terminal, then hit the ENTER key\":</p> <pre><code>from cligenius.testing import CliRunner\n\nfrom .main import app\n\nrunner = CliRunner()\n\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\"], input=\"camila@example.com\\n\")\n    assert result.exit_code == 0\n    assert \"Hello Camila, your email is: camila@example.com\" in result.stdout\n</code></pre>"},{"location":"tutorial/testing/#test-a-function","title":"Test a function","text":"<p>If you have a script and you never created an explicit <code>cligenius.Cligenius</code> app, like:</p> <pre><code>import cligenius\n\n\ndef main(name: str = \"World\"):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>...you can still test it, by creating an app during testing:</p> <pre><code>import cligenius\nfrom cligenius.testing import CliRunner\n\nfrom .main import main\n\napp = cligenius.Cligenius()\napp.command()(main)\n\nrunner = CliRunner()\n\n\ndef test_app():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n</code></pre> <p>Of course, if you are testing that script, it's probably easier/cleaner to just create the explicit <code>cligenius.Cligenius</code> app in <code>main.py</code> instead of creating it just during the test.</p> <p>But if you want to keep it that way, e.g. because it's a simple example in documentation, then you can use that trick.</p>"},{"location":"tutorial/testing/#about-the-appcommand-decorator","title":"About the <code>app.command</code> decorator","text":"<p>Notice the <code>app.command()(main)</code>.</p> <p>If it's not obvious what it's doing, continue reading...</p> <p>You would normally write something like:</p> <pre><code>@app.command()\ndef main(name: str = \"World\"):\n    # Some code here\n</code></pre> <p>But <code>@app.command()</code> is just a decorator.</p> <p>That's equivalent to:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\nnew_main = decorator(main)\nmain = new_main\n</code></pre> <p><code>app.command()</code> returns a function (<code>decorator</code>) that takes another function as it's only parameter (<code>main</code>).</p> <p>And by using the <code>@something</code> you normally tell Python to replace the thing below (the function <code>main</code>) with the return of the <code>decorator</code> function (<code>new_main</code>).</p> <p>Now, in the specific case of Cligenius, the decorator doesn't change the original function. It registers it internally and returns it unmodified.</p> <p>So, <code>new_main</code> is actually the same original <code>main</code>.</p> <p>So, in the case of Cligenius, as it doesn't really modify the decorated function, that would be equivalent to:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\ndecorator(main)\n</code></pre> <p>But then we don't need to create the variable <code>decorator</code> to use it below, we can just use it directly:</p> <pre><code>def main(name: str = \"World\"):\n    # Some code here\n\napp.command()(main)\n</code></pre> <p>...that's it. It's still probably simpler to just create the explicit <code>cligenius.Cligenius</code> in the <code>main.py</code> file \ud83d\ude05.</p>"},{"location":"tutorial/using-click/","title":"Using Click","text":"<p>Warning</p> <p>This is a more advanced topic, if you are starting with Cligenius, feel free to skip it.</p> <p>It will be mostly useful for people that already work with Click and have questions around it.</p> <p>Cligenius is powered by Click. It does all the work underneath.</p> <p>Here is some more information related to using both together.</p>"},{"location":"tutorial/using-click/#a-single-app-with-both-click-and-cligenius","title":"A single app with both Click and Cligenius","text":"<p>If you already have a Click application and want to migrate to Cligenius, or to add some Cligenius components, you can get a Click <code>Command</code> from your Cligenius application and then use Click directly.</p>"},{"location":"tutorial/using-click/#how-click-works","title":"How Click works","text":"<p>Before knowing how to combine Click and Cligenius, let's first check a little about how Click works.</p>"},{"location":"tutorial/using-click/#click-command","title":"Click <code>Command</code>","text":"<p>Any Click application has an object of class <code>Command</code>. That's, more or less, the most basic Click object.</p> <p>A <code>Command</code> can have its own CLI arguments and CLI options, and it has a function that it calls.</p> <p>For example, in this Click app:</p> <pre><code>import click\n\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo(\"Hello %s!\" % name)\n\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>The original <code>hello</code> variable is converted by Click from a function to a <code>Command</code> object. And the original <code>hello</code> function is used by that <code>Command</code> internally, but it is no longer named <code>hello</code> (as <code>hello</code> is now a Click <code>Command</code>).</p>"},{"location":"tutorial/using-click/#click-group","title":"Click <code>Group</code>","text":"<p>Then Click also has a <code>Group</code> class, it inherits from <code>Command</code>. So, a <code>Group</code> object is also a <code>Command</code>.</p> <p>A <code>Group</code> can also have its own CLI arguments and CLI options.</p> <p>A <code>Group</code> can have subcommands of class <code>Command</code> or sub groups of class <code>Group</code> as well.</p> <p>And a <code>Group</code> can also have a function that it calls, right before calling the function for any specific subcommand.</p> <p>For example:</p> <pre><code>import click\n\n\n@click.group()\ndef cli():\n    pass\n\n\n@click.command()\ndef initdb():\n    click.echo(\"Initialized the database\")\n\n\n@click.command()\ndef dropdb():\n    click.echo(\"Dropped the database\")\n\n\ncli.add_command(initdb)\ncli.add_command(dropdb)\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>The <code>cli</code> variable is converted by Click from a function to a <code>Group</code> object. And the original <code>cli</code> function is used by that <code>Group</code> internally.</p> <p>Tip</p> <p>The original <code>cli</code> function would be the equivalent of a Cligenius Callback.</p> <p>Then the <code>cli</code> variable, that now is a <code>Group</code> object, is used to add sub-commands.</p>"},{"location":"tutorial/using-click/#how-cligenius-works","title":"How Cligenius works","text":"<p>Cligenius doesn't modify the functions. You create an explicit variable of class <code>cligenius.Cligenius</code> and use it to register those functions.</p> <p>And then, when you call the app, Cligenius goes and creates a Click <code>Command</code> (or <code>Group</code>), and then calls it.</p> <p>If your app only has one command, then when you call it, Cligenius creates a single Click <code>Command</code> object and calls it.</p> <p>But Cligenius creates a Click <code>Group</code> object if your app has any of:</p> <ul> <li>More than one command.</li> <li>A callback.</li> <li>Sub-Cligenius apps (sub commands).</li> </ul> <p>Tip</p> <p>If you want to learn more about this check the section One or Multiple Commands.</p>"},{"location":"tutorial/using-click/#combine-click-and-cligenius","title":"Combine Click and Cligenius","text":"<p>Cligenius uses an internal function <code>cligenius.main.get_command()</code> to generate a Click <code>Command</code> (or <code>Group</code>) from a <code>cligenius.Cligenius</code> object.</p> <p>You can use it directly, and use the Click object with other Click applications.</p>"},{"location":"tutorial/using-click/#including-a-click-app-in-a-cligenius-app","title":"Including a Click app in a Cligenius app","text":"<p>For example, you could have a Cligenius app, generate a Click <code>Group</code> from it, and then include other Click apps in it:</p> <pre><code>import click\nimport cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef top():\n    \"\"\"\n    Top level command, form Cligenius\n    \"\"\"\n    print(\"The Cligenius app is at the top level\")\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Cligenius app, including Click subapp\n    \"\"\"\n\n\n@click.command()\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    click.echo(\"Hello %s!\" % name)\n\n\ncligenius_click_object = cligenius.main.get_command(app)\n\ncligenius_click_object.add_command(hello, \"hello\")\n\nif __name__ == \"__main__\":\n    cligenius_click_object()\n</code></pre> <p>Notice that we add a callback that does nothing (only document the CLI program), to make sure Cligenius creates a Click <code>Group</code>. That way we can add sub-commands to that Click <code>Group</code>.</p> <p>Then we generate a Click object from our <code>cligenius.Cligenius</code> app (<code>cligenius_click_object</code>), and then we can include another Click object (<code>hello</code>) in this Click <code>Group</code>.</p> <p>And that way, our Cligenius app will have a subcommand <code>top</code> built with Cligenius, and a subcommand <code>hello</code> built with Click.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  hello\n  top\n\n// Call the Cligenius part\n$ python main.py top\n\nThe Cligenius app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n</code></pre>"},{"location":"tutorial/using-click/#including-a-cligenius-app-in-a-click-app","title":"Including a Cligenius app in a Click app","text":"<p>The same way, you can do the contrary and include a Cligenius sub app in a bigger Click app:</p> <pre><code>import click\nimport cligenius\n\n\n@click.group()\ndef cli():\n    pass\n\n\n@cli.command()\ndef initdb():\n    click.echo(\"Initialized the database\")\n\n\n@cli.command()\ndef dropdb():\n    click.echo(\"Dropped the database\")\n\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef sub():\n    \"\"\"\n    A single-command Cligenius sub app\n    \"\"\"\n    print(\"Cligenius is now below Click, the Click app is the top level\")\n\n\ncligenius_click_object = cligenius.main.get_command(app)\n\ncli.add_command(cligenius_click_object, \"sub\")\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>Notice that we don't have to add a callback or more commands, we can just create a Cligenius app that generates a single Click <code>Command</code>, as we don't need to include anything under the Cligenius app.</p> <p>Then we generate a Click object from our <code>cligenius.Cligenius</code> app (<code>cligenius_click_object</code>), and then we use the Click <code>cli</code> to include our Click object from our Cligenius app.</p> <p>In this case, the original Click app includes the Cligenius app.</p> <p>And then we call the original Click app, not the Cligenius app.</p> <p>Check it:</p> <pre><code>$ python main.py\n\n// We get our Cligenius app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Cligenius sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Cligenius part\n$ python main.py sub\n\nCligenius is now below Click, the Click app is the top level\n</code></pre>"},{"location":"tutorial/using-click/#about-click-decorators","title":"About Click decorators","text":"<p>Cligenius apps don't work with Click decorators directly.</p> <p>This is because Cligenius doesn't modify functions to add metadata or to convert them to another object like Click does.</p> <p>So, things like <code>@click.pass_context</code> won't work.</p> <p>Most of the functionality provided by decorators in Click has an alternative way of doing it in Cligenius.</p> <p>For example, to access the context, you can just declare a function parameter of type <code>cligenius.Context</code>.</p> <p>Tip</p> <p>You can read more about using the context in the docs: Commands: Using the Context</p> <p>But if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.</p>"},{"location":"tutorial/arguments/","title":"CLI Arguments Intro","text":"<p>In the next few sections we'll see some ways to modify how CLI arguments work.</p> <p>We'll create optional CLI arguments, we'll add integrated help for CLI arguments, etc.</p>"},{"location":"tutorial/arguments/default/","title":"CLI Arguments with Default","text":"<p>We can also use the same <code>cligenius.Argument()</code> to set a default value.</p> <p>That way the CLI argument will be optional and also have a default value.</p>"},{"location":"tutorial/arguments/default/#an-optional-cli-argument-with-a-default","title":"An optional CLI argument with a default","text":"<p>We can also use <code>cligenius.Argument()</code> to make a CLI argument have a default value other than <code>None</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument()] = \"Wade Wilson\"):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"Wade Wilson\")):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Because now the value will be a <code>str</code> passed by the user or the default value of <code>\"Wade Wilson\"</code> which is also a <code>str</code>, we know the value will never be <code>None</code>, so we don't have to (and shouldn't) use <code>Optional[str]</code>.</p> <p>Have in mind that the <code>Optional[something]</code> tells Python that a value \"could be <code>None</code>\". But the use of <code>Optional</code> doesn't affect Cligenius in any way, e.g. it doesn't tell Cligenius if a value is required or not.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the [default: Wade Wilson] \u2728\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: Wade Wilson]\n\nOptions:\n  --help                Show this message and exit.\n\n// With no optional CLI argument\n$ python main.py\n\nHello Wade Wilson\n\n// With one CLI argument\n$ python main.py Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/arguments/default/#dynamic-default-value","title":"Dynamic default value","text":"<p>And we can even make the default value be dynamically generated by passing a function as the <code>default_factory</code> argument:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import random\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef get_name():\n    return random.choice([\"Deadpool\", \"Rick\", \"Morty\", \"Hiro\"])\n\n\ndef main(name: Annotated[str, cligenius.Argument(default_factory=get_name)]):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import random\n\nimport cligenius\n\n\ndef get_name():\n    return random.choice([\"Deadpool\", \"Rick\", \"Morty\", \"Hiro\"])\n\n\ndef main(name: str = cligenius.Argument(default_factory=get_name)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>In this case, we created the function <code>get_name</code> that will just return a random <code>str</code> each time.</p> <p>And we pass it as the first function argument to <code>cligenius.Argument()</code>.</p> <p>Tip</p> <p>The word \"factory\" in <code>default_factory</code> is just a fancy way of saying \"function that will create the default value\".</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: (dynamic)]\n\nOptions:\n  --help                Show this message and exit.\n\n// Try it several times, it will use a random default each time\n$ python main.py\n\nHello Deadpool\n\n$ python main.py\n\nHello Hiro\n\n$ python main.py\n\nHello Rick\n\n// Now pass a value for the CLI argument\n$ python main.py Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/arguments/envvar/","title":"CLI Arguments with Environment Variables","text":"<p>You can also configure a CLI argument to read a value from an environment variable if it is not provided in the command line as a CLI argument.</p> <p>To do that, use the <code>envvar</code> parameter for <code>cligenius.Argument()</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument(envvar=\"AWESOME_NAME\")] = \"World\"):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"World\", envvar=\"AWESOME_NAME\")):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>In this case, the CLI argument <code>name</code> will have a default value of <code>\"World\"</code>, but will also read any value passed to the environment variable <code>AWESOME_NAME</code> if no value is provided in the command line:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [env var: AWESOME_NAME;default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// Call it without a CLI argument\n$ python main.py\n\nHello Mr. World\n\n// Now pass a value for the CLI argument\n$ python main.py Czernobog\n\nHello Mr. Czernobog\n\n// And now use the environment variable\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n\n// CLI arguments take precedence over env vars\n$ AWESOME_NAME=Wednesday python main.py Czernobog\n\nHello Mr. Czernobog\n</code></pre>"},{"location":"tutorial/arguments/envvar/#multiple-environment-variables","title":"Multiple environment variables","text":"<p>You are not restricted to a single environment variable, you can declare a list of environment variables that could be used to get a value if it was not passed in the command line:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[\n        str, cligenius.Argument(envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])\n    ] = \"World\",\n):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"World\", envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [env var: AWESOME_NAME, GOD_NAME;default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// Try the first env var\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n\n// Try the second env var\n$ GOD_NAME=Anubis python main.py\n\nHello Mr. Anubis\n</code></pre>"},{"location":"tutorial/arguments/envvar/#hide-an-env-var-from-the-help-text","title":"Hide an env var from the help text","text":"<p>By default, environment variables used will be shown in the help text, but you can disable them with <code>show_envvar=False</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[\n        str, cligenius.Argument(envvar=\"AWESOME_NAME\", show_envvar=False)\n    ] = \"World\",\n):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str = cligenius.Argument(\"World\", envvar=\"AWESOME_NAME\", show_envvar=False),\n):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>//Check the help\n$ python main.py --help\n\n// It won't show the env var\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// But it will still be able to use it\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n</code></pre> <p>Technical Details</p> <p>In Click applications the env vars are hidden by default. \ud83d\ude48</p> <p>In Cligenius these env vars are shown by default. \ud83d\udc40</p>"},{"location":"tutorial/arguments/help/","title":"CLI Arguments with Help","text":"<p>In the First Steps section you saw how to add help for a CLI app/command by adding it to a function's docstring.</p> <p>Here's how that last example looked like:</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now that you also know how to use <code>cligenius.Argument()</code>, let's use it to add documentation specific for a CLI argument.</p>"},{"location":"tutorial/arguments/help/#add-a-help-text-for-a-cli-argument","title":"Add a <code>help</code> text for a CLI argument","text":"<p>You can use the <code>help</code> parameter to add a help text for a CLI argument:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[str, cligenius.Argument(help=\"The name of the user to greet\")],\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(..., help=\"The name of the user to greet\")):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And it will be used in the automatic <code>--help</code> option:</p> <pre><code>$ python main.py --help\n\n// Check the section with Arguments below \ud83d\ude80\nUsage: main.py [OPTIONS] NAME\n\nArguments:\n  NAME  The name of the user to greet  [required]\n\nOptions:\n  --help                Show this message and exit.\n</code></pre>"},{"location":"tutorial/arguments/help/#combine-help-text-and-docstrings","title":"Combine help text and docstrings","text":"<p>And of course, you can also combine that <code>help</code> with the docstring:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[str, cligenius.Argument(help=\"The name of the user to greet\")],\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(..., help=\"The name of the user to greet\")):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And the <code>--help</code> option will combine all the information:</p> <pre><code>$ python main.py --help\n\n// Notice that we have the help text from the docstring and also the Arguments \ud83d\udcdd\nUsage: main.py [OPTIONS] NAME\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  NAME  The name of the user to greet  [required]\n\nOptions:\n  --help                Show this message and exit.\n</code></pre>"},{"location":"tutorial/arguments/help/#help-with-defaults","title":"Help with defaults","text":"<p>If you have a CLI argument with a default value, like <code>\"World\"</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument(help=\"Who to greet\")] = \"World\"):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"World\", help=\"Who to greet\")):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>It will show that default value in the help text:</p> <pre><code>$ python main.py --help\n\n// Notice the [default: World] \ud83d\udd0d\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  [NAME]  Who to greet  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n</code></pre> <p>But you can disable that if you want to, with <code>show_default=False</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[\n        str, cligenius.Argument(help=\"Who to greet\", show_default=False)\n    ] = \"World\",\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str = cligenius.Argument(\"World\", help=\"Who to greet\", show_default=False),\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then it won't show the default value:</p> <pre><code>$ python main.py --help\n\n// Notice the there's no [default: World] now \ud83d\udd25\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  [NAME]  Who to greet\n\nOptions:\n  --help                Show this message and exit.\n</code></pre> <p>Technical Details</p> <p>In Click applications the default values are hidden by default. \ud83d\ude48</p> <p>In Cligenius these default values are shown by default. \ud83d\udc40</p>"},{"location":"tutorial/arguments/help/#custom-default-string","title":"Custom default string","text":"<p>You can use the same <code>show_default</code> to pass a custom string (instead of a <code>bool</code>) to customize the default value to be shown in the help text:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[\n        str,\n        cligenius.Argument(\n            help=\"Who to greet\", show_default=\"Deadpoolio the amazing's name\"\n        ),\n    ] = \"Wade Wilson\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str = cligenius.Argument(\n        \"Wade Wilson\", help=\"Who to greet\", show_default=\"Deadpoolio the amazing's name\"\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And it will be used in the help text:</p> <pre><code>$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  Who to greet  [default: (Deadpoolio the amazing's name)]\n\n\nOptions:\n  --help                Show this message and exit.\n\n// See it shows \"(Deadpoolio the amazing's name)\" instead of the actual default of \"Wade Wilson\"\n</code></pre>"},{"location":"tutorial/arguments/help/#custom-help-name-metavar","title":"Custom help name (<code>metavar</code>)","text":"<p>You can also customize the text used in the generated help text to represent a CLI argument.</p> <p>By default, it will be the same name you declared, in uppercase letters.</p> <p>So, if you declare it as:</p> <pre><code>name: str\n</code></pre> <p>It will be shown as:</p> <pre><code>NAME\n</code></pre> <p>But you can customize it with the <code>metavar</code> parameter for <code>cligenius.Argument()</code>.</p> <p>For example, let's say you don't want to have the default of <code>NAME</code>, you want to have <code>username</code>, in lowercase, and you really want \u2728 emojis \u2728 everywhere:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument(metavar=\"\u2728username\u2728\")] = \"World\"):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"World\", metavar=\"\u2728username\u2728\")):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now the generated help text will have <code>\u2728username\u2728</code> instead of <code>NAME</code>:</p> <pre><code>$ python main.py --help\n\nUsage: main.py [OPTIONS] \u2728username\u2728\n\nArguments:\n  \u2728username\u2728  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n</code></pre>"},{"location":"tutorial/arguments/help/#cli-argument-help-panels","title":"CLI Argument help panels","text":"<p>You might want to show the help information for CLI arguments in different panels when using the <code>--help</code> option.</p> <p>If you have installed Rich as described in the docs for Printing and Colors, you can set the <code>rich_help_panel</code> parameter to the name of the panel where you want this CLI argument to be shown:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[str, cligenius.Argument(help=\"Who to greet\")],\n    lastname: Annotated[\n        str,\n        cligenius.Argument(help=\"The last name\", rich_help_panel=\"Secondary Arguments\"),\n    ] = \"\",\n    age: Annotated[\n        str,\n        cligenius.Argument(\n            help=\"The user's age\", rich_help_panel=\"Secondary Arguments\"\n        ),\n    ] = \"\",\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str = cligenius.Argument(..., help=\"Who to greet\"),\n    lastname: str = cligenius.Argument(\n        \"\", help=\"The last name\", rich_help_panel=\"Secondary Arguments\"\n    ),\n    age: str = cligenius.Argument(\n        \"\", help=\"The user's age\", rich_help_panel=\"Secondary Arguments\"\n    ),\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Then, if you check the <code>--help</code> option, you will see a default panel named \"<code>Arguments</code>\" for the CLI arguments that don't have a custom <code>rich_help_panel</code>.</p> <p>And next you will see other panels for the CLI arguments that have a custom panel set in the <code>rich_help_panel</code> parameter:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME [LASTNAME] [AGE]               &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n Say hi to NAME very gently, like Dirk.\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  Who to greet [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;      \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Secondary Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502   lastname      &lt;/font&gt;&lt;font color=\"#A37F4E\"&gt;&lt;b&gt;[LASTNAME]&lt;/b&gt;&lt;/font&gt;  The last name                         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502   age           &lt;/font&gt;&lt;font color=\"#A37F4E\"&gt;&lt;b&gt;[AGE]     &lt;/b&gt;&lt;/font&gt;  The user&amp;apos;s age                        \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message and exit.         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>In this example we have a custom CLI arguments panel named \"<code>Secondary Arguments</code>\".</p>"},{"location":"tutorial/arguments/help/#help-with-style-using-rich","title":"Help with style using Rich","text":"<p>In a future section you will see how to use custom markup in the <code>help</code> for CLI arguments when reading about Commands - Command Help.</p> <p>If you are in a hurry you can jump there, but otherwise, it would be better to continue reading here and following the tutorial in order.</p>"},{"location":"tutorial/arguments/help/#hide-a-cli-argument-from-the-help-text","title":"Hide a CLI argument from the help text","text":"<p>If you want, you can make a CLI argument not show up in the <code>Arguments</code> section in the help text.</p> <p>You will probably not want to do this normally, but it's possible:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument(hidden=True)] = \"World\"):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(\"World\", hidden=True)):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice there's no Arguments section at all \ud83d\udd25\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nOptions:\n  --help                Show this message and exit.\n</code></pre> <p>Info</p> <p>Have in mind that the CLI argument will still show up in the first line with <code>Usage</code>.</p> <p>But it won't show up in the main help text under the <code>Arguments</code> section.</p>"},{"location":"tutorial/arguments/help/#help-text-for-cli-arguments-in-click","title":"Help text for CLI arguments in Click","text":"<p>Click itself doesn't support adding help for CLI arguments, and it doesn't generate help for them as in the \"<code>Arguments:</code>\" sections in the examples above.</p> <p>Not supporting <code>help</code> in CLI arguments is an intentional design decision in Click:</p> <p>This is to follow the general convention of Unix tools of using arguments for only the most necessary things, and to document them in the command help text by referring to them by name.</p> <p>So, in Click applications, you are expected to write all the documentation for CLI arguments by hand in the docstring.</p> <p>Nevertheless, Cligenius supports <code>help</code> for CLI arguments. \u2728 \ud83e\udd37\u200d\u2642</p> <p>Cligenius doesn't follow that convention and instead supports <code>help</code> to make it easier to have consistent help texts with a consistent format for your CLI programs. \ud83c\udfa8</p> <p>This is also to help you create CLI programs that are \u2728 awesome \u2728 by default. With very little code.</p> <p>If you want to keep Click's convention in a Cligenius app, you can do it with the <code>hidden</code> parameter as described above.</p> <p>Technical Details</p> <p>To support <code>help</code> in CLI arguments Cligenius does a lot of internal work in its own sub-classes of Click's internal classes.</p>"},{"location":"tutorial/arguments/optional/","title":"Optional CLI Arguments","text":"<p>We said before that by default:</p> <ul> <li>CLI options are optional</li> <li>CLI arguments are required</li> </ul> <p>Again, that's how they work by default, and that's the convention in many CLI programs and systems.</p> <p>But you can change that.</p> <p>In fact, it's very common to have optional CLI arguments, it's way more common than having required CLI options.</p> <p>As an example of how it could be useful, let's see how the <code>ls</code> CLI program works.</p> <pre><code>// If you just type\n$ ls\n\n// ls will \"list\" the files and directories in the current directory\ncligenius  tests  README.md  LICENSE\n\n// But it also receives an optional CLI argument\n$ ls ./tests/\n\n// And then ls will list the files and directories inside of that directory from the CLI argument\n__init__.py  test_tutorial\n</code></pre>"},{"location":"tutorial/arguments/optional/#an-alternative-cli-argument-declaration","title":"An alternative CLI argument declaration","text":"<p>In the First Steps you saw how to add a CLI argument:</p> <pre><code>import cligenius\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now let's see an alternative way to create the same CLI argument:</p> <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[str, cligenius.Argument()]):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Info</p> <p>Cligenius added support for <code>Annotated</code> (and started recommending it) in version 0.9.0.</p> <p>If you have an older version, you would get errors when trying to use <code>Annotated</code>.</p> <p>Make sure you upgrade the Cligenius version to at least 0.9.0 before using <code>Annotated</code>.</p> <p>Before, you had this function parameter:</p> <pre><code>name: str\n</code></pre> <p>And now we wrap it with <code>Annotated</code>:</p> <pre><code>name: Annotated[str]\n</code></pre> <p>Both of these versions mean the same thing, <code>Annotated</code> is part of standard Python and is there for this.</p> <p>But the second version using <code>Annotated</code> allows us to pass additional metadata that can be used by Cligenius:</p> <pre><code>name: Annotated[str, cligenius.Argument()]\n</code></pre> <p>Now we are being explicit that <code>name</code> is a CLI argument. It's still a <code>str</code> and it's still required (it doesn't have a default value).</p> <p>All we did there achieves the same thing as before, a required CLI argument:</p> <pre><code>$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n</code></pre> <p>It's still not very useful, but it works correctly.</p> <p>And being able to declare a required CLI argument using</p> <pre><code>name: Annotated[str, cligenius.Argument()]\n</code></pre> <p>...that works exactly the same as</p> <pre><code>name: str\n</code></pre> <p>...will come handy later.</p>"},{"location":"tutorial/arguments/optional/#make-an-optional-cli-argument","title":"Make an optional CLI argument","text":"<p>Now, finally what we came for, an optional CLI argument.</p> <p>To make a CLI argument optional, use <code>cligenius.Argument()</code> and pass a different \"default\" as the first parameter to <code>cligenius.Argument()</code>, for example <code>None</code>:</p> <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: Annotated[Optional[str], cligenius.Argument()] = None):\n    if name is None:\n        print(\"Hello World!\")\n    else:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now we have:</p> <pre><code>name: Annotated[Optional[str], cligenius.Argument()] = None\n</code></pre> <p>Because we are using <code>cligenius.Argument()</code> Cligenius will know that this is a CLI argument (no matter if required or optional).</p> <p>Tip</p> <p>By using <code>Optional</code> your editor will be able to know that the value could be <code>None</code>, and will be able to warn you if you do something assuming it is a <code>str</code> that would break if it was <code>None</code>.</p> <p>Check the help:</p> <pre><code>// First check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n\nOptions:\n  --help                Show this message and exit.\n</code></pre> <p>Tip</p> <p>Notice that <code>NAME</code> is still a CLI argument, it's shown up there in the \"<code>Usage: main.py</code> ...\".</p> <p>Also notice that now <code>[NAME]</code> has brackets (\"<code>[</code>\" and \"<code>]</code>\") around (before it was just <code>NAME</code>) to denote that it's optional, not required.</p> <p>Now run it and test it:</p> <pre><code>// With no CLI argument\n$ python main.py\n\nHello World!\n\n// With one optional CLI argument\n$ python main.py Camila\n\nHello Camila\n</code></pre> <p>Tip</p> <p>Notice that \"<code>Camila</code>\" here is an optional CLI argument, not a CLI option, because we didn't use something like \"<code>--name Camila</code>\", we just passed \"<code>Camila</code>\" directly to the program.</p>"},{"location":"tutorial/arguments/optional/#alternative-old-cligeniusargument-as-the-default-value","title":"Alternative (old) <code>cligenius.Argument()</code> as the default value","text":"<p>Cligenius also supports another older alternative syntax for declaring CLI arguments with additional metadata.</p> <p>Instead of using <code>Annotated</code>, you can use <code>cligenius.Argument()</code> as the default value:</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument()):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <p>Before, because <code>name</code> didn't have any default value it would be a required parameter for the Python function, in Python terms.</p> <p>When using <code>cligenius.Argument()</code> as the default value Cligenius does the same and makes it a required CLI argument.</p> <p>We changed it to:</p> <pre><code>name: str = cligenius.Argument()\n</code></pre> <p>But now as <code>cligenius.Argument()</code> is the \"default value\" of the function's parameter, it would mean that \"it is no longer required\" (in Python terms).</p> <p>As we no longer have the Python function default value (or its absence) to tell if something is required or not and what is the default value, <code>cligenius.Argument()</code> receives a first parameter <code>default</code> that serves the same purpose of defining that default value, or making it required.</p> <p>Not passing any value to the <code>default</code> argument is the same as marking it as required. But you can also explicitly mark it as required by passing <code>...</code> as the <code>default</code> argument, passed to <code>cligenius.Argument(default=...)</code>.</p> <pre><code>name: str = cligenius.Argument(default=...)\n</code></pre> <p>Info</p> <p>If you hadn't seen that <code>...</code> before: it is a special single value, it is part of Python and is called \"Ellipsis\".</p> <pre><code>import cligenius\n\n\ndef main(name: str = cligenius.Argument(default=...)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And the same way, you can make it optional by passing a different <code>default</code> value, for example <code>None</code>:</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef main(name: Optional[str] = cligenius.Argument(default=None)):\n    if name is None:\n        print(\"Hello World!\")\n    else:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Because the first parameter passed to <code>cligenius.Argument(default=None)</code> (the new \"default\" value) is <code>None</code>, Cligenius knows that this is an optional CLI argument, if no value is provided when calling it in the command line, it will have that default value of <code>None</code>.</p> <p>The <code>default</code> argument is the first one, so it's possible that you see code that passes the value without explicitly using <code>default=</code>, like:</p> <pre><code>name: str = cligenius.Argument(...)\n</code></pre> <p>...or like:</p> <pre><code>name: str = cligenius.Argument(None)\n</code></pre> <p>...but again, try to use <code>Annotated</code> if possible, that way your code in terms of Python will mean the same thing as with Cligenius and you won't have to remember any of these details.</p>"},{"location":"tutorial/arguments/other-uses/","title":"Other uses","text":"<p><code>cligenius.Argument()</code> has several other use cases. Such as for data validation, to enable other features, etc.</p> <p>You will see about these use cases later in the docs.</p>"},{"location":"tutorial/commands/","title":"Commands Intro","text":"<p>We have seen how to create a CLI program with possibly several CLI options and CLI arguments.</p> <p>But Cligenius allows you to create CLI programs with several commands (also known as subcommands).</p> <p>For example, the program <code>git</code> has several commands.</p> <p>One command of <code>git</code> is <code>git push</code>. And <code>git push</code> in turn takes its own CLI arguments and CLI options.</p> <p>For example:</p> <pre><code>// The push command with no parameters\n$ git push\n\n---&gt; 100%\n\n// The push command with one CLI option --set-upstream and 2 CLI arguments\n$ git push --set-upstream origin master\n\n---&gt; 100%\n</code></pre> <p>Another command of <code>git</code> is <code>git pull</code>, it also has some CLI parameters.</p> <p>It's like if the same big program <code>git</code> had several small programs inside.</p> <p>Tip</p> <p>A command looks the same as a CLI argument, it's just some name without a preceding <code>--</code>. But commands have a predefined name, and are used to group different sets of functionalities into the same CLI application.</p>"},{"location":"tutorial/commands/#command-or-subcommand","title":"Command or subcommand","text":"<p>It's common to call a CLI program a \"command\".</p> <p>But when one of these programs have subcommands, those subcommands are also frequently called just \"commands\".</p> <p>Have that in mind so you don't get confused.</p> <p>Here I'll use CLI application or program to refer to the program you are building in Python with Cligenius, and command to refer to one of these \"subcommands\" of your program.</p>"},{"location":"tutorial/commands/#explicit-application","title":"Explicit application","text":"<p>Before creating CLI applications with multiple commands/subcommands we need to understand how to create an explicit <code>cligenius.Cligenius()</code> application.</p> <p>In the CLI options and CLI argument tutorials you have seen how to create a single function and then pass that function to <code>cligenius.run()</code>.</p> <p>For example:</p> <pre><code>import cligenius\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>But that is actually a shortcut. Under the hood, Cligenius converts that to a CLI application with <code>cligenius.Cligenius()</code> and executes it. All that inside of <code>cligenius.run()</code>.</p> <p>There's also a more explicit way to achieve the same:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>When you use <code>cligenius.run()</code>, Cligenius is doing more or less the same as above, it will:</p> <ul> <li>Create a new <code>cligenius.Cligenius()</code> \"application\".</li> <li>Create a new \"<code>command</code>\" with your function.</li> <li>Call the same \"application\" as if it was a function with \"<code>app()</code>\".</li> </ul> <p><code>@decorator</code> Info</p> <p>That <code>@something</code> syntax in Python is called a \"decorator\".</p> <p>You put it on top of a function. Like a pretty decorative hat (I guess that's where the term came from).</p> <p>A \"decorator\" takes the function below and does something with it.</p> <p>In our case, this decorator tells Cligenius that the function below is a \"<code>command</code>\".</p> <p>Both ways, with <code>cligenius.run()</code> and creating the explicit application, achieve almost the same.</p> <p>Tip</p> <p>If your use case is solved with just <code>cligenius.run()</code>, that's fine, you don't have to create the explicit <code>app</code> and use <code>@app.command()</code>, etc.</p> <p>You might want to do that later when your app needs the extra features, but if it doesn't need them yet, that's fine.</p> <p>If you run the second example, with the explicit <code>app</code>, it works exactly the same:</p> <pre><code>// Without a CLI argument\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n\n// With the NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Asking for help\n$ python main.py  --help\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n</code></pre>"},{"location":"tutorial/commands/#cli-application-completion","title":"CLI application completion","text":"<p>There's a little detail that is worth noting here.</p> <p>Now the help shows two new CLI options:</p> <ul> <li><code>--install-completion</code></li> <li><code>--show-completion</code></li> </ul> <p>To get shell/tab completion, it's necessary to build a package that you and your users can install and call directly.</p> <p>So instead of running a Python script like:</p> <pre><code>$ python main.py\n\n\u2728 Some magic here \u2728\n</code></pre> <p>...It would be called like:</p> <pre><code>$ magic-app\n\n\u2728 Some magic here \u2728\n</code></pre> <p>Having a standalone program like that allows setting up shell/tab completion.</p> <p>The first step to be able to create an installable package like that is to use an explicit <code>cligenius.Cligenius()</code> app.</p> <p>Later you can learn all the process to create a standalone CLI application and Build a Package.</p> <p>But for now, it's just good to know that you are on that path. \ud83d\ude0e</p>"},{"location":"tutorial/commands/#a-cli-application-with-multiple-commands","title":"A CLI application with multiple commands","text":"<p>Coming back to the CLI applications with multiple commands/subcommands, Cligenius allows creating CLI applications with multiple of them.</p> <p>Now that you know how to create an explicit <code>cligenius.Cligenius()</code> application and add one command, let's see how to add multiple commands.</p> <p>Let's say that we have a CLI application to manage users.</p> <p>We'll have a command to <code>create</code> users and another command to <code>delete</code> them.</p> <p>To begin, let's say it can only create and delete one single predefined user:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now we have a CLI application with 2 commands, <code>create</code> and <code>delete</code>:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test them\n$ python main.py create\n\nCreating user: Hiro Hamada\n\n$ python main.py delete\n\nDeleting user: Hiro Hamada\n\n// Now we have 2 commands! \ud83c\udf89\n</code></pre> <p>Notice that the help text now shows the 2 commands: <code>create</code> and <code>delete</code>.</p> <p>Tip</p> <p>By default, the names of the commands are generated from the function name.</p>"},{"location":"tutorial/commands/#show-the-help-message-if-no-command-is-given","title":"Show the help message if no command is given","text":"<p>By default, we need to specify <code>--help</code> to get the command's help page.</p> <p>However, by setting <code>no_args_is_help=True</code> when defining the <code>cligenius.Cligenius()</code> application, the help function will be shown whenever no argument is given:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(no_args_is_help=True)\n\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now we can run this:</p> <pre><code>// Check the help without having to type --help\n$ python main.py\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n</code></pre>"},{"location":"tutorial/commands/#click-group","title":"Click Group","text":"<p>If you come from Click, a <code>cligenius.Cligenius</code> app with subcommands is more or less the equivalent of a Click Group.</p> <p>Technical Details</p> <p>A <code>cligenius.Cligenius</code> app is not a Click Group, but it provides the equivalent functionality. And it creates a Click Group when calling it.</p> <p>It is not directly a Group because Cligenius doesn't modify the functions in your code to convert them to another type of object, it only registers them.</p>"},{"location":"tutorial/commands/#decorator-technical-details","title":"Decorator Technical Details","text":"<p>When you use <code>@app.command()</code> the function under the decorator is registered in the Cligenius application and is then used later by the application.</p> <p>But Cligenius doesn't modify that function itself, the function is left as is.</p> <p>That means that if your function is simple enough that you could create it without using <code>cligenius.Option()</code> or <code>cligenius.Argument()</code>, you could use the same function for a Cligenius application and a ReadyAPI application putting both decorators on top, or similar tricks.</p> <p>Click Technical Details</p> <p>This behavior is a design difference with Click.</p> <p>In Click, when you add a <code>@click.command()</code> decorator it actually modifies the function underneath and replaces it with an object.</p>"},{"location":"tutorial/commands/arguments/","title":"Command CLI Arguments","text":"<p>The same way as with a CLI application with a single command, subcommands (or just \"commands\") can also have their own CLI arguments:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <pre><code>// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\nOptions:\n  --help  Show this message and exit.\n\n// Call it with a CLI argument\n$ python main.py create Camila\n\nCreating user: Camila\n\n// The same for delete\n$ python main.py delete Camila\n\nDeleting user: Camila\n</code></pre> <p>Tip</p> <p>Everything to the right of the command are CLI parameters (CLI arguments and CLI options) for that command.</p> <p>Technical Details</p> <p>Actually, it's everything to the right of that command, before any subcommand.</p> <p>It's possible to have groups of subcommands, it's like if one command also had subcommands. And then those subcommands could have their own CLI parameters, taking their own CLI parameters.</p> <p>You will see about them later in another section.</p>"},{"location":"tutorial/commands/callback/","title":"Cligenius Callback","text":"<p>When you create an <code>app = cligenius.Cligenius()</code> it works as a group of commands.</p> <p>And you can create multiple commands with it.</p> <p>Each of those commands can have their own CLI parameters.</p> <p>But as those CLI parameters are handled by each of those commands, they don't allow us to create CLI parameters for the main CLI application itself.</p> <p>But we can use <code>@app.callback()</code> for that.</p> <p>It's very similar to <code>@app.command()</code>, but it declares the CLI parameters for the main CLI application (before the commands):</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\nstate = {\"verbose\": False}\n\n\n@app.command()\ndef create(username: str):\n    if state[\"verbose\"]:\n        print(\"About to create a user\")\n    print(f\"Creating user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just created a user\")\n\n\n@app.command()\ndef delete(username: str):\n    if state[\"verbose\"]:\n        print(\"About to delete a user\")\n    print(f\"Deleting user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just deleted a user\")\n\n\n@app.callback()\ndef main(verbose: bool = False):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if verbose:\n        print(\"Will write verbose output\")\n        state[\"verbose\"] = True\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Here we create a <code>callback</code> with a <code>--verbose</code> CLI option.</p> <p>Tip</p> <p>After getting the <code>--verbose</code> flag, we modify a global <code>state</code>, and we use it in the other commands.</p> <p>There are other ways to achieve the same, but this will suffice for this example.</p> <p>And as we added a docstring to the callback function, by default it will be extracted and used as the help text.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the main help text, extracted from the callback function: \"Manage users in the awesome CLI app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the awesome CLI app.\n\nOptions:\n  --verbose / --no-verbose  [default: False]\n  --install-completion      Install completion for the current shell.\n  --show-completion         Show completion for the current shell, to copy it or customize the installation.\n  --help                    Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Check the new top level CLI option --verbose\n\n// Try it normally\n$ python main.py create Camila\n\nCreating user: Camila\n\n// And now with --verbose\n$ python main.py --verbose create Camila\n\nWill write verbose output\nAbout to create a user\nCreating user: Camila\nJust created a user\n\n// Notice that --verbose belongs to the callback, it has to go before create or delete \u26d4\ufe0f\n$ python main.py create --verbose Camila\n\nUsage: main.py create [OPTIONS] USERNAME\nTry \"main.py create --help\" for help.\n\nError: No such option: --verbose\n</code></pre>"},{"location":"tutorial/commands/callback/#adding-a-callback-on-creation","title":"Adding a callback on creation","text":"<p>It's also possible to add a callback when creating the <code>cligenius.Cligenius()</code> app:</p> <pre><code>import cligenius\n\n\ndef callback():\n    print(\"Running a command\")\n\n\napp = cligenius.Cligenius(callback=callback)\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>That achieves the same as with <code>@app.callback()</code>.</p> <p>Check it:</p> <pre><code>$ python main.py create Camila\n\nRunning a command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/commands/callback/#overriding-a-callback","title":"Overriding a callback","text":"<p>If you added a callback when creating the <code>cligenius.Cligenius()</code> app, it's possible to override it with <code>@app.callback()</code>:</p> <pre><code>import cligenius\n\n\ndef callback():\n    print(\"Running a command\")\n\n\napp = cligenius.Cligenius(callback=callback)\n\n\n@app.callback()\ndef new_callback():\n    print(\"Override callback, running a command\")\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now <code>new_callback()</code> will be the one used.</p> <p>Check it:</p> <pre><code>$ python main.py create Camila\n\n// Notice that the message is the one from new_callback()\nOverride callback, running a command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/commands/callback/#adding-a-callback-only-for-documentation","title":"Adding a callback only for documentation","text":"<p>You can also add a callback just to add the documentation in the docstring.</p> <p>It can be convenient especially if you have several lines of text, as the indentation will be automatically handled for you:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Manage users CLI app.\n\n    Use it with the create command.\n\n    A new user with the given NAME will be created.\n    \"\"\"\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now the callback will be used mainly to extract the docstring for the help text.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice all the help text extracted from the callback docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users CLI app.\n\n  Use it with the create command.\n\n  A new user with the given NAME will be created.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it just works as normally\n$ python main.py create Camila\n\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/commands/callback/#click-group","title":"Click Group","text":"<p>If you come from Click, this Cligenius callback is the equivalent of the function in a Click Group.</p> <p>For example:</p> <pre><code>import click\n\n@click.group()\ndef cli():\n    pass\n</code></pre> <p>The original function <code>cli</code> would be the equivalent of a Cligenius callback.</p> <p>Technical Details</p> <p>When using Click, it converts that <code>cli</code> variable to a Click <code>Group</code> object. And then the original function no longer exists in that variable.</p> <p>Cligenius doesn't do that, the callback function is not modified, only registered in the <code>cligenius.Cligenius</code> app. This is intentional, it's part of Cligenius's design, to allow having editor auto completion and type checks.</p>"},{"location":"tutorial/commands/context/","title":"Using the Context","text":"<p>When you create a Cligenius application it uses Click underneath. And every Click application has a special object called a \"Context\" that is normally hidden.</p> <p>But you can access the context by declaring a function parameter of type <code>cligenius.Context</code>.</p> <p>You might have read it in CLI Option Callback and Context.</p> <p>The same way, in commands or in the main <code>Cligenius</code> callback you can access the context by declaring a function parameter of type <code>cligenius.Context</code>.</p>"},{"location":"tutorial/commands/context/#getting-the-context","title":"Getting the context","text":"<p>For example, let's say that you want to execute some logic in a <code>Cligenius</code> callback depending on the subcommand that is being called.</p> <p>You can get the name of the subcommand from the context:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\n\n@app.callback()\ndef main(ctx: cligenius.Context):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    print(f\"About to execute command: {ctx.invoked_subcommand}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py create Camila\n\n// We get the message from the callback\nAbout to execute command: create\nCreating user: Camila\n\n$ python main.py delete Camila\n\n// We get the message from the callback, this time with delete\nAbout to execute command: delete\nDeleting user: Camila\n</code></pre>"},{"location":"tutorial/commands/context/#executable-callback","title":"Executable callback","text":"<p>By default, the callback is only executed right before executing a command.</p> <p>And if no command is provided, the help message is shown.</p> <p>But we could make it run even without a subcommand with <code>invoke_without_command=True</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\n\n@app.callback(invoke_without_command=True)\ndef main():\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    print(\"Initializing database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\n// The callback is executed, we don't get the default help message\nInitializing database\n\n// Try with a command\n$ python main.py create Camila\n\n// The callback is still executed\nInitializing database\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/commands/context/#exclusive-executable-callback","title":"Exclusive executable callback","text":"<p>We might not want the callback to be executed if there's already other command that will be executed.</p> <p>For that, we can get the <code>cligenius.Context</code> and check if there's an invoked command in <code>ctx.invoked_subcommand</code>.</p> <p>If it's <code>None</code>, it means that we are not calling a subcommand but the main program (the callback) directly:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\n\n@app.callback(invoke_without_command=True)\ndef main(ctx: cligenius.Context):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        print(\"Initializing database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\n// The callback is executed\nInitializing database\n\n// Check it with a subcommand\n$ python main.py create Camila\n\n// This time the callback is not executed\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/commands/context/#configuring-the-context","title":"Configuring the context","text":"<p>You can pass configurations for the context when creating a command or callback.</p> <p>To read more about the available configurations check the docs for Click's <code>Context</code>.</p> <p>For example, you could keep additional CLI parameters not declared in your CLI program with <code>ignore_unknown_options</code> and <code>allow_extra_args</code>.</p> <p>Then you can access those extra raw CLI parameters as a <code>list</code> of <code>str</code> in <code>ctx.args</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command(\n    context_settings={\"allow_extra_args\": True, \"ignore_unknown_options\": True}\n)\ndef main(ctx: cligenius.Context):\n    for extra_arg in ctx.args:\n        print(f\"Got extra arg: {extra_arg}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <pre><code>$ python main.py --name Camila --city Berlin\n\nGot extra arg: --name\nGot extra arg: Camila\nGot extra arg: --city\nGot extra arg: Berlin\n</code></pre> <p>Tip</p> <p>Notice that it saves all the extra CLI parameters as a raw <code>list</code> of <code>str</code>, including the CLI option names and values, everything together.</p>"},{"location":"tutorial/commands/help/","title":"Command Help","text":"<p>The same as before, you can add help for the commands in the docstrings and the CLI options.</p> <p>And the <code>cligenius.Cligenius()</code> application receives a parameter <code>help</code> that you can pass with the main help text for your CLI program:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius(help=\"Awesome CLI user manager.\")\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: Annotated[\n        bool,\n        cligenius.Option(\n            prompt=\"Are you sure you want to delete the user?\",\n            help=\"Force deletion without confirmation.\",\n        ),\n    ],\n):\n    \"\"\"\n    Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: Annotated[\n        bool,\n        cligenius.Option(\n            prompt=\"Are you sure you want to delete ALL users?\",\n            help=\"Force deletion without confirmation.\",\n        ),\n    ],\n):\n    \"\"\"\n    Delete ALL users in the database.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    \"\"\"\n    Initialize the users database.\n    \"\"\"\n    print(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(help=\"Awesome CLI user manager.\")\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: bool = cligenius.Option(\n        ...,\n        prompt=\"Are you sure you want to delete the user?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: bool = cligenius.Option(\n        ...,\n        prompt=\"Are you sure you want to delete ALL users?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete ALL users in the database.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    \"\"\"\n    Initialize the users database.\n    \"\"\"\n    print(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>// Check the new help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome CLI user manager.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create      Create a new user with USERNAME.\n  delete      Delete a user with USERNAME.\n  delete-all  Delete ALL users in the database.\n  init        Initialize the users database.\n\n// Now the commands have inline help \ud83c\udf89\n\n// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\n  Create a new user with USERNAME.\n\nOptions:\n  --help  Show this message and exit.\n\n// Check the help for delete\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\n  Delete a user with USERNAME.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n\n// Check the help for delete-all\n$ python main.py delete-all --help\n\nUsage: main.py delete-all [OPTIONS]\n\n  Delete ALL users in the database.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n\n// Check the help for init\n$ python main.py init --help\n\nUsage: main.py init [OPTIONS]\n\n  Initialize the users database.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre> <p>Tip</p> <p><code>cligenius.Cligenius()</code> receives several other parameters for other things, we'll see that later.</p> <p>You will also see how to use \"Callbacks\" later, and those include a way to add this same help message in a function docstring.</p>"},{"location":"tutorial/commands/help/#overwrite-command-help","title":"Overwrite command help","text":"<p>You will probably be better adding the help text as a docstring to your functions, but if for some reason you wanted to overwrite it, you can use the <code>help</code> function argument passed to <code>@app.command()</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command(help=\"Create a new user with USERNAME.\")\ndef create(username: str):\n    \"\"\"\n    Some internal utility function to create.\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(help=\"Delete a user with USERNAME.\")\ndef delete(username: str):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice it uses the help passed to @app.command()\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy\n                        it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create  Create a new user with USERNAME.\n  delete  Delete a user with USERNAME.\n\n// It uses \"Create a new user with USERNAME.\" instead of \"Some internal utility function to create.\"\n</code></pre>"},{"location":"tutorial/commands/help/#deprecate-a-command","title":"Deprecate a Command","text":"<p>There could be cases where you have a command in your app that you need to deprecate, so that your users stop using it, even while it's still supported for a while.</p> <p>You can mark it with the parameter <code>deprecated=True</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    Create a user.\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(deprecated=True)\ndef delete(username: str):\n    \"\"\"\n    Delete a user.\n\n    This is deprecated and will stop being supported soon.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And when you show the <code>--help</code> option you will see it's marked as \"<code>deprecated</code>\":</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] COMMAND [ARGS]...                  &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;          Install completion for the current  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell.                              \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;             Show completion for the current     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell, to copy it or customize the  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               installation.                       \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message and exit.         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;create       &lt;/b&gt;&lt;/font&gt; Create a user.                                      \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#6B9F98\"&gt;&lt;b&gt;delete       &lt;/b&gt;&lt;/font&gt; Delete a user.              &lt;font color=\"#F92672\"&gt;(deprecated)           &lt;/font&gt; \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>And if you check the <code>--help</code> for the deprecated command (in this example, the command <code>delete</code>), it also shows it as deprecated:</p> <pre><code>$ python main.py delete --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py delete [OPTIONS] USERNAME                    &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;font color=\"#F92672\"&gt;(deprecated) &lt;/font&gt;\n Delete a user.\n This is deprecated and will stop being supported soon.\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;          Show this message and exit.                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/commands/help/#rich-markdown-and-markup","title":"Rich Markdown and Markup","text":"<p>If you have Rich installed as described in Printing and Colors, you can configure your app to enable markup text with the parameter <code>rich_markup_mode</code>.</p> <p>Then you can use more formatting in the docstrings and the <code>help</code> parameter for CLI arguments and CLI options. You will see more about it below. \ud83d\udc47</p> <p>Info</p> <p>By default, <code>rich_markup_mode</code> is <code>None</code>, which disables any rich text formatting.</p>"},{"location":"tutorial/commands/help/#rich-markup","title":"Rich Markup","text":"<p>If you set <code>rich_markup_mode=\"rich\"</code> when creating the <code>cligenius.Cligenius()</code> app, you will be able to use Rich Console Markup in the docstring, and even in the help for the CLI arguments and options:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command()\ndef create(\n    username: Annotated[\n        str, cligenius.Argument(help=\"The username to be [green]created[/green]\")\n    ],\n):\n    \"\"\"\n    [bold green]Create[/bold green] a new [italic]shinny[/italic] user. :sparkles:\n\n    This requires a [underline]username[/underline].\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(help=\"[bold red]Delete[/bold red] a user with [italic]USERNAME[/italic].\")\ndef delete(\n    username: Annotated[\n        str, cligenius.Argument(help=\"The username to be [red]deleted[/red]\")\n    ],\n    force: Annotated[\n        bool, cligenius.Option(help=\"Force the [bold red]deletion[/bold red] :boom:\")\n    ] = False,\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command()\ndef create(\n    username: str = cligenius.Argument(\n        ..., help=\"The username to be [green]created[/green]\"\n    ),\n):\n    \"\"\"\n    [bold green]Create[/bold green] a new [italic]shiny[/italic] user. :sparkles:\n\n    This requires a [underline]username[/underline].\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(help=\"[bold red]Delete[/bold red] a user with [italic]USERNAME[/italic].\")\ndef delete(\n    username: str = cligenius.Argument(\n        ..., help=\"The username to be [red]deleted[/red]\"\n    ),\n    force: bool = cligenius.Option(\n        False, help=\"Force the [bold red]deletion[/bold red] :boom:\"\n    ),\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>With that, you can use Rich Console Markup to format the text in the docstring for the command <code>create</code>, make the word \"<code>create</code>\" bold and green, and even use an emoji.</p> <p>You can also use markup in the help for the <code>username</code> CLI Argument.</p> <p>And the same as before, the help text overwritten for the command <code>delete</code> can also use Rich Markup, the same in the CLI Argument and CLI Option.</p> <p>If you run the program and check the help, you will see that Cligenius uses Rich internally to format the help.</p> <p>Check the help for the <code>create</code> command:</p> <pre><code>$ python main.py create --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py create [OPTIONS] USERNAME                     &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;font color=\"#A6E22E\"&gt;&lt;b&gt;Create&lt;/b&gt;&lt;/font&gt; a new &lt;i&gt;shiny&lt;/i&gt; user. \u2728\n This requires a &lt;font color=\"#A5A5A1\"&gt;&lt;u style=\"text-decoration-style:single\"&gt;username&lt;/u&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt;.                                           &lt;/font&gt;\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  The username to be &lt;font color=\"#A6E22E\"&gt;created&lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          [default: None]                          \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          &lt;/font&gt;&lt;font color=\"#A6194C\"&gt;[required]                &lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;          Show this message and exit.                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>And check the help for the <code>delete</code> command:</p> <pre><code>$ python main.py delete --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py delete [OPTIONS] USERNAME                     &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;font color=\"#F92672\"&gt;&lt;b&gt;Delete&lt;/b&gt;&lt;/font&gt; a user with &lt;i&gt;USERNAME&lt;/i&gt;.\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  The username to be &lt;font color=\"#F92672\"&gt;deleted&lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          [default: None]                          \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          &lt;/font&gt;&lt;font color=\"#A6194C\"&gt;[required]                &lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--force&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-force&lt;/b&gt;&lt;/font&gt;      Force the &lt;font color=\"#F92672\"&gt;&lt;b&gt;deletion&lt;/b&gt;&lt;/font&gt; \ud83d\udca5                  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                            [default: no-force]                    \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                     Show this message and exit.            \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/commands/help/#rich-markdown","title":"Rich Markdown","text":"<p>If you set <code>rich_markup_mode=\"markdown\"</code> when creating the <code>cligenius.Cligenius()</code> app, you will be able to use Markdown in the docstring:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius(rich_markup_mode=\"markdown\")\n\n\n@app.command()\ndef create(\n    username: Annotated[str, cligenius.Argument(help=\"The username to be **created**\")],\n):\n    \"\"\"\n    **Create** a new *shinny* user. :sparkles:\n\n    * Create a username\n\n    * Show that the username is created\n\n    ---\n\n    Learn more at the [Cligenius docs website](https://cligenius.khulnasoft.com)\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(help=\"**Delete** a user with *USERNAME*.\")\ndef delete(\n    username: Annotated[str, cligenius.Argument(help=\"The username to be **deleted**\")],\n    force: Annotated[\n        bool, cligenius.Option(help=\"Force the **deletion** :boom:\")\n    ] = False,\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(rich_markup_mode=\"markdown\")\n\n\n@app.command()\ndef create(\n    username: str = cligenius.Argument(..., help=\"The username to be **created**\"),\n):\n    \"\"\"\n    **Create** a new *shiny* user. :sparkles:\n\n    * Create a username\n\n    * Show that the username is created\n\n    ---\n\n    Learn more at the [Cligenius docs website](https://cligenius.khulnasoft.com)\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(help=\"**Delete** a user with *USERNAME*.\")\ndef delete(\n    username: str = cligenius.Argument(..., help=\"The username to be **deleted**\"),\n    force: bool = cligenius.Option(False, help=\"Force the **deletion** :boom:\"),\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>With that, you can use Markdown to format the text in the docstring for the command <code>create</code>, make the word \"<code>create</code>\" bold, show a list of items, and even use an emoji.</p> <p>And the same as before, the help text overwritten for the command <code>delete</code> can also use Markdown.</p> <p>Check the help for the <code>create</code> command:</p> <pre><code>$ python main.py create --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py create [OPTIONS] USERNAME                     &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;b&gt;Create&lt;/b&gt; a new &lt;i&gt;shiny&lt;/i&gt; user. \u2728\n\n &lt;font color=\"#F4BF75\"&gt;&lt;b&gt; \u2022 &lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt;Create a username                                                &lt;/font&gt;\n &lt;font color=\"#F4BF75\"&gt;&lt;b&gt; \u2022 &lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt;Show that the username is created                                &lt;/font&gt;\n\n &lt;font color=\"#F4BF75\"&gt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&lt;/font&gt;\n Learn more at the &lt;font color=\"#44919F\"&gt;Cligenius docs website&lt;/font&gt;\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  The username to be &lt;b&gt;created&lt;/b&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          [default: None]                          \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          &lt;/font&gt;&lt;font color=\"#A6194C\"&gt;[required]                              &lt;/font&gt; \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;          Show this message and exit.                       \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>And the same for the <code>delete</code> command:</p> <pre><code>$ python main.py delete --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py delete [OPTIONS] USERNAME                     &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;b&gt;Delete&lt;/b&gt; a user with &lt;i&gt;USERNAME&lt;/i&gt;.\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  The username to be &lt;b&gt;deleted&lt;/b&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          [default: None]                          \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          &lt;/font&gt;&lt;font color=\"#A6194C\"&gt;[required]                              &lt;/font&gt; \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--force&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-force&lt;/b&gt;&lt;/font&gt;      Force the &lt;b&gt;deletion&lt;/b&gt; \ud83d\udca5                  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                            [default: no-force]                    \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                     Show this message and exit.            \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Info</p> <p>Notice that in Markdown you cannot define colors. For colors you might prefer to use Rich markup.</p>"},{"location":"tutorial/commands/help/#help-panels","title":"Help Panels","text":"<p>If you have many commands or CLI parameters, you might want to show their documentation in different panels when using the <code>--help</code> option.</p> <p>If you installed Rich as described in Printing and Colors, you can configure the panel to use for each command or CLI parameter.</p>"},{"location":"tutorial/commands/help/#help-panels-for-commands","title":"Help Panels for Commands","text":"<p>To set the panel for a command you can pass the argument <code>rich_help_panel</code> with the name of the panel you want to use:</p> Python 3.7+ <pre><code>import cligenius\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"\n    [red]Delete[/red] a user. :fire:\n    \"\"\"\n    print(f\"Deleting user: {username}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef sync():\n    \"\"\"\n    [blue]Synchronize[/blue] the system or something fancy like that. :recycle:\n    \"\"\"\n    print(\"Syncing the system\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef help():\n    \"\"\"\n    Get [yellow]help[/yellow] with the system. :question:\n    \"\"\"\n    print(\"Opening help portal...\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef report():\n    \"\"\"\n    [yellow]Report[/yellow] an issue. :bug:\n    \"\"\"\n    print(\"Please open a new issue online, not a direct message\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Commands without a panel will be shown in the default panel <code>Commands</code>, and the rest will be shown in the next panels:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] COMMAND [ARGS]...                   &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;          Install completion for the current  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell.                              \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;             Show completion for the current     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell, to copy it or customize the  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               installation.                       \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message and exit.         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;create          &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;Create&lt;/font&gt; a new user. \u2728                            \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;delete          &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F92672\"&gt;Delete&lt;/font&gt; a user. \ud83d\udd25                                \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Utils and Configs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;config  &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#66D9EF\"&gt;Configure&lt;/font&gt; the system. \ud83d\udd27                                 \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;sync    &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#66D9EF\"&gt;Synchronize&lt;/font&gt; the system or something fancy like that. \u267b   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Help and Others \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;help         &lt;/b&gt;&lt;/font&gt; Get &lt;font color=\"#F4BF75\"&gt;help&lt;/font&gt; with the system. \u2753                        \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;report       &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#F4BF75\"&gt;Report&lt;/font&gt; an issue. \ud83d\udc1b                                 \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/commands/help/#help-panels-for-cli-parameters","title":"Help Panels for CLI Parameters","text":"<p>The same way, you can configure the panels for CLI arguments and CLI options with <code>rich_help_panel</code>.</p> <p>And of course, in the same application you can also set the <code>rich_help_panel</code> for commands.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Union\n\nimport cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command()\ndef create(\n    username: Annotated[str, cligenius.Argument(help=\"The username to create\")],\n    lastname: Annotated[\n        str,\n        cligenius.Argument(\n            help=\"The last name of the new user\", rich_help_panel=\"Secondary Arguments\"\n        ),\n    ] = \"\",\n    force: Annotated[\n        bool, cligenius.Option(help=\"Force the creation of the user\")\n    ] = False,\n    age: Annotated[\n        Union[int, None],\n        cligenius.Option(\n            help=\"The age of the new user\", rich_help_panel=\"Additional Data\"\n        ),\n    ] = None,\n    favorite_color: Annotated[\n        Union[str, None],\n        cligenius.Option(\n            help=\"The favorite color of the new user\",\n            rich_help_panel=\"Additional Data\",\n        ),\n    ] = None,\n):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nimport cligenius\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command()\ndef create(\n    username: str = cligenius.Argument(..., help=\"The username to create\"),\n    lastname: str = cligenius.Argument(\n        \"\", help=\"The last name of the new user\", rich_help_panel=\"Secondary Arguments\"\n    ),\n    force: bool = cligenius.Option(False, help=\"Force the creation of the user\"),\n    age: Union[int, None] = cligenius.Option(\n        None, help=\"The age of the new user\", rich_help_panel=\"Additional Data\"\n    ),\n    favorite_color: Union[str, None] = cligenius.Option(\n        None,\n        help=\"The favorite color of the new user\",\n        rich_help_panel=\"Additional Data\",\n    ),\n):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Then if you run the application you will see all the CLI parameters in their respective panels.</p> <ul> <li>First the CLI arguments that don't have a panel name set in a default one named \"<code>Arguments</code>\".</li> <li>Next the CLI arguments with a custom panel. In this example named \"<code>Secondary Arguments</code>\".</li> <li>After that, the CLI options that don't have a panel in a default one named \"<code>Options</code>\".</li> <li>And finally, the CLI options with a custom panel set. In this example named \"<code>Additional Data</code>\".</li> </ul> <p>You can check the <code>--help</code> option for the command <code>create</code>:</p> <pre><code>$ python main.py create --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py create [OPTIONS] USERNAME [LASTNAME]          &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;font color=\"#A6E22E\"&gt;Create&lt;/font&gt; a new user. \u2728\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  The username to create [default: None]   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                          &lt;/font&gt;&lt;font color=\"#A6194C\"&gt;[required]            &lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Secondary Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502   lastname      &lt;/font&gt;&lt;font color=\"#A37F4E\"&gt;&lt;b&gt;[LASTNAME]&lt;/b&gt;&lt;/font&gt;  The last name of the new user         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--force&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-force&lt;/b&gt;&lt;/font&gt;      Force the creation of the user         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                            [default: no-force]                    \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                     Show this message and exit.            \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Additional Data \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--age&lt;/b&gt;&lt;/font&gt;                   &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;INTEGER&lt;/b&gt;&lt;/font&gt;  The age of the new user          \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                  [default: None]                  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--favorite-color&lt;/b&gt;&lt;/font&gt;        &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT   &lt;/b&gt;&lt;/font&gt;  The favorite color of the new    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                  user                             \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                                  [default: None]                  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>And of course, the <code>rich_help_panel</code> can be used in the same way for commands in the same application.</p> <p>And those panels will be shown when you use the main <code>--help</code> option.</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] COMMAND [ARGS]...                   &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;          Install completion for the current  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell.                              \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;             Show completion for the current     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell, to copy it or customize the  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               installation.                       \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message and exit.         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;create          &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#A6E22E\"&gt;Create&lt;/font&gt; a new user. \u2728                            \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Utils and Configs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;config         &lt;/b&gt;&lt;/font&gt; &lt;font color=\"#66D9EF\"&gt;Configure&lt;/font&gt; the system. \ud83d\udd27                          \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>You can see the custom panel for the commands for \"<code>Utils and Configs</code>\".</p>"},{"location":"tutorial/commands/help/#epilog","title":"Epilog","text":"<p>If you need, you can also add an epilog section to the help of your commands:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius(rich_markup_mode=\"rich\")\n\n\n@app.command(epilog=\"Made with :heart: in [blue]Venus[/blue]\")\ndef create(username: str):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And when you check the <code>--help</code> option it will look like:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] USERNAME                            &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n &lt;font color=\"#A6E22E\"&gt;Create&lt;/font&gt; a new user. \u2728\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    username      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;               \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--install-completion&lt;/b&gt;&lt;/font&gt;          Install completion for the current  \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell.                              \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--show-completion&lt;/b&gt;&lt;/font&gt;             Show completion for the current     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               shell, to copy it or customize the  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502                               installation.                       \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                        Show this message and exit.         \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n Made with \u2764 in &lt;font color=\"#66D9EF\"&gt;Venus&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/commands/name/","title":"Custom Command Name","text":"<p>By default, the command names are generated from the function name.</p> <p>So, if your function is something like:</p> <pre><code>def create(username: str):\n    ...\n</code></pre> <p>Then the command name will be <code>create</code>.</p> <p>But if you already had a function called <code>create()</code> somewhere in your code, you would have to name your CLI function differently.</p> <p>And what if you wanted the command to still be named <code>create</code>?</p> <p>For this, you can set the name of the command in the first parameter for the <code>@app.command()</code> decorator:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command(\"create\")\ndef cli_create_user(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command(\"delete\")\ndef cli_delete_user(username: str):\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now, even though the functions are named <code>cli_create_user()</code> and <code>cli_delete_user()</code>, the commands will still be named <code>create</code> and <code>delete</code>:</p> <pre><code>$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test it\n$ python main.py create Camila\n\nCreating user: Camila\n</code></pre> <p>Note that any underscores in the function name will be replaced with dashes.</p> <p>So if your function is something like:</p> <p><pre><code>def create_user(username: str):\n    ...\n</code></pre> Then the command name will be <code>create-user</code>.</p>"},{"location":"tutorial/commands/one-or-multiple/","title":"One or Multiple Commands","text":"<p>You might have noticed that if you create a single command, as in the first example:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Cligenius is smart enough to create a CLI application with that single function as the main CLI application, not as a command/subcommand:</p> <pre><code>// Without a CLI argument\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n\n// With the NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Asking for help\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n</code></pre> <p>Tip</p> <p>Notice that it doesn't show a command <code>main</code>, even though the function name is <code>main</code>.</p> <p>But if you add multiple commands, Cligenius will create one CLI command for each one of them:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Here we have 2 commands <code>create</code> and <code>delete</code>:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test the commands\n$ python main.py create\n\nCreating user: Hiro Hamada\n\n$ python main.py delete\n\nDeleting user: Hiro Hamada\n</code></pre>"},{"location":"tutorial/commands/one-or-multiple/#one-command-and-one-callback","title":"One command and one callback","text":"<p>If you want to create a CLI app with one single command but you still want it to be a command/subcommand you can just add a callback:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n\n@app.callback()\ndef callback():\n    pass\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now your CLI program will have a single command.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the single command create\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// Try it\n$ python main.py create\n\nCreating user: Hiro Hamada\n</code></pre>"},{"location":"tutorial/commands/one-or-multiple/#using-the-callback-to-document","title":"Using the callback to document","text":"<p>Now that you are using a callback just to have a single command, you might as well use it to add documentation for your app:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Creates a single user Hiro Hamada.\n\n    In the next version it will create 5 users more.\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now the docstring from the callback will be used as the help text:</p> <pre><code>$ python main.py --help\n\n// Notice the help text from the docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Creates a single user Hiro Hamada.\n\n  In the next version it will create 5 users more.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it still works the same, the callback does nothing\n$ python main.py create\n\nCreating user: Hiro Hamada\n</code></pre>"},{"location":"tutorial/commands/options/","title":"Command CLI Options","text":"<p>Commands can also have their own CLI options.</p> <p>In fact, each command can have different CLI arguments and CLI options:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: Annotated[\n        bool, cligenius.Option(prompt=\"Are you sure you want to delete the user?\")\n    ],\n):\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: Annotated[\n        bool, cligenius.Option(prompt=\"Are you sure you want to delete ALL users?\")\n    ],\n):\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    print(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: bool = cligenius.Option(\n        ..., prompt=\"Are you sure you want to delete the user?\"\n    ),\n):\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: bool = cligenius.Option(\n        ..., prompt=\"Are you sure you want to delete ALL users?\"\n    ),\n):\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    print(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Here we have multiple commands, with different CLI parameters:</p> <ul> <li><code>create</code>:<ul> <li><code>username</code>: a CLI argument.</li> </ul> </li> <li><code>delete</code>:<ul> <li><code>username</code>: a CLI argument.</li> <li><code>--force</code>: a CLI option, if not provided, it's prompted.</li> </ul> </li> <li><code>delete-all</code>:<ul> <li><code>--force</code>: a CLI option, if not provided, it's prompted.</li> </ul> </li> <li><code>init</code>:<ul> <li>Doesn't take any CLI parameters.</li> </ul> </li> </ul> <pre><code>// Check the help\npython main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n  delete-all\n  info\n</code></pre> <p>Tip</p> <p>Check the command <code>delete-all</code>, by default command names are generated from the function name, replacing <code>_</code> with <code>-</code>.</p> <p>Test it:</p> <pre><code>// Check the command create\n$ python main.py create Camila\n\nCreating user: Camila\n\n// Now test the command delete\n$ python main.py delete Camila\n\n# Are you sure you want to delete the user? [y/n]: $ y\n\nDeleting user: Camila\n\n$ python main.py delete Wade\n\n# Are you sure you want to delete the user? [y/n]: $ n\n\nOperation cancelled\n\n// And finally, the command delete-all\n// Notice it doesn't have CLI arguments, only a CLI option\n\n$ python main.py delete-all\n\n# Are you sure you want to delete ALL users? [y/n]: $ y\n\nDeleting all users\n\n$ python main.py delete-all\n\n# Are you sure you want to delete ALL users? [y/n]: $ n\n\nOperation cancelled\n\n// And if you pass the --force CLI option, it doesn't need to confirm\n\n$ python main.py delete-all --force\n\nDeleting all users\n\n// And init that doesn't take any CLI parameter\n$ python main.py init\n\nInitializing user database\n</code></pre>"},{"location":"tutorial/multiple-values/","title":"Multiple Values Intro","text":"<p>There are several ways to declare multiple values for CLI options and CLI arguments.</p> <p>We'll see them in the next short sections.</p>"},{"location":"tutorial/multiple-values/arguments-with-multiple-values/","title":"CLI Arguments with Multiple Values","text":"<p>CLI arguments can also receive multiple values.</p> <p>You can define the type of a CLI argument using <code>typing.List</code>.</p> <pre><code>from pathlib import Path\nfrom typing import List\n\nimport cligenius\n\n\ndef main(files: List[Path], celebration: str):\n    for path in files:\n        if path.is_file():\n            print(f\"This file exists: {path.name}\")\n            print(celebration)\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then you can pass it as many CLI arguments of that type as you want:</p> <pre><code>$ python main.py ./index.md ./first-steps.md woohoo!\n\nThis file exists: index.md\nwoohoo!\nThis file exists: first-steps.md\nwoohoo!\n</code></pre> <p>Tip</p> <p>We also declared a final CLI argument <code>celebration</code>, and it's correctly used even if we pass an arbitrary number of <code>files</code> first.</p> <p>Info</p> <p>A <code>List</code> can only be used in the last command (if there are subcommands), as this will take anything to the right and assume it's part of the expected CLI arguments.</p>"},{"location":"tutorial/multiple-values/arguments-with-multiple-values/#cli-arguments-with-tuples","title":"CLI arguments with tuples","text":"<p>If you want a specific number of values and types, you can use a tuple, and it can even have default values:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Tuple\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    names: Annotated[\n        Tuple[str, str, str],\n        cligenius.Argument(help=\"Select 3 characters to play with\"),\n    ] = (\"Harry\", \"Hermione\", \"Ron\"),\n):\n    for name in names:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Tuple\n\nimport cligenius\n\n\ndef main(\n    names: Tuple[str, str, str] = cligenius.Argument(\n        (\"Harry\", \"Hermione\", \"Ron\"), help=\"Select 3 characters to play with\"\n    ),\n):\n    for name in names:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAMES]...\n\nArguments:\n  [NAMES]...  Select 3 characters to play with  [default: Harry, Hermione, Ron]\n\nOptions:\n  --help                Show this message and exit.\n\n// Use it with its defaults\n$ python main.py\n\nHello Harry\nHello Hermione\nHello Ron\n\n// If you pass an invalid number of arguments you will get an error\n$ python main.py Draco Hagrid\n\nError: Argument 'names' takes 3 values\n\n// And if you pass the exact number of values it will work correctly\n$ python main.py Draco Hagrid Dobby\n\nHello Draco\nHello Hagrid\nHello Dobby\n</code></pre>"},{"location":"tutorial/multiple-values/multiple-options/","title":"Multiple CLI Options","text":"<p>You can declare a CLI option that can be used multiple times, and then get all the values.</p> <p>For example, let's say you want to accept several users in a single execution.</p> <p>For this, use the standard Python <code>typing.List</code> to declare it as a <code>list</code> of <code>str</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List, Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(user: Annotated[Optional[List[str]], cligenius.Option()] = None):\n    if not user:\n        print(f\"No provided users (raw input = {user})\")\n        raise cligenius.Abort()\n    for u in user:\n        print(f\"Processing user: {u}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Optional\n\nimport cligenius\n\n\ndef main(user: Optional[List[str]] = cligenius.Option(None)):\n    if not user:\n        print(f\"No provided users (raw input = {user})\")\n        raise cligenius.Abort()\n    for u in user:\n        print(f\"Processing user: {u}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>You will receive the values as you declared them, as a <code>list</code> of <code>str</code>.</p> <p>Check it:</p> <pre><code>// The default value is 'None'\n$ python main.py\n\nNo provided users (raw input = None)\nAborted!\n\n// Now pass a user\n$ python main.py --user Camila\n\nProcessing user: Camila\n\n// And now try with several users\n$ python main.py --user Camila --user Rick --user Morty\n\nProcessing user: Camila\nProcessing user: Rick\nProcessing user: Morty\n</code></pre>"},{"location":"tutorial/multiple-values/multiple-options/#multiple-float","title":"Multiple <code>float</code>","text":"<p>The same way, you can use other types and they will be converted by Cligenius to their declared type:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import List\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(number: Annotated[List[float], cligenius.Option()] = []):\n    print(f\"The sum is {sum(number)}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nimport cligenius\n\n\ndef main(number: List[float] = cligenius.Option([])):\n    print(f\"The sum is {sum(number)}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py\n\nThe sum is 0\n\n// Try with some numbers\n$ python main.py --number 2\n\nThe sum is 2.0\n\n// Try with some numbers\n$ python main.py --number 2 --number 3 --number 4.5\n\nThe sum is 9.5\n</code></pre>"},{"location":"tutorial/multiple-values/options-with-multiple-values/","title":"CLI Options with Multiple Values","text":"<p>You can also declare a CLI option that takes several values of different types.</p> <p>You can set the number of values and types to anything you want, but it has to be a fixed number of values.</p> <p>For this, use the standard Python <code>typing.Tuple</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Tuple\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    user: Annotated[Tuple[str, int, bool], cligenius.Option()] = (None, None, None),\n):\n    username, coins, is_wizard = user\n    if not username:\n        print(\"No user provided\")\n        raise cligenius.Abort()\n    print(f\"The username {username} has {coins} coins\")\n    if is_wizard:\n        print(\"And this user is a wizard!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Tuple\n\nimport cligenius\n\n\ndef main(user: Tuple[str, int, bool] = cligenius.Option((None, None, None))):\n    username, coins, is_wizard = user\n    if not username:\n        print(\"No user provided\")\n        raise cligenius.Abort()\n    print(f\"The username {username} has {coins} coins\")\n    if is_wizard:\n        print(\"And this user is a wizard!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Each of the internal types defines the type of each value in the tuple.</p> <p>So:</p> <pre><code>user: Tuple[str, int, bool]\n</code></pre> <p>means that the parameter <code>user</code> is a tuple of 3 values.</p> <ul> <li>The first value is a <code>str</code>.</li> <li>The second value is an <code>int</code>.</li> <li>The third value is a <code>bool</code>.</li> </ul> <p>Later we do:</p> <pre><code>username, coins, is_wizard = user\n</code></pre> <p>If you hadn't seen that, it means that <code>user</code> is a tuple with 3 values, and we are assigning each of the values to a new variable:</p> <ul> <li>The first value in the tuple <code>user</code> (a <code>str</code>) goes to the variable <code>username</code>.</li> <li>The second value in the tuple <code>user</code> (an <code>int</code>) goes to the variable <code>coins</code>.</li> <li>The third value in the tuple <code>user</code> (a <code>bool</code>) goes to the variable <code>is_wizard</code>.</li> </ul> <p>So, this:</p> <pre><code>username, coins, is_wizard = user\n</code></pre> <p>is equivalent to this:</p> <pre><code>username = user[0]\ncoins = user[1]\nis_wizard = user[2]\n</code></pre> <p>Tip</p> <p>Notice that the default is a tuple with <code>(None, None, None)</code>.</p> <p>You cannot simply use <code>None</code> here as the default because Click doesn't support it.</p>"},{"location":"tutorial/multiple-values/options-with-multiple-values/#check-it","title":"Check it","text":"<p>Now let's see how this works in the terminal:</p> <pre><code>// check the help\n$ python main.py --help\n\n// Notice the &amp;lt;TEXT INTEGER BOOLEAN&amp;gt;\nUsage: main.py [OPTIONS]\n\nOptions:\n  --user &amp;lt;TEXT INTEGER BOOLEAN&amp;gt;...\n  --help                          Show this message and exit.\n\n// Now try it\n$ python main.py --user Camila 50 yes\n\nThe username Camila has 50 coins\nAnd this user is a wizard!\n\n// With other values\n$ python main.py --user Morty 3 no\n\nThe username Morty has 3 coins\n\n// Try with invalid values (not enough)\n$ python main.py --user Camila 50\n\nError: Option '--user' requires 3 arguments\n</code></pre>"},{"location":"tutorial/options/","title":"CLI Options Intro","text":"<p>In the next short sections we will see how to modify CLI options using <code>cligenius.Option()</code>.</p> <p><code>cligenius.Option()</code> works very similarly to <code>cligenius.Argument()</code>, but has some extra features that we'll see next.</p>"},{"location":"tutorial/options/callback-and-context/","title":"CLI Option Callback and Context","text":"<p>In some occasions you might want to have some custom logic for a specific CLI parameter (for a CLI option  or CLI argument) that is executed with the value received from the terminal.</p> <p>In those cases you can use a CLI parameter callback function.</p>"},{"location":"tutorial/options/callback-and-context/#validate-cli-parameters","title":"Validate CLI parameters","text":"<p>For example, you could do some validation before the rest of the code is executed.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: Annotated[Optional[str], cligenius.Option(callback=name_callback)] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: Optional[str] = cligenius.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Here you pass a function to <code>cligenius.Option()</code> or <code>cligenius.Argument()</code> with the keyword argument <code>callback</code>.</p> <p>The function receives the value from the command line. It can do anything with it, and then return the value.</p> <p>In this case, if the <code>--name</code> is not <code>Camila</code> we raise a <code>cligenius.BadParameter()</code> exception.</p> <p>The <code>BadParameter</code> exception is special, it shows the error with the parameter that generated it.</p> <p>Check it:</p> <pre><code>$ python main.py --name Camila\n\nHello Camila\n\n$ python main.py --name Rick\n\nUsage: main.py [OPTIONS]\n\n// We get the error from the callback\nError: Invalid value for '--name': Only Camila is allowed\n</code></pre>"},{"location":"tutorial/options/callback-and-context/#handling-completion","title":"Handling completion","text":"<p>There's something to be aware of with callbacks and completion that requires some small special handling.</p> <p>But first let's just use completion in your shell (Bash, Zsh, Fish, or PowerShell).</p> <p>After installing completion (for your own Python package), when you use your CLI program and start adding a CLI option with <code>--</code> an then hit TAB, your shell will show you the available CLI options (the same for CLI arguments, etc).</p> <p>To check it quickly with the previous script use the <code>cligenius</code> command:</p> <pre><code>// Hit the TAB key in your keyboard below where you see the: [TAB]\n$ cligenius ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this \u2728\nrun    -- Run the provided Cligenius app.\nutils  -- Extra utility commands for Cligenius apps.\n\n// Then try with \"run\" and --help\n$ cligenius ./main.py run --help\n\n// You get a help text with your CLI options as you normally would\nUsage: cligenius run [OPTIONS]\n\n  Run the provided Cligenius app.\n\nOptions:\n  --name TEXT  [required]\n  --help       Show this message and exit.\n\n// Then try completion with your program\n$ cligenius ./main.py run --[TAB][TAB]\n\n// You get completion for CLI options\n--help  -- Show this message and exit.\n--name\n\n// And you can run it as if it was with Python directly\n$ cligenius ./main.py run --name Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/options/callback-and-context/#how-shell-completion-works","title":"How shell completion works","text":"<p>The way it works internally is that the shell/terminal will call your CLI program with some special environment variables (that hold the current CLI parameters, etc) and your CLI program will print some special values that the shell will use to present completion. All this is handled for you by Cligenius behind the scenes.</p> <p>But the main important point is that it is all based on values printed by your program that the shell reads.</p>"},{"location":"tutorial/options/callback-and-context/#breaking-completion-in-a-callback","title":"Breaking completion in a callback","text":"<p>Let's say that when the callback is running, we want to show a message saying that it's validating the name:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: Annotated[Optional[str], cligenius.Option(callback=name_callback)] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: Optional[str] = cligenius.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And because the callback will be called when the shell calls your program asking for completion, that message <code>\"Validating name\"</code> will be printed and it will break completion.</p> <p>It will look something like:</p> <pre><code>// Run it normally\n$ cligenius ./main.py run --name Camila\n\n// See the extra message \"Validating name\"\nValidating name\nHello Camila\n\n$ cligenius ./main.py run --[TAB][TAB]\n\n// Some weird broken error message \u26d4\ufe0f\n(eval):1: command not found: Validating\nrucligenius ./main.pyed Cligenius app.\n</code></pre>"},{"location":"tutorial/options/callback-and-context/#fix-completion-using-the-context","title":"Fix completion - using the <code>Context</code>","text":"<p>When you create a Cligenius application it uses Click underneath.</p> <p>And every Click application has a special object called a \"Context\" that is normally hidden.</p> <p>But you can access the context by declaring a function parameter of type <code>cligenius.Context</code>.</p> <p>The \"context\" has some additional data about the current execution of your program:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef name_callback(ctx: cligenius.Context, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: Annotated[Optional[str], cligenius.Option(callback=name_callback)] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef name_callback(ctx: cligenius.Context, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: Optional[str] = cligenius.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>The <code>ctx.resilient_parsing</code> will be <code>True</code> when handling completion, so you can just return without printing anything else.</p> <p>But it will be <code>False</code> when calling the program normally. So you can continue the execution of your previous code.</p> <p>That's all is needed to fix completion. \ud83d\ude80</p> <p>Check it:</p> <pre><code>$ cligenius ./main.py run --[TAB][TAB]\n\n// Now it works correctly \ud83c\udf89\n--help  -- Show this message and exit.\n--name\n\n// And you can call it normally\n$ cligenius ./main.py run --name Camila\n\nValidating name\nHello Camila\n</code></pre>"},{"location":"tutorial/options/callback-and-context/#using-the-callbackparam-object","title":"Using the <code>CallbackParam</code> object","text":"<p>The same way you can access the <code>cligenius.Context</code> by declaring a function parameter with its value, you can declare another function parameter with type <code>cligenius.CallbackParam</code> to get the specific Click <code>Parameter</code> object.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef name_callback(ctx: cligenius.Context, param: cligenius.CallbackParam, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: Annotated[Optional[str], cligenius.Option(callback=name_callback)] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef name_callback(ctx: cligenius.Context, param: cligenius.CallbackParam, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: Optional[str] = cligenius.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>It's probably not very common, but you could do it if you need it.</p> <p>For example if you had a callback that could be used by several CLI parameters, that way the callback could know which parameter is each time.</p> <p>Check it:</p> <pre><code>$ python main.py --name Camila\n\nValidating param: name\nHello Camila\n</code></pre>"},{"location":"tutorial/options/callback-and-context/#technical-details","title":"Technical Details","text":"<p>Because you get the relevant data in the callback function based on standard Python type annotations, you get type checks and autocompletion in your editor for free.</p> <p>And Cligenius will make sure you get the function parameters you want.</p> <p>You don't have to worry about their names, their order, etc.</p> <p>As it's based on standard Python types, it \"just works\". \u2728</p>"},{"location":"tutorial/options/callback-and-context/#clicks-parameter","title":"Click's <code>Parameter</code>","text":"<p>The <code>cligenius.CallbackParam</code> is actually just a sub-class of Click's <code>Parameter</code>, so you get all the right completion in your editor.</p>"},{"location":"tutorial/options/callback-and-context/#callback-with-type-annotations","title":"Callback with type annotations","text":"<p>You can get the <code>cligenius.Context</code> and the <code>cligenius.CallbackParam</code> simply by declaring a function parameter of each type.</p> <p>The order doesn't matter, the name of the function parameters doesn't matter.</p> <p>You could also get only the <code>cligenius.CallbackParam</code> and not the <code>cligenius.Context</code>, or vice versa, it will still work.</p>"},{"location":"tutorial/options/callback-and-context/#value-function-parameter","title":"<code>value</code> function parameter","text":"<p>The <code>value</code> function parameter in the callback can also have any name (e.g. <code>lastname</code>) and any type, but it should have the same type annotation as in the main function, because that's what it will receive.</p> <p>It's also possible to not declare its type. It will still work.</p> <p>And it's possible to not declare the <code>value</code> parameter at all, and, for example, only get the <code>cligenius.Context</code>. That will also work.</p>"},{"location":"tutorial/options/help/","title":"CLI Options with Help","text":"<p>You already saw how to add a help text for CLI arguments with the <code>help</code> parameter.</p> <p>Let's now do the same for CLI options:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: str,\n    lastname: Annotated[\n        str, cligenius.Option(help=\"Last name of person to greet.\")\n    ] = \"\",\n    formal: Annotated[bool, cligenius.Option(help=\"Say hi formally.\")] = False,\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str,\n    lastname: str = cligenius.Option(\"\", help=\"Last name of person to greet.\"),\n    formal: bool = cligenius.Option(False, help=\"Say hi formally.\"),\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>The same way as with <code>cligenius.Argument()</code>, we can put <code>cligenius.Option()</code> inside of <code>Annotated</code>.</p> <p>We can then pass the <code>help</code> keyword parameter:</p> <pre><code>lastname: Annotated[str, cligenius.Option(help=\"this option does this and that\")] = \"\"\n</code></pre> <p>...to create the help for that CLI option.</p> <p>The same way as with <code>cligenius.Argument()</code>, Cligenius also supports the old style using the function parameter default value:</p> <pre><code>lastname: str = cligenius.Option(default=\"\", help=\"this option does this and that\")\n</code></pre> <p>Copy that example from above to a file <code>main.py</code>.</p> <p>Test it:</p> <pre><code>$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n  Say hi to NAME, optionally with a --lastname.\n\n  If --formal is used, say hi very formally.\n\nArguments:\n  NAME  [required]\n\nOptions:\n  --lastname TEXT         Last name of person to greet. [default: ]\n  --formal / --no-formal  Say hi formally.  [default: False]\n  --help                  Show this message and exit.\n\n// Now you have a help text for the --lastname and --formal CLI options \ud83c\udf89\n</code></pre>"},{"location":"tutorial/options/help/#cli-options-help-panels","title":"CLI Options help panels","text":"<p>The same as with CLI arguments, you can put the help for some CLI options in different panels to be shown with the <code>--help</code> option.</p> <p>If you have installed Rich as described in the docs for Printing and Colors, you can set the <code>rich_help_panel</code> parameter to the name of the panel you want for each CLI option:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: str,\n    lastname: Annotated[\n        str, cligenius.Option(help=\"Last name of person to greet.\")\n    ] = \"\",\n    formal: Annotated[\n        bool,\n        cligenius.Option(\n            help=\"Say hi formally.\", rich_help_panel=\"Customization and Utils\"\n        ),\n    ] = False,\n    debug: Annotated[\n        bool,\n        cligenius.Option(\n            help=\"Enable debugging.\", rich_help_panel=\"Customization and Utils\"\n        ),\n    ] = False,\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str,\n    lastname: str = cligenius.Option(\"\", help=\"Last name of person to greet.\"),\n    formal: bool = cligenius.Option(\n        False, help=\"Say hi formally.\", rich_help_panel=\"Customization and Utils\"\n    ),\n    debug: bool = cligenius.Option(\n        False, help=\"Enable debugging.\", rich_help_panel=\"Customization and Utils\"\n    ),\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now, when you check the <code>--help</code> option, you will see a default panel named \"<code>Options</code>\" for the CLI options that don't have a custom <code>rich_help_panel</code>.</p> <p>And below you will see other panels for the CLI options that have a custom panel set in the <code>rich_help_panel</code> parameter:</p> <pre><code>$ python main.py --help\n\n&lt;b&gt; &lt;/b&gt;&lt;font color=\"#F4BF75\"&gt;&lt;b&gt;Usage: &lt;/b&gt;&lt;/font&gt;&lt;b&gt;main.py [OPTIONS] NAME                                &lt;/b&gt;\n&lt;b&gt;                                                                     &lt;/b&gt;\n Say hi to NAME, optionally with a &lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;.\n If &lt;font color=\"#6B9F98\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A5A5A1\"&gt; is used, say hi very formally.                          &lt;/font&gt;\n\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#F92672\"&gt;*&lt;/font&gt;    name      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  [default: None] &lt;font color=\"#A6194C\"&gt;[required]&lt;/font&gt;                   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--lastname&lt;/b&gt;&lt;/font&gt;                  &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;TEXT&lt;/b&gt;&lt;/font&gt;  Last name of person to greet.   \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--help&lt;/b&gt;&lt;/font&gt;                      &lt;font color=\"#F4BF75\"&gt;&lt;b&gt;    &lt;/b&gt;&lt;/font&gt;  Show this message and exit.     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u256d\u2500 Customization and Utils \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--formal&lt;/b&gt;&lt;/font&gt;    &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-formal&lt;/b&gt;&lt;/font&gt;      Say hi formally.                     \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                              [default: no-formal]                 \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2502 &lt;/font&gt;&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;--debug&lt;/b&gt;&lt;/font&gt;     &lt;font color=\"#AE81FF\"&gt;&lt;b&gt;--no-debug&lt;/b&gt;&lt;/font&gt;       Enable debugging.                    \u2502\n&lt;font color=\"#A5A5A1\"&gt;\u2502                              [default: no-debug]                  \u2502&lt;/font&gt;\n&lt;font color=\"#A5A5A1\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n</code></pre> <p>Here we have a custom CLI options panel named \"<code>Customization and Utils</code>\".</p>"},{"location":"tutorial/options/help/#help-with-style-using-rich","title":"Help with style using Rich","text":"<p>In a future section you will see how to use custom markup in the <code>help</code> for CLI options when reading about Commands - Command Help.</p> <p>If you are in a hurry you can jump there, but otherwise, it would be better to continue reading here and following the tutorial in order.</p>"},{"location":"tutorial/options/help/#hide-default-from-help","title":"Hide default from help","text":"<p>You can tell Cligenius to not show the default value in the help text with <code>show_default=False</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    fullname: Annotated[str, cligenius.Option(show_default=False)] = \"Wade Wilson\",\n):\n    print(f\"Hello {fullname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(fullname: str = cligenius.Option(\"Wade Wilson\", show_default=False)):\n    print(f\"Hello {fullname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And it will no longer show the default value in the help text:</p> <pre><code>$ python main.py\n\nHello Wade Wilson\n\n// Show the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS]\n\nOptions:\n  --fullname TEXT\n  --help                Show this message and exit.\n\n// Notice there's no [default: Wade Wilson] \ud83d\udd25\n</code></pre> <p>Technical Details</p> <p>In Click applications the default values are hidden by default. \ud83d\ude48</p> <p>In Cligenius these default values are shown by default. \ud83d\udc40</p>"},{"location":"tutorial/options/help/#custom-default-string","title":"Custom default string","text":"<p>You can use the same <code>show_default</code> to pass a custom string (instead of a <code>bool</code>) to customize the default value to be shown in the help text:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    fullname: Annotated[\n        str, cligenius.Option(show_default=\"Deadpoolio the amazing's name\")\n    ] = \"Wade Wilson\",\n):\n    print(f\"Hello {fullname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    fullname: str = cligenius.Option(\n        \"Wade Wilson\", show_default=\"Deadpoolio the amazing's name\"\n    ),\n):\n    print(f\"Hello {fullname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And it will be used in the help text:</p> <pre><code>$ python main.py\n\nHello Wade Wilson\n\n// Show the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS]\n\nOptions:\n  --fullname TEXT       [default: (Deadpoolio the amazing's name)]\n  --help                Show this message and exit.\n\n// Notice how it shows \"(Deadpoolio the amazing's name)\" instead of the actual default of \"Wade Wilson\"\n</code></pre>"},{"location":"tutorial/options/name/","title":"CLI Option Name","text":"<p>By default Cligenius will create a CLI option name from the function parameter.</p> <p>So, if you have a function with:</p> <pre><code>def main(user_name: Optional[str] = None):\n    pass\n</code></pre> <p>or</p> <pre><code>def main(user_name: Annotated[Optional[str], cligenius.Option()] = None):\n    pass\n</code></pre> <p>Cligenius will create a CLI option:</p> <pre><code>--user-name\n</code></pre> <p>But you can customize it if you want to.</p> <p>Let's say the function parameter name is <code>user_name</code> as above, but you want the CLI option to be just <code>--name</code>.</p> <p>You can pass the CLI option name that you want to have in the following positional argument passed to <code>cligenius.Option()</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(user_name: Annotated[str, cligenius.Option(\"--name\")]):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Here you are passing the string <code>\"--name\"</code> as the first positional argument to <code>cligenius.Option()</code>.</p> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(user_name: str = cligenius.Option(..., \"--name\")):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Here you are passing the string <code>\"--name\"</code> as the second positional argument to <code>cligenius.Option()</code>, as the first argument is <code>...</code> to mark it as required.</p> <p>Info</p> <p>\"Positional\" means that it's not a function argument with a keyword name.</p> <p>For example <code>show_default=True</code> is a keyword argument. \"<code>show_default</code>\" is the keyword.</p> <p>But in <code>\"--name\"</code> there's no <code>option_name=\"--name\"</code> or something similar, it's just the string value <code>\"--name\"</code> that goes in <code>cligenius.Option()</code>.</p> <p>That's a \"positional argument\" in a function.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice the --name instead of --user-name\nUsage: main.py [OPTIONS]\n\nOptions:\n  --name TEXT           [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python --name Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-short-names","title":"CLI option short names","text":"<p>A short name is a CLI option name with a single dash (<code>-</code>) instead of 2 (<code>--</code>) and a single letter, like <code>-n</code> instead of <code>--name</code>.</p> <p>For example, the <code>ls</code> program has a CLI option named <code>--size</code>, and the same CLI option also has a short name <code>-s</code>:</p> <pre><code>// With the long name --size\n$ ls ./myproject --size\n\n12 first-steps.md   4 intro.md\n\n// With the short name -s\n$ ls ./myproject -s\n\n12 first-steps.md   4 intro.md\n\n// Both CLI option names do the same\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-short-names-together","title":"CLI option short names together","text":"<p>Short names have another feature, when they have a single letter, as in <code>-s</code>, you can put several of these CLI options together, with a single dash.</p> <p>For example, the <code>ls</code> program has these 2 CLI options (among others):</p> <ul> <li><code>--size</code>: show the sizes of the listed files.</li> <li><code>--human</code>: show a human-readable format, like <code>1MB</code> instead of just <code>1024</code>.</li> </ul> <p>And these 2 CLI options have short versions too:</p> <ul> <li><code>--size</code>: short version <code>-s</code>.</li> <li><code>--human</code>: short version <code>-h</code>.</li> </ul> <p>So, you can put them together with <code>-sh</code> or <code>-hs</code>:</p> <pre><code>// Call ls with long CLI options\n$ ls --size --human\n\n12K first-steps.md   4.0K intro.md\n\n// Now with short versions\n$ ls -s -h\n\n12K first-steps.md   4.0K intro.md\n\n// And with short versions together\n$ ls -sh\n\n12K first-steps.md   4.0K intro.md\n\n// Order in short versions doesn't matter\n$ ls -hs\n\n12K first-steps.md   4.0K intro.md\n\n// They all work the same \ud83c\udf89\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-short-names-with-values","title":"CLI option short names with values","text":"<p>When you use CLI options with short names, you can put them together if they are just boolean flags, like <code>--size</code> or <code>--human</code>.</p> <p>But if you have a CLI option <code>--file</code> with a short name <code>-f</code> that takes a value, if you put it with other short names for CLI options, you have to put it as the last letter, so that it can receive the value that comes right after.</p> <p>For example, let's say you are decompressing/extracting a file <code>myproject.tar.gz</code> with the program <code>tar</code>.</p> <p>You can pass these CLI option short names to <code>tar</code>:</p> <ul> <li><code>-x</code>: means \"e<code>X</code>tract\", to decompress and extract the contents.</li> <li><code>-v</code>: means \"<code>V</code>erbose\", to print on the screen what it is doing, so you can know that it's decompressing each file and can entertain yourself while you wait.</li> <li><code>-f</code>: means \"<code>F</code>ile\", this one requires a value, the compressed file to extract (in our example, this is <code>myproject.tar.gz</code>).<ul> <li>So if you use all the short names together, this <code>-f</code> has to come last, to receive the value that comes next to it.</li> </ul> </li> </ul> <p>For example:</p> <pre><code>$ tar -xvf myproject.tar.gz\n\nmyproject/\nmyproject/first-steps.md\nmyproject/intro.md\n\n// But if you put the -f before\n$ tar -fxv myproject.tar.gz\n\n// You get an ugly error\ntar: You must specify one of the blah, blah, error, error\n</code></pre>"},{"location":"tutorial/options/name/#defining-cli-option-short-names","title":"Defining CLI option short names","text":"<p>In Cligenius you can also define CLI option short names the same way you can customize the long names.</p> <p>You can pass positional arguments to <code>cligenius.Option()</code> to define the CLI option name(s).</p> <p>Tip</p> <p>Remember the positional function arguments are those that don't have a keyword.</p> <p>All the other function arguments/parameters you pass to <code>cligenius.Option()</code> like <code>prompt=True</code> and <code>help=\"This option blah, blah\"</code> require the keyword.</p> <p>You can overwrite the CLI option name to use as in the previous example, but you can also declare extra alternatives, including short names.</p> <p>For example, extending the previous example, let's add a CLI option short name <code>-n</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(user_name: Annotated[str, cligenius.Option(\"--name\", \"-n\")]):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(user_name: str = cligenius.Option(..., \"--name\", \"-n\")):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Here we are overwriting the CLI option name that by default would be <code>--user-name</code>, and we are defining it to be <code>--name</code>. And we are also declaring a CLI option short name of <code>-n</code>.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the two CLI option names -n and --name\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT       [required]\n  --help                Show this message and exit.\n\n// Try the short version\n$ python main.py -n Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-only-short-name","title":"CLI option only short name","text":"<p>If you only declare a short name like <code>-n</code> then that will be the only CLI option name. And neither <code>--name</code> nor <code>--user-name</code> will be available.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(user_name: Annotated[str, cligenius.Option(\"-n\")]):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(user_name: str = cligenius.Option(..., \"-n\")):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice there's no --name nor --user-name, only -n\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n TEXT               [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py -n Camila\n\nHello Camila\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-short-name-and-default","title":"CLI option short name and default","text":"<p>Continuing with the example above, as Cligenius allows you to declare a CLI option as having only a short name, if you want to have the default long name plus a short name, you have to declare both explicitly:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(user_name: Annotated[str, cligenius.Option(\"--user-name\", \"-n\")]):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(user_name: str = cligenius.Option(..., \"--user-name\", \"-n\")):\n    print(f\"Hello {user_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice that we have the long version --user-name back\n// and we also have the short version -n\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --user-name TEXT  [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py --user-name Camila\n\nHello Camila\n\n// And try the short version\n$ python main.py -n Camila\n</code></pre>"},{"location":"tutorial/options/name/#cli-option-short-names-together_1","title":"CLI option short names together","text":"<p>You can create multiple short names and use them together.</p> <p>You don't have to do anything special for it to work (apart from declaring those short versions):</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: Annotated[str, cligenius.Option(\"--name\", \"-n\")],\n    formal: Annotated[bool, cligenius.Option(\"--formal\", \"-f\")] = False,\n):\n    if formal:\n        print(f\"Good day Ms. {name}.\")\n    else:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str = cligenius.Option(..., \"--name\", \"-n\"),\n    formal: bool = cligenius.Option(False, \"--formal\", \"-f\"),\n):\n    if formal:\n        print(f\"Good day Ms. {name}.\")\n    else:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Notice that, again, we are declaring the long and short version of the CLI option names.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// We now have short versions -n and -f\n// And also long versions --name and --formal\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT       [required]\n  -f, --formal\n  --help                Show this message and exit.\n\n// Try the short versions\n$ python main.py -n Camila -f\n\nGood day Ms. Camila.\n\n// And try the 2 short versions together\n// See how -n has to go last, to be able to get the value\n$ python main.py -fn Camila\n\nGood day Ms. Camila.\n</code></pre>"},{"location":"tutorial/options/password/","title":"Password CLI Option and Confirmation Prompt","text":"<p>Apart from having a prompt, you can make a CLI option have a <code>confirmation_prompt=True</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: str,\n    email: Annotated[str, cligenius.Option(prompt=True, confirmation_prompt=True)],\n):\n    print(f\"Hello {name}, your email is {email}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str, email: str = cligenius.Option(..., prompt=True, confirmation_prompt=True)\n):\n    print(f\"Hello {name}, your email is {email}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And the CLI program will ask for confirmation:</p> <pre><code>$ python main.py Camila\n\n// It prompts for the email\n# Email: $ camila@example.com\n# Repeat for confirmation: $ camila@example.com\n\nHello Camila, your email is camila@example.com\n</code></pre>"},{"location":"tutorial/options/password/#a-password-prompt","title":"A Password prompt","text":"<p>When receiving a password, it is very common (in most shells) to not show anything on the screen while typing the password.</p> <p>The program will still receive the password, but nothing will be shown on screen, not even <code>****</code>.</p> <p>You can achieve the same using <code>hide_input=True</code>.</p> <p>And if you combine it with <code>confirmation_prompt=True</code> you can easily receive a password with double confirmation:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: str,\n    password: Annotated[\n        str, cligenius.Option(prompt=True, confirmation_prompt=True, hide_input=True)\n    ],\n):\n    print(f\"Hello {name}. Doing something very secure with password.\")\n    print(f\"...just kidding, here it is, very insecure: {password}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str,\n    password: str = cligenius.Option(\n        ..., prompt=True, confirmation_prompt=True, hide_input=True\n    ),\n):\n    print(f\"Hello {name}. Doing something very secure with password.\")\n    print(f\"...just kidding, here it is, very insecure: {password}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py Camila\n\n// It prompts for the password, but doesn't show anything when you type\n# Password: $\n# Repeat for confirmation: $\n\n// Let's imagine the password typed was \"cligeniusrocks\"\nHello Camila. Doing something very secure with password.\n...just kidding, here it is, very insecure: cligeniusrocks\n</code></pre>"},{"location":"tutorial/options/prompt/","title":"CLI Option Prompt","text":"<p>It's also possible to, instead of just showing an error, ask for the missing value with <code>prompt=True</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: str, lastname: Annotated[str, cligenius.Option(prompt=True)]):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = cligenius.Option(..., prompt=True)):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then your program will ask the user for it in the terminal:</p> <pre><code>// Call it with the NAME CLI argument\n$ python main.py Camila\n\n// It asks for the missing CLI option --lastname\n# Lastname: $ Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre>"},{"location":"tutorial/options/prompt/#customize-the-prompt","title":"Customize the prompt","text":"<p>You can also set a custom prompt, passing the string that you want to use instead of just <code>True</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    name: str,\n    lastname: Annotated[str, cligenius.Option(prompt=\"Please tell me your last name\")],\n):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    name: str,\n    lastname: str = cligenius.Option(..., prompt=\"Please tell me your last name\"),\n):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then your program will ask for it using with your custom prompt:</p> <pre><code>// Call it with the NAME CLI argument\n$ python main.py Camila\n\n// It uses the custom prompt\n# Please tell me your last name: $ Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n</code></pre>"},{"location":"tutorial/options/prompt/#confirmation-prompt","title":"Confirmation prompt","text":"<p>In some cases you could want to prompt for something and then ask the user to confirm it by typing it twice.</p> <p>You can do it passing the parameter <code>confirmation_prompt=True</code>.</p> <p>Let's say it's a CLI app to delete a project:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    project_name: Annotated[\n        str, cligenius.Option(prompt=True, confirmation_prompt=True)\n    ],\n):\n    print(f\"Deleting project {project_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    project_name: str = cligenius.Option(..., prompt=True, confirmation_prompt=True),\n):\n    print(f\"Deleting project {project_name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And it will prompt the user for a value and then for the confirmation:</p> <pre><code>$ python main.py\n\n// Your app will first prompt for the project name, and then for the confirmation\n# Project name: $ Old Project\n# Repeat for confirmation: $ Old Project\n\nDeleting project Old Project\n\n// If the user doesn't type the same, receives an error and a new prompt\n$ python main.py\n\n# Project name: $ Old Project\n# Repeat for confirmation: $ New Spice\n\nError: The two entered values do not match\n\n# Project name: $ Old Project\n# Repeat for confirmation: $ Old Project\n\nDeleting project Old Project\n\n// Now it works \ud83c\udf89\n</code></pre>"},{"location":"tutorial/options/required/","title":"Required CLI Options","text":"<p>We said before that by default:</p> <ul> <li>CLI options are optional</li> <li>CLI arguments are required</li> </ul> <p>Well, that's how they work by default, and that's the convention in many CLI programs and systems.</p> <p>But if you really want, you can change that.</p> <p>To make a CLI option required, you can put <code>cligenius.Option()</code> inside of <code>Annotated</code> and leave the parameter without a default value.</p> <p>Let's make <code>--lastname</code> a required CLI option:</p> Python 3.7+ <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(name: str, lastname: Annotated[str, cligenius.Option()]):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>The same way as with <code>cligenius.Argument()</code>, the old style of using the function parameter default value is also supported, in that case you would just not pass anything to the <code>default</code> parameter.</p> Python 3.7+ non-Annotated <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = cligenius.Option()):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Or you can explictily pass <code>...</code> to <code>cligenius.Option(default=...)</code>:</p> Python 3.7+ non-Annotated <pre><code>import cligenius\n\n\ndef main(name: str, lastname: str = cligenius.Option(default=...)):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Info</p> <p>If you hadn't seen that <code>...</code> before: it is a special single value, it is part of Python and is called \"Ellipsis\".</p> <p>That will tell Cligenius that it's still a CLI option, but it doesn't have a default value, and it's required.</p> <p>Tip</p> <p>Again, prefer to use the <code>Annotated</code> version if possible. That way your code will mean the same in standard Python and in Cligenius.</p> <p>And test it:</p> <pre><code>// Pass the NAME CLI argument\n$ python main.py Camila\n\n// We didn't pass the now required --lastname CLI option\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing option '--lastname'.\n\n// Now update it to pass the required --lastname CLI option\n$ python main.py Camila --lastname Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n\n// And if you check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --lastname TEXT       [required]\n  --help                Show this message and exit.\n\n// It now tells you that --lastname is required \ud83c\udf89\n</code></pre>"},{"location":"tutorial/options/version/","title":"Version CLI Option, is_eager","text":"<p>You could use a callback to implement a <code>--version</code> CLI option.</p> <p>It would show the version of your CLI program and then it would terminate it. Even before any other CLI parameter is processed.</p>"},{"location":"tutorial/options/version/#first-version-of-version","title":"First version of <code>--version</code>","text":"<p>Let's see a first version of how it could look like:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef main(\n    name: Annotated[str, cligenius.Option()] = \"World\",\n    version: Annotated[\n        Optional[bool], cligenius.Option(\"--version\", callback=version_callback)\n    ] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef main(\n    name: str = cligenius.Option(\"World\"),\n    version: Optional[bool] = cligenius.Option(\n        None, \"--version\", callback=version_callback\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Notice that we don't have to get the <code>cligenius.Context</code> and check for <code>ctx.resilient_parsing</code> for completion to work, because we only print and modify the program when <code>--version</code> is passed, otherwise, nothing is printed or changed from the callback.</p> <p>If the <code>--version</code> CLI option is passed, we get a value <code>True</code> in the callback.</p> <p>Then we can print the version and raise <code>cligenius.Exit()</code> to make sure the program is terminated before anything else is executed.</p> <p>We also declare the explicit CLI option name <code>--version</code>, because we don't want an automatic <code>--no-version</code>, it would look awkward.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// We get a --version, and don't get an awkward --no-version \ud83c\udf89\nUsage: main.py [OPTIONS]\n\nOptions:\n  --version\n  --name TEXT\n  --help                Show this message and exit.\n\n\n// We can call it normally\n$ python main.py --name Camila\n\nHello Camila\n\n// And we can get the version\n$ python main.py --version\n\nAwesome CLI Version: 0.1.0\n\n// Because we exit in the callback, we don't get a \"Hello World\" message after the version \ud83d\ude80\n</code></pre>"},{"location":"tutorial/options/version/#previous-parameters-and-is_eager","title":"Previous parameters and <code>is_eager</code>","text":"<p>But now let's say that the <code>--name</code> CLI option that we declared before <code>--version</code> is required, and it has a callback that could exit the program:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n\n\ndef main(\n    name: Annotated[str, cligenius.Option(callback=name_callback)],\n    version: Annotated[\n        Optional[bool], cligenius.Option(\"--version\", callback=version_callback)\n    ] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n\n\ndef main(\n    name: str = cligenius.Option(..., callback=name_callback),\n    version: Optional[bool] = cligenius.Option(\n        None, \"--version\", callback=version_callback\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Then our CLI program could not work as expected in some cases as it is right now, because if we use <code>--version</code> after <code>--name</code> then the callback for <code>--name</code> will be processed before and we can get its error:</p> <pre><code>$ python main.py --name Rick --version\n\nOnly Camila is allowed\nAborted!\n</code></pre> <p>Tip</p> <p>We don't have to check for <code>ctx.resilient_parsing</code> in the <code>name_callback()</code> for completion to work, because we are not using <code>cligenius.echo()</code>, instead we are raising a <code>cligenius.BadParameter</code>.</p> <p>Technical Details</p> <p><code>cligenius.BadParameter</code> prints the error to \"standard error\", not to \"standard output\", and because the completion system only reads from \"standard output\", it won't break completion.</p> <p>Info</p> <p>If you need a refresher about what is \"standard output\" and \"standard error\" check the section in Printing and Colors: \"Standard Output\" and \"Standard Error\".</p>"},{"location":"tutorial/options/version/#fix-with-is_eager","title":"Fix with <code>is_eager</code>","text":"<p>For those cases, we can mark a CLI parameter (a CLI option or CLI argument) with <code>is_eager=True</code>.</p> <p>That will tell Cligenius (actually Click) that it should process this CLI parameter before the others:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return name\n\n\ndef main(\n    name: Annotated[str, cligenius.Option(callback=name_callback)],\n    version: Annotated[\n        Optional[bool],\n        cligenius.Option(\"--version\", callback=version_callback, is_eager=True),\n    ] = None,\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise cligenius.Exit()\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise cligenius.BadParameter(\"Only Camila is allowed\")\n    return name\n\n\ndef main(\n    name: str = cligenius.Option(..., callback=name_callback),\n    version: Optional[bool] = cligenius.Option(\n        None, \"--version\", callback=version_callback, is_eager=True\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --name Rick --version\n\n// Now we only get the version, and the name is not used\nAwesome CLI Version: 0.1.0\n</code></pre>"},{"location":"tutorial/parameter-cligenius/","title":"Index","text":"<p>You can use several data types for the CLI options and CLI arguments, and you can add data validation requirements too.</p>"},{"location":"tutorial/parameter-cligenius/#data-conversion","title":"Data conversion","text":"<p>When you declare a CLI parameter with some type Cligenius will convert the data received in the command line to that data type.</p> <p>For example:</p> <pre><code>import cligenius\n\n\ndef main(name: str, age: int = 20, height_meters: float = 1.89, female: bool = True):\n    print(f\"NAME is {name}, of type: {type(name)}\")\n    print(f\"--age is {age}, of type: {type(age)}\")\n    print(f\"--height-meters is {height_meters}, of type: {type(height_meters)}\")\n    print(f\"--female is {female}, of type: {type(female)}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>In this example, the value received for the CLI argument <code>NAME</code> will be treated as <code>str</code>.</p> <p>The value for the CLI option <code>--age</code> will be converted to an <code>int</code> and <code>--height-meters</code> will be converted to a <code>float</code>.</p> <p>And as <code>female</code> is a <code>bool</code> CLI option, Cligenius will convert it to a \"flag\" <code>--female</code> and the counterpart <code>--no-female</code>.</p> <p>And here's how it looks like:</p> <pre><code>$ python main.py --help\n\n// Notice how --age is an INTEGER and --height-meters is a FLOAT\nUsage: main.py [OPTIONS] NAME\n\nArguments:\n  NAME  [required]\n\nOptions:\n  --age INTEGER           [default: 20]\n  --height-meters FLOAT   [default: 1.89]\n  --female / --no-female  [default: True]\n  --help                  Show this message and exit.\n\n// Call it with CLI parameters\n$ python main.py Camila --age 15 --height-meters 1.70 --female\n\n// All the data has the correct Python type\nNAME is Camila, of type: class 'str'\n--age is 15, of type: class 'int'\n--height-meters is 1.7, of type: class 'float'\n--female is True, of type: class 'bool'\n\n// And if you pass an incorrect type\n$ python main.py Camila --age 15.3\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': '15.3' is not a valid integer\n\n// Because 15.3 is not an INTEGER (it's a float)\n</code></pre>"},{"location":"tutorial/parameter-cligenius/#watch-next","title":"Watch next","text":"<p>See more about specific types and validations in the next sections...</p> <p>Technical Details</p> <p>All the types you will see in the next sections are handled underneath by Click's Parameter Types.</p>"},{"location":"tutorial/parameter-cligenius/bool/","title":"Bool","text":"<p>We have seen some examples of CLI options with <code>bool</code>, and how Cligenius creates <code>--something</code> and <code>--no-something</code> automatically.</p> <p>But we can customize those names.</p>"},{"location":"tutorial/parameter-cligenius/bool/#only-force","title":"Only <code>--force</code>","text":"<p>Let's say that we want a <code>--force</code> CLI option only, we want to discard <code>--no-force</code>.</p> <p>We can do that by specifying the exact name we want:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(force: Annotated[bool, cligenius.Option(\"--force\")] = False):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(force: bool = cligenius.Option(False, \"--force\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Now there's only a <code>--force</code> CLI option:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice there's only --force, we no longer have --no-force\nUsage: main.py [OPTIONS]\n\nOptions:\n  --force               [default: False]\n  --help                Show this message and exit.\n\n// Try it:\n$ python main.py\n\nNot forcing\n\n// Now add --force\n$ python main.py --force\n\nForcing operation\n\n// And --no-force no longer exists \u26d4\ufe0f\n$ python main.py --no-force\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: No such option: --no-force\n</code></pre>"},{"location":"tutorial/parameter-cligenius/bool/#alternative-names","title":"Alternative names","text":"<p>Now let's imagine we have a CLI option <code>--accept</code>.</p> <p>And we want to allow setting <code>--accept</code> or the contrary, but <code>--no-accept</code> looks ugly.</p> <p>We might want to instead have <code>--accept</code> and <code>--reject</code>.</p> <p>We can do that by passing a single <code>str</code> with the 2 names for the <code>bool</code> CLI option separated by <code>/</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    accept: Annotated[Optional[bool], cligenius.Option(\"--accept/--reject\")] = None,\n):\n    if accept is None:\n        print(\"I don't know what you want yet\")\n    elif accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Optional\n\nimport cligenius\n\n\ndef main(accept: Optional[bool] = cligenius.Option(None, \"--accept/--reject\")):\n    if accept is None:\n        print(\"I don't know what you want yet\")\n    elif accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the --accept / --reject\nUsage: main.py [OPTIONS]\n\nOptions:\n  --accept / --reject\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py\n\nI don't know what you want yet\n\n// Now pass --accept\n$ python main.py --accept\n\nAccepting!\n\n// And --reject\n$ python main.py --reject\n\nRejecting!\n</code></pre>"},{"location":"tutorial/parameter-cligenius/bool/#short-names","title":"Short names","text":"<p>The same way, you can declare short versions of the names for these CLI options.</p> <p>For example, let's say we want <code>-f</code> for <code>--force</code> and <code>-F</code> for <code>--no-force</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    force: Annotated[bool, cligenius.Option(\"--force/--no-force\", \"-f/-F\")] = False,\n):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(force: bool = cligenius.Option(False, \"--force/--no-force\", \"-f/-F\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the -f, --force / -F, --no-force\nUsage: main.py [OPTIONS]\n\nOptions:\n  -f, --force / -F, --no-force  [default: False]\n  --help                        Show this message and exit.\n\n// Try with the short name -f\n$ python main.py -f\n\nForcing operation\n\n// Try with the short name -F\n$ python main.py -F\n\nNot forcing\n</code></pre>"},{"location":"tutorial/parameter-cligenius/bool/#only-names-for-false","title":"Only names for <code>False</code>","text":"<p>If you want to (although it might not be a good idea), you can declare only CLI option names to set the <code>False</code> value.</p> <p>To do that, use a space and a single <code>/</code> and pass the negative name after:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(in_prod: Annotated[bool, cligenius.Option(\" /--demo\", \" /-d\")] = True):\n    if in_prod:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(in_prod: bool = cligenius.Option(True, \" /--demo\", \" /-d\")):\n    if in_prod:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Have in mind that it's a string with a preceding space and then a <code>/</code>.</p> <p>So, it's <code>\" /-S\"</code> not <code>\"/-S\"</code>.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the / -d, --demo\nUsage: main.py [OPTIONS]\n\nOptions:\n   / -d, --demo         [default: True]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py\n\nRunning in production\n\n// Now pass --demo\n$ python main.py --demo\n\nRunning demo\n\n// And the short version\n$ python main.py -d\n\nRunning demo\n</code></pre>"},{"location":"tutorial/parameter-cligenius/custom-cligenius/","title":"Custom cligenius","text":"<p>You can easily use your own custom types in your Cligenius applications.</p> <p>The way to do it is by providing a way to parse input into your own types.</p> <p>There are two ways to achieve this:</p> <ul> <li>Adding a type <code>parser</code></li> <li>Expanding Click's custom types</li> </ul>"},{"location":"tutorial/parameter-cligenius/custom-cligenius/#type-parser","title":"Type Parser","text":"<p><code>cligenius.Argument</code> and <code>cligenius.Option</code> can create custom parameter types with a <code>parser</code> callable.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\nclass CustomClass:\n    def __init__(self, value: str):\n        self.value = value\n\n    def __str__(self):\n        return f\"&lt;CustomClass: value={self.value}&gt;\"\n\n\ndef parse_custom_class(value: str):\n    return CustomClass(value * 2)\n\n\ndef main(\n    custom_arg: Annotated[CustomClass, cligenius.Argument(parser=parse_custom_class)],\n    custom_opt: Annotated[\n        CustomClass, cligenius.Option(parser=parse_custom_class)\n    ] = \"Foo\",\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\nclass CustomClass:\n    def __init__(self, value: str):\n        self.value = value\n\n    def __str__(self):\n        return f\"&lt;CustomClass: value={self.value}&gt;\"\n\n\ndef parse_custom_class(value: str):\n    return CustomClass(value * 2)\n\n\ndef main(\n    custom_arg: CustomClass = cligenius.Argument(parser=parse_custom_class),\n    custom_opt: CustomClass = cligenius.Option(\"Foo\", parser=parse_custom_class),\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>The function (or callable) that you pass to the parameter <code>parser</code> will receive the input value as a string and should return the parsed value with your own custom type.</p>"},{"location":"tutorial/parameter-cligenius/custom-cligenius/#click-custom-type","title":"Click Custom Type","text":"<p>If you already have a Click Custom Type, you can use it in <code>cligenius.Argument()</code> and <code>cligenius.Option()</code> with the <code>click_type</code> parameter.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import click\nimport cligenius\nfrom typing_extensions import Annotated\n\n\nclass CustomClass:\n    def __init__(self, value: str):\n        self.value = value\n\n    def __repr__(self):\n        return f\"&lt;CustomClass: value={self.value}&gt;\"\n\n\nclass CustomClassParser(click.ParamType):\n    name = \"CustomClass\"\n\n    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)\n\n\ndef main(\n    custom_arg: Annotated[\n        CustomClass, cligenius.Argument(click_type=CustomClassParser())\n    ],\n    custom_opt: Annotated[\n        CustomClass, cligenius.Option(click_type=CustomClassParser())\n    ] = \"Foo\",\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import click\nimport cligenius\n\n\nclass CustomClass:\n    def __init__(self, value: str):\n        self.value = value\n\n    def __repr__(self):\n        return f\"&lt;CustomClass: value={self.value}&gt;\"\n\n\nclass CustomClassParser(click.ParamType):\n    name = \"CustomClass\"\n\n    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)\n\n\ndef main(\n    custom_arg: CustomClass = cligenius.Argument(click_type=CustomClassParser()),\n    custom_opt: CustomClass = cligenius.Option(\"Foo\", click_type=CustomClassParser()),\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre>"},{"location":"tutorial/parameter-cligenius/datetime/","title":"Datetime","text":"<p>You can specify a CLI parameter as a Python <code>datetime</code>.</p> <p>Your function will receive a standard Python <code>datetime</code> object, and again, your editor will give you completion, etc.</p> <pre><code>from datetime import datetime\n\nimport cligenius\n\n\ndef main(birth: datetime):\n    print(f\"Interesting day to be born: {birth}\")\n    print(f\"Birth hour: {birth.hour}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Cligenius will accept any string from the following formats:</p> <ul> <li><code>%Y-%m-%d</code></li> <li><code>%Y-%m-%dT%H:%M:%S</code></li> <li><code>%Y-%m-%d %H:%M:%S</code></li> </ul> <p>Check it:</p> <pre><code>$ python main.py --help\n\nUsage: main.py [OPTIONS] BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n\nArguments:\n  BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S][required]\n\nOptions:\n  --help                Show this message and exit.\n\n// Pass a datetime\n$ python main.py 1956-01-31T10:00:00\n\nInteresting day to be born: 1956-01-31 10:00:00\nBirth hour: 10\n\n// An invalid date\n$ python main.py july-19-1989\n\nUsage: main.py [OPTIONS] [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d%H:%M:%S]\n\nError: Invalid value for 'BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]': 'july-19-1989' does not match the formats '%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%d %H:%M:%S'.\n</code></pre>"},{"location":"tutorial/parameter-cligenius/datetime/#custom-date-format","title":"Custom date format","text":"<p>You can also customize the formats received for the <code>datetime</code> with the <code>formats</code> parameter.</p> <p><code>formats</code> receives a list of strings with the date formats that would be passed to datetime.strptime().</p> <p>For example, let's imagine that you want to accept an ISO formatted datetime, but for some strange reason, you also want to accept a format with:</p> <ul> <li>first the month</li> <li>then the day</li> <li>then the year</li> <li>separated with \"<code>/</code>\"</li> </ul> <p>...It's a crazy example, but let's say you also needed that strange format:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from datetime import datetime\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    launch_date: Annotated[\n        datetime,\n        cligenius.Argument(\n            formats=[\"%Y-%m-%d\", \"%Y-%m-%dT%H:%M:%S\", \"%Y-%m-%d %H:%M:%S\", \"%m/%d/%Y\"]\n        ),\n    ],\n):\n    print(f\"Launch will be at: {launch_date}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime\n\nimport cligenius\n\n\ndef main(\n    launch_date: datetime = cligenius.Argument(\n        ..., formats=[\"%Y-%m-%d\", \"%Y-%m-%dT%H:%M:%S\", \"%Y-%m-%d %H:%M:%S\", \"%m/%d/%Y\"]\n    ),\n):\n    print(f\"Launch will be at: {launch_date}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Notice the last string in <code>formats</code>: <code>\"%m/%d/%Y\"</code>.</p> <p>Check it:</p> <pre><code>// ISO dates work\n$ python main.py 1969-10-29\n\nLaunch will be at: 1969-10-29 00:00:00\n\n// But the strange custom format also works\n$ python main.py 10/29/1969\n\nLaunch will be at: 1969-10-29 00:00:00\n</code></pre>"},{"location":"tutorial/parameter-cligenius/enum/","title":"Enum","text":"<p>To define a CLI parameter that can take a value from a predefined set of values you can use a standard Python <code>enum.Enum</code>:</p> <pre><code>from enum import Enum\n\nimport cligenius\n\n\nclass NeuralNetwork(str, Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\n\ndef main(network: NeuralNetwork = NeuralNetwork.simple):\n    print(f\"Training neural network of type: {network.value}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Notice that the function parameter <code>network</code> will be an <code>Enum</code>, not a <code>str</code>.</p> <p>To get the <code>str</code> value in your function's code use <code>network.value</code>.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice the predefined values [simple|conv|lstm]\nUsage: main.py [OPTIONS]\n\nOptions:\n  --network [simple|conv|lstm]  [default: simple]\n  --help                        Show this message and exit.\n\n// Try it\n$ python main.py --network conv\n\nTraining neural network of type: conv\n\n// Invalid value\n$ python main.py --network capsule\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--network': 'capsule' is not one of 'simple', 'conv', 'lstm'.\n\n// Note that enums are case sensitive by default\n$ python main.py --network CONV\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--network': 'CONV' is not one of 'simple', 'conv', 'lstm'.\n</code></pre>"},{"location":"tutorial/parameter-cligenius/enum/#case-insensitive-enum-choices","title":"Case insensitive Enum choices","text":"<p>You can make an <code>Enum</code> (choice) CLI parameter be case-insensitive with the <code>case_sensitive</code> parameter:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from enum import Enum\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\nclass NeuralNetwork(str, Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\n\ndef main(\n    network: Annotated[\n        NeuralNetwork, cligenius.Option(case_sensitive=False)\n    ] = NeuralNetwork.simple,\n):\n    print(f\"Training neural network of type: {network.value}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from enum import Enum\n\nimport cligenius\n\n\nclass NeuralNetwork(str, Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\n\ndef main(\n    network: NeuralNetwork = cligenius.Option(\n        NeuralNetwork.simple, case_sensitive=False\n    ),\n):\n    print(f\"Training neural network of type: {network.value}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then the values of the <code>Enum</code> will be checked no matter if lower case, upper case, or a mix:</p> <pre><code>// Notice the upper case CONV\n$ python main.py --network CONV\n\nTraining neural network of type: conv\n\n// A mix also works\n$ python main.py --network LsTm\n\nTraining neural network of type: lstm\n</code></pre>"},{"location":"tutorial/parameter-cligenius/enum/#list-of-enum-values","title":"List of Enum values","text":"<p>A CLI parameter can also take a list of <code>Enum</code> values:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from enum import Enum\nfrom typing import List\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\nclass Food(str, Enum):\n    food_1 = \"Eggs\"\n    food_2 = \"Bacon\"\n    food_3 = \"Cheese\"\n\n\ndef main(\n    groceries: Annotated[List[Food], cligenius.Option()] = [Food.food_1, Food.food_3],\n):\n    print(f\"Buying groceries: {', '.join([f.value for f in groceries])}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from enum import Enum\nfrom typing import List\n\nimport cligenius\n\n\nclass Food(str, Enum):\n    food_1 = \"Eggs\"\n    food_2 = \"Bacon\"\n    food_3 = \"Cheese\"\n\n\ndef main(groceries: List[Food] = cligenius.Option([Food.food_1, Food.food_3])):\n    print(f\"Buying groceries: {', '.join([f.value for f in groceries])}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>This works just like any other parameter value taking a list of things:</p> <pre><code>$ python main.py --help\n\n// Notice the default values being shown\nUsage: main.py [OPTIONS]\n\nOptions:\n  --groceries [Eggs|Bacon|Cheese]  [default: Eggs, Cheese]\n  --help                           Show this message and exit.\n\n// Try it with the default values\n$ python main.py\n\nBuying groceries: Eggs, Cheese\n\n// Try it with a single value\n$ python main.py --groceries \"Eggs\"\n\nBuying groceries: Eggs\n\n// Try it with multiple values\n$ python main.py --groceries \"Eggs\" --groceries \"Bacon\"\n\nBuying groceries: Eggs, Bacon\n</code></pre>"},{"location":"tutorial/parameter-cligenius/file/","title":"File","text":"<p>Apart from <code>Path</code> CLI parameters you can also declare some types of \"files\".</p> <p>Tip</p> <p>In most of the cases you are probably fine just using <code>Path</code>.</p> <p>You can read and write data with <code>Path</code> the same way.</p> <p>The difference is that these types will give you a Python file-like object instead of a Python Path.</p> <p>A \"file-like object\" is the same type of object returned by <code>open()</code> as in:</p> <pre><code>with open('file.txt') as f:\n    # Here f is the file-like object\n    read_data = f.read()\n    print(read_data)\n</code></pre> <p>But in some special use cases you might want to use these special types. For example if you are migrating an existing application.</p>"},{"location":"tutorial/parameter-cligenius/file/#filetext-reading","title":"<code>FileText</code> reading","text":"<p><code>cligenius.FileText</code> gives you a file-like object for reading text, you will get <code>str</code> data from it.</p> <p>This means that even if your file has text written in a non-english language, e.g. a <code>text.txt</code> file with:</p> <pre><code>la cig\u00fce\u00f1a trae al ni\u00f1o\n</code></pre> <p>You will have a <code>str</code> with the text inside, e.g.:</p> <pre><code>content = \"la cig\u00fce\u00f1a trae al ni\u00f1o\"\n</code></pre> <p>instead of having <code>bytes</code>, e.g.:</p> <pre><code>content = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n</code></pre> <p>You will get all the correct editor support, attributes, methods, etc for the file-like object:`</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(config: Annotated[cligenius.FileText, cligenius.Option()]):\n    for line in config:\n        print(f\"Config line: {line}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(config: cligenius.FileText = cligenius.Option(...)):\n    for line in config:\n        print(f\"Config line: {line}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>// Create a quick text config\n$ echo \"some settings\" &gt; config.txt\n\n// Add another line to the config to test it\n$ echo \"some more settings\" &gt;&gt; config.txt\n\n// Now run your program\n$ python main.py --config config.txt\n\nConfig line: some settings\n\nConfig line: some more settings\n</code></pre>"},{"location":"tutorial/parameter-cligenius/file/#filetextwrite","title":"<code>FileTextWrite</code>","text":"<p>For writing text, you can use <code>cligenius.FileTextWrite</code>:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(config: Annotated[cligenius.FileTextWrite, cligenius.Option()]):\n    config.write(\"Some config written by the app\")\n    print(\"Config written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(config: cligenius.FileTextWrite = cligenius.Option(...)):\n    config.write(\"Some config written by the app\")\n    print(\"Config written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>This would be for writing human text, like:</p> <pre><code>some settings\nla cig\u00fce\u00f1a trae al ni\u00f1o\n</code></pre> <p>...not to write binary <code>bytes</code>.</p> <p>Check it:</p> <pre><code>$ python main.py --config text.txt\n\nConfig written\n\n// Check the contents of the file\n$ cat text.txt\n\nSome config written by the app\n</code></pre> <p>Technical Details</p> <p><code>cligenius.FileTextWrite</code> is a just a convenience class.</p> <p>It's the same as using <code>cligenius.FileText</code> and setting <code>mode=\"w\"</code>. You will learn about <code>mode</code> later below.</p>"},{"location":"tutorial/parameter-cligenius/file/#filebinaryread","title":"<code>FileBinaryRead</code>","text":"<p>To read binary data you can use <code>cligenius.FileBinaryRead</code>.</p> <p>You will receive <code>bytes</code> from it.</p> <p>It's useful for reading binary files like images:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(file: Annotated[cligenius.FileBinaryRead, cligenius.Option()]):\n    processed_total = 0\n    for bytes_chunk in file:\n        # Process the bytes in bytes_chunk\n        processed_total += len(bytes_chunk)\n        print(f\"Processed bytes total: {processed_total}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(file: cligenius.FileBinaryRead = cligenius.Option(...)):\n    processed_total = 0\n    for bytes_chunk in file:\n        # Process the bytes in bytes_chunk\n        processed_total += len(bytes_chunk)\n        print(f\"Processed bytes total: {processed_total}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --file lena.jpg\n\nProcessed bytes total: 512\nProcessed bytes total: 1024\nProcessed bytes total: 1536\nProcessed bytes total: 2048\n</code></pre>"},{"location":"tutorial/parameter-cligenius/file/#filebinarywrite","title":"<code>FileBinaryWrite</code>","text":"<p>To write binary data you can use <code>cligenius.FileBinaryWrite</code>.</p> <p>You would write <code>bytes</code> to it.</p> <p>It's useful for writing binary files like images.</p> <p>Have in mind that you have to pass <code>bytes</code> to its <code>.write()</code> method, not <code>str</code>.</p> <p>If you have a <code>str</code>, you have to encode it first to get <code>bytes</code>.</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(file: Annotated[cligenius.FileBinaryWrite, cligenius.Option()]):\n    first_line_str = \"some settings\\n\"\n    # You cannot write str directly to a binary file, you have to encode it to get bytes\n    first_line_bytes = first_line_str.encode(\"utf-8\")\n    # Then you can write the bytes\n    file.write(first_line_bytes)\n    # This is already bytes, it starts with b\"\n    second_line = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n    file.write(second_line)\n    print(\"Binary file written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(file: cligenius.FileBinaryWrite = cligenius.Option(...)):\n    first_line_str = \"some settings\\n\"\n    # You cannot write str directly to a binary file, you have to encode it to get bytes\n    first_line_bytes = first_line_str.encode(\"utf-8\")\n    # Then you can write the bytes\n    file.write(first_line_bytes)\n    # This is already bytes, it starts with b\"\n    second_line = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n    file.write(second_line)\n    print(\"Binary file written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <pre><code>$ python main.py --file binary.dat\n\nBinary file written\n\n// Check the binary file was created\n$ ls ./binary.dat\n\n./binary.dat\n</code></pre>"},{"location":"tutorial/parameter-cligenius/file/#file-cli-parameter-configurations","title":"File CLI parameter configurations","text":"<p>You can use several configuration parameters for these types (classes) in <code>cligenius.Option()</code> and <code>cligenius.Argument()</code>:</p> <ul> <li><code>mode</code>: controls the \"mode\" to open the file with.<ul> <li>It's automatically set for you by using the classes above.</li> <li>Read more about it below.</li> </ul> </li> <li><code>encoding</code>: to force a specific encoding, e.g. <code>\"utf-8\"</code>.</li> <li><code>lazy</code>: delay I/O operations. Automatic by default.<ul> <li>By default, when writing files, Click will generate a file-like object that is not yet the actual file. Once you start writing, it will go, open the file and start writing to it, but not before. This is mainly useful to avoid creating the file until you start writing to it. It's normally safe to leave this automatic. But you can overwrite it setting <code>lazy=False</code>. By default, it's <code>lazy=True</code> for writing and <code>lazy=False</code> for reading.</li> </ul> </li> <li><code>atomic</code>: if true, all writes will actually go to a temporal file and then moved to the final destination after completing. This is useful with files modified frequently by several users/programs.</li> </ul>"},{"location":"tutorial/parameter-cligenius/file/#advanced-mode","title":"Advanced <code>mode</code>","text":"<p>By default, Cligenius will configure the <code>mode</code> for you:</p> <ul> <li><code>cligenius.FileText</code>: <code>mode=\"r\"</code>, to read text.</li> <li><code>cligenius.FileTextWrite</code>: <code>mode=\"w\"</code>, to write text.</li> <li><code>cligenius.FileBinaryRead</code>: <code>mode=\"rb\"</code>, to read binary data.</li> <li><code>cligenius.FileBinaryWrite</code>: <code>mode=\"wb\"</code>, to write binary data.</li> </ul>"},{"location":"tutorial/parameter-cligenius/file/#note-about-filetextwrite","title":"Note about <code>FileTextWrite</code>","text":"<p><code>cligenius.FileTextWrite</code> is actually just a convenience class. It's the same as using <code>cligenius.FileText</code> with <code>mode=\"w\"</code>.</p> <p>But it's probably shorter and more intuitive as you can get it with autocompletion in your editor by just starting to type <code>cligenius.File</code>... just like the other classes.</p>"},{"location":"tutorial/parameter-cligenius/file/#customize-mode","title":"Customize <code>mode</code>","text":"<p>You can override the <code>mode</code> from the defaults above.</p> <p>For example, you could use <code>mode=\"a\"</code> to write \"appending\" to the same file:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(config: Annotated[cligenius.FileText, cligenius.Option(mode=\"a\")]):\n    config.write(\"This is a single line\\n\")\n    print(\"Config line written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(config: cligenius.FileText = cligenius.Option(..., mode=\"a\")):\n    config.write(\"This is a single line\\n\")\n    print(\"Config line written\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>As you are manually setting <code>mode=\"a\"</code>, you can use <code>cligenius.FileText</code> or <code>cligenius.FileTextWrite</code>, both will work.</p> <p>Check it:</p> <pre><code>$ python main.py --config config.txt\n\nConfig line written\n\n// Run your program a couple more times to see how it appends instead of overwriting\n$ python main.py --config config.txt\n\nConfig line written\n\n$ python main.py --config config.txt\n\nConfig line written\n\n// Check the contents of the file, it should have each of the 3 lines appended\n$ cat config.txt\n\nThis is a single line\nThis is a single line\nThis is a single line\n</code></pre>"},{"location":"tutorial/parameter-cligenius/file/#about-the-different-types","title":"About the different types","text":"<p>Info</p> <p>These are technical details about why the different types/classes provided by Cligenius.</p> <p>But you don't need this information to be able to use them. You can skip it.</p> <p>Cligenius provides you these different types (classes) because they inherit directly from the actual Python implementation that will be provided underneath for each case.</p> <p>This way your editor will give you the right type checks and completion for each type.</p> <p>Even if you use <code>lazy</code>. When you use <code>lazy</code> Click creates a especial object to delay writes, and serves as a \"proxy\" to the actual file that will be written. But this especial proxy object doesn't expose the attributes and methods needed for type checks and completion in the editor. If you access those attributes or call the methods, the \"proxy\" lazy object will call them in the final object and it will all work. But you wouldn't get autocompletion for them.</p> <p>But because these Cligenius classes inherit from the actual implementation that will be provided underneath (not the lazy object), you will get all the autocompletion and type checks in the editor.</p>"},{"location":"tutorial/parameter-cligenius/number/","title":"Number","text":"<p>You can define numeric validations with <code>max</code> and <code>min</code> values for <code>int</code> and <code>float</code> CLI parameters:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    id: Annotated[int, cligenius.Argument(min=0, max=1000)],\n    age: Annotated[int, cligenius.Option(min=18)] = 20,\n    score: Annotated[float, cligenius.Option(max=100)] = 0,\n):\n    print(f\"ID is {id}\")\n    print(f\"--age is {age}\")\n    print(f\"--score is {score}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    id: int = cligenius.Argument(..., min=0, max=1000),\n    age: int = cligenius.Option(20, min=18),\n    score: float = cligenius.Option(0, max=100),\n):\n    print(f\"ID is {id}\")\n    print(f\"--age is {age}\")\n    print(f\"--score is {score}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>CLI arguments and CLI options can both use these validations.</p> <p>You can specify <code>min</code>, <code>max</code> or both.</p> <p>Check it:</p> <pre><code>$ python main.py --help\n\n// Notice the extra RANGE in the help text for --age and --score\nUsage: main.py [OPTIONS] ID\n\nArguments:\n  ID  [required]\n\nOptions:\n  --age INTEGER RANGE   [default: 20]\n  --score FLOAT RANGE   [default: 0]\n  --help                Show this message and exit.\n\n// Pass all the CLI parameters\n$ python main.py 5 --age 20 --score 90\n\nID is 5\n--age is 20\n--score is 90.0\n\n// Pass an invalid ID\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0&lt;=x&lt;=1000.\n\n// Pass an invalid age\n$ python main.py 5 --age 15\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': 15 is not in the range x&gt;=18.\n\n// Pass an invalid score\n$ python main.py 5 --age 20 --score 100.5\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--score': 100.5 is not in the range x&lt;=100.\n\n// But as we didn't specify a minimum score, this is accepted\n$ python main.py 5 --age 20 --score -5\n\nID is 5\n--age is 20\n--score is -5.0\n</code></pre>"},{"location":"tutorial/parameter-cligenius/number/#clamping-numbers","title":"Clamping numbers","text":"<p>You might want to, instead of showing an error, use the closest minimum or maximum valid values.</p> <p>You can do it with the <code>clamp</code> parameter:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    id: Annotated[int, cligenius.Argument(min=0, max=1000)],\n    rank: Annotated[int, cligenius.Option(max=10, clamp=True)] = 0,\n    score: Annotated[float, cligenius.Option(min=0, max=100, clamp=True)] = 0,\n):\n    print(f\"ID is {id}\")\n    print(f\"--rank is {rank}\")\n    print(f\"--score is {score}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(\n    id: int = cligenius.Argument(..., min=0, max=1000),\n    rank: int = cligenius.Option(0, max=10, clamp=True),\n    score: float = cligenius.Option(0, min=0, max=100, clamp=True),\n):\n    print(f\"ID is {id}\")\n    print(f\"--rank is {rank}\")\n    print(f\"--score is {score}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And then, when you pass data that is out of the valid range, it will be \"clamped\", the closest valid value will be used:</p> <pre><code>// ID doesn't have clamp, so it shows an error\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0&lt;=x&lt;=1000.\n\n// But --rank and --score use clamp\n$ python main.py 5 --rank 11 --score -5\n\nID is 5\n--rank is 10\n--score is 0\n</code></pre>"},{"location":"tutorial/parameter-cligenius/number/#counter-cli-options","title":"Counter CLI options","text":"<p>You can make a CLI option work as a counter with the <code>counter</code> parameter:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>import cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(verbose: Annotated[int, cligenius.Option(\"--verbose\", \"-v\", count=True)] = 0):\n    print(f\"Verbose level is {verbose}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import cligenius\n\n\ndef main(verbose: int = cligenius.Option(0, \"--verbose\", \"-v\", count=True)):\n    print(f\"Verbose level is {verbose}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>It means that the CLI option will be like a boolean flag, e.g. <code>--verbose</code>.</p> <p>And the value you receive in the function will be the amount of times that <code>--verbose</code> was added:</p> <pre><code>// Check it\n$ python main.py\n\nVerbose level is 0\n\n// Now use one --verbose\n$ python main.py --verbose\n\nVerbose level is 1\n\n// Now 3 --verbose\n$ python main.py --verbose --verbose --verbose\n\nVerbose level is 3\n\n// And with the short name\n$ python main.py -v\n\nVerbose level is 1\n\n// And with the short name 3 times\n$ python main.py -v -v -v\n\nVerbose level is 3\n\n// As short names can be put together, this also works\n$ python main.py -vvv\n\nVerbose level is 3\n</code></pre>"},{"location":"tutorial/parameter-cligenius/path/","title":"Path","text":"<p>You can declare a CLI parameter to be a standard Python <code>pathlib.Path</code>.</p> <p>This is what you would do for directory paths, file paths, etc:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from pathlib import Path\nfrom typing import Optional\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(config: Annotated[Optional[Path], cligenius.Option()] = None):\n    if config is None:\n        print(\"No config file\")\n        raise cligenius.Abort()\n    if config.is_file():\n        text = config.read_text()\n        print(f\"Config file contents: {text}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    elif not config.exists():\n        print(\"The config doesn't exist\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pathlib import Path\nfrom typing import Optional\n\nimport cligenius\n\n\ndef main(config: Optional[Path] = cligenius.Option(None)):\n    if config is None:\n        print(\"No config file\")\n        raise cligenius.Abort()\n    if config.is_file():\n        text = config.read_text()\n        print(f\"Config file contents: {text}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    elif not config.exists():\n        print(\"The config doesn't exist\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>And again, as you receive a standard Python <code>Path</code> object the same as the type annotation, your editor will give you autocompletion for all its attributes and methods.</p> <p>Check it:</p> <pre><code>// No config\n$ python main.py\n\nNo config file\nAborted!\n\n// Pass a config that doesn't exist\n$ python main.py --config config.txt\n\nThe config doesn't exist\n\n// Now create a quick config\n$ echo \"some settings\" &gt; config.txt\n\n// And try again\n$ python main.py --config config.txt\n\nConfig file contents: some settings\n\n// And with a directory\n$ python main.py --config ./\n\nConfig is a directory, will use all its config files\n</code></pre>"},{"location":"tutorial/parameter-cligenius/path/#path-validations","title":"Path validations","text":"<p>You can perform several validations for <code>Path</code> CLI parameters:</p> <ul> <li><code>exists</code>: if set to true, the file or directory needs to exist for this value to be valid. If this is not required and a file does indeed not exist, then all further checks are silently skipped.</li> <li><code>file_okay</code>: controls if a file is a possible value.</li> <li><code>dir_okay</code>: controls if a directory is a possible value.</li> <li><code>writable</code>: if true, a writable check is performed.</li> <li><code>readable</code>: if true, a readable check is performed.</li> <li><code>resolve_path</code>: if this is true, then the path is fully resolved before the value is passed onwards. This means that it\u2019s absolute and symlinks are resolved.</li> </ul> <p>Technical Details</p> <p>It will not expand a tilde-prefix (something with <code>~</code>, like <code>~/Documents/</code>), as this is supposed to be done by the shell only.</p> <p>Tip</p> <p>All these parameters come directly from Click.</p> <p>For example:</p> Python 3.7+Python 3.7+ non-Annotated <pre><code>from pathlib import Path\n\nimport cligenius\nfrom typing_extensions import Annotated\n\n\ndef main(\n    config: Annotated[\n        Path,\n        cligenius.Option(\n            exists=True,\n            file_okay=True,\n            dir_okay=False,\n            writable=False,\n            readable=True,\n            resolve_path=True,\n        ),\n    ],\n):\n    text = config.read_text()\n    print(f\"Config file contents: {text}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pathlib import Path\n\nimport cligenius\n\n\ndef main(\n    config: Path = cligenius.Option(\n        ...,\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        writable=False,\n        readable=True,\n        resolve_path=True,\n    ),\n):\n    text = config.read_text()\n    print(f\"Config file contents: {text}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Check it:</p> <pre><code>$ python main.py --config config.txt\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--config': File 'config.txt' does not exist.\n\n// Now create a quick config\n$ echo \"some settings\" &gt; config.txt\n\n// And try again\n$ python main.py --config config.txt\n\nConfig file contents: some settings\n\n// And with a directory\n$ python main.py --config ./\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--config': File './' is a directory.\n</code></pre>"},{"location":"tutorial/parameter-cligenius/path/#advanced-path-configurations","title":"Advanced <code>Path</code> configurations","text":"<p>Advanced Details</p> <p>You probably won't need these configurations at first, you may want to skip it.</p> <p>They are used for more advanced use cases.</p> <ul> <li><code>allow_dash</code>: If this is set to True, a single dash to indicate standard streams is permitted.</li> <li><code>path_type</code>: optionally a string type that should be used to represent the path. The default is None which means the return value will be either bytes or unicode depending on what makes most sense given the input data Click deals with.</li> </ul>"},{"location":"tutorial/parameter-cligenius/uuid/","title":"Uuid","text":"<p>Info</p> <p>A UUID is a \"Universally Unique Identifier\".</p> <p>It's a standard format for identifiers, like passport numbers, but for anything, not just people in countries.</p> <p>They look like this:</p> <pre><code>d48edaa6-871a-4082-a196-4daab372d4a1\n</code></pre> <p>The way they are generated makes them sufficiently long and random that you could assume that every UUID generated is unique. Even if it was generated by a different application, database, or system.</p> <p>So, if your system uses UUIDs to identify your data, you could mix it with the data from some other system that also uses UUIDs with some confidence that their IDs (UUIDs) won't clash with yours.</p> <p>This wouldn't be true if you just used <code>int</code>s as identifiers, as most databases do.</p> <p>You can declare a CLI parameter as a UUID:</p> <pre><code>from uuid import UUID\n\nimport cligenius\n\n\ndef main(user_id: UUID):\n    print(f\"USER_ID is {user_id}\")\n    print(f\"UUID version is: {user_id.version}\")\n\n\nif __name__ == \"__main__\":\n    cligenius.run(main)\n</code></pre> <p>Your Python code will receive a standard Python <code>UUID</code> object with all its attributes and methods, and as you are annotating your function parameter with that type, you will have type checks, autocompletion in your editor, etc.</p> <p>Check it:</p> <pre><code>// Pass a valid UUID v4\n$ python main.py d48edaa6-871a-4082-a196-4daab372d4a1\n\nUSER_ID is d48edaa6-871a-4082-a196-4daab372d4a1\nUUID version is: 4\n\n// An invalid value\n$ python main.py 7479706572-72756c6573\n\nUsage: main.py [OPTIONS] USER_ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'USER_ID': 7479706572-72756c6573 is not a valid UUID.\n</code></pre>"},{"location":"tutorial/subcommands/","title":"SubCommands - Command Groups - Intro","text":"<p>You read before how to create a program with Commands.</p> <p>Now we'll see how to create a CLI program with commands that have their own subcommands. Also known as command groups.</p> <p>For example, the CLI program <code>git</code> has a command <code>remote</code>.</p> <p>But <code>git remote</code>, in turn, has its own subcommands, like <code>add</code>:</p> <pre><code>// git remote alone shows the current remote repositories\n$ git remote\n\norigin\n\n// Use -v to make it verbose and show more info\n$ git remote -v\n\norigin  git@github.com:yourusername/cligenius.git (fetch)\norigin  git@github.com:yourusername/cligenius.git (push)\n\n// git remote add takes 2 CLI arguments, a name and URL\n$ git remote add upstream https://github.com/khulnasoft/cligenius.git\n\n// Doesn't output anything, but now you have another remote repository called upstream\n\n// Now check again\n$ git remote -v\n\norigin  git@github.com:yourusername/cligenius.git (fetch)\norigin  git@github.com:yourusername/cligenius.git (push)\nupstream        https://github.com/khulnasoft/cligenius.git (fetch)\nupstream        https://github.com/khulnasoft/cligenius.git (push)\n</code></pre> <p>In the next sections we'll see how to create subcommands like these.</p>"},{"location":"tutorial/subcommands/add-cligenius/","title":"Add Cligenius","text":"<p>We'll start with the core idea.</p> <p>To add a <code>cligenius.Cligenius()</code> app inside of another.</p>"},{"location":"tutorial/subcommands/add-cligenius/#manage-items","title":"Manage items","text":"<p>Let's imagine that you are creating a CLI program to manage items in some distant land.</p> <p>It could be in an <code>items.py</code> file with this:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@app.command()\ndef delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@app.command()\ndef sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And you would use it like:</p> <pre><code>$ python items.py create Wand\n\nCreating item: Wand\n</code></pre>"},{"location":"tutorial/subcommands/add-cligenius/#manage-users","title":"Manage users","text":"<p>But then you realize that you also have to manage users from your CLI app.</p> <p>It could be a file <code>users.py</code> with something like:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@app.command()\ndef delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And you would use it like:</p> <pre><code>$ python users.py create Camila\n\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/add-cligenius/#put-them-together","title":"Put them together","text":"<p>Both parts are similar. In fact, <code>items.py</code> and <code>users.py</code> both have commands <code>create</code> and <code>delete</code>.</p> <p>But we need them to be part of the same CLI program.</p> <p>In this case, as with <code>git remote</code>, we can put them together as subcommands in another <code>cligenius.Cligenius()</code> CLI program.</p> <p>Now create a <code>main.py</code> with:</p> <pre><code>import cligenius\n\nimport items\nimport users\n\napp = cligenius.Cligenius()\napp.add_cligenius(users.app, name=\"users\")\napp.add_cligenius(items.app, name=\"items\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Here's what we do in <code>main.py</code>:</p> <ul> <li>Import the other Python modules (the files <code>users.py</code> and <code>items.py</code>).</li> <li>Create the main <code>cligenius.Cligenius()</code> application.</li> <li>Use <code>app.add_cligenius()</code> to include the <code>app</code> from <code>items.py</code> and <code>users.py</code>, each of those 2 was also created with <code>cligenius.Cligenius()</code>.</li> <li>Define a <code>name</code> with the command that will be used for each of these \"sub-Cligeniuss\" to group their own commands.</li> </ul> <p>And now your CLI program has 2 commands:</p> <ul> <li><code>users</code>: with all of the commands (subcommands) in the <code>app</code> from <code>users.py</code>.</li> <li><code>items</code> with all the commands (subcommands) in the <code>app</code> from <code>items.py</code>.</li> </ul> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  users\n</code></pre> <p>Now you have a CLI program with commands <code>items</code> and <code>users</code>, and they in turn have their own commands (subcommands).</p> <p>Let's check the <code>items</code> command:</p> <pre><code>// Check the help for items\n$ python main.py items --help\n\n// It shows its own commands (subcommands): create, delete, sell\nUsage: main.py items [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n  sell\n\n// Try it\n$ python main.py items create Wand\n\nCreating item: Wand\n\n$ python main.py items sell Vase\n\nSelling item: Vase\n</code></pre> <p>Tip</p> <p>Notice that we are still calling <code>$ python main.py</code> but now we are using the command <code>items</code>.</p> <p>And now check the command <code>users</code>, with all its subcommands:</p> <pre><code>$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Try it\n$ python main.py users create Camila\n\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/add-cligenius/#recap","title":"Recap","text":"<p>That's the core idea.</p> <p>You can just create <code>cligenius.Cligenius()</code> apps and add them inside one another.</p> <p>And you can do that with any levels of commands that you want.</p> <p>Do you need sub-sub-sub-subcommands? Go ahead, create all the <code>cligenius.Cligenius()</code>s you need and put them together with <code>app.add_cligenius()</code>.</p> <p>In the next sections we'll update this with more features, but you already have the core idea.</p> <p>This way, in the same spirit of Click, Cligenius applications are composable, each <code>cligenius.Cligenius()</code> can be a CLI app by itself, but it can also be added as a command group to another Cligenius app.</p>"},{"location":"tutorial/subcommands/callback-override/","title":"Sub-Cligenius Callback Override","text":"<p>When creating a Cligenius app you can define a callback function, it always executes and defines the CLI arguments and CLI options that go before a command.</p> <p>When adding a Cligenius app inside of another, the sub-Cligenius can also have its own callback.</p> <p>It can handle any CLI parameters that go before its own commands and execute any extra code:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\")\n\n\n@users_app.callback()\ndef users_callback():\n    print(\"Running a users command\")\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>In this case it doesn't define any CLI parameters, it just writes a message.</p> <p>Check it:</p> <pre><code>$ python main.py users create Camila\n\n// Notice the first message is not created by the command function but by the callback\nRunning a users command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/callback-override/#add-a-callback-on-creation","title":"Add a callback on creation","text":"<p>It's also possible to add a callback when creating the <code>cligenius.Cligenius()</code> app that will be added to another Cligenius app:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef users_callback():\n    print(\"Running a users command\")\n\n\nusers_app = cligenius.Cligenius(callback=users_callback)\napp.add_cligenius(users_app, name=\"users\")\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>This achieves exactly the same as above, it's just another place to add the callback.</p> <p>Check it:</p> <pre><code>$ python main.py users create Camila\n\nRunning a users command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/callback-override/#overriding-the-callback-on-creation","title":"Overriding the callback on creation","text":"<p>If a callback was added when creating the <code>cligenius.Cligenius()</code> app, it's possible to override it with a new one using <code>@app.callback()</code>.</p> <p>This is the same information you saw on the section about Commands - Cligenius Callback, and it applies the same for sub-Cligenius apps:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef default_callback():\n    print(\"Running a users command\")\n\n\nusers_app = cligenius.Cligenius(callback=default_callback)\napp.add_cligenius(users_app, name=\"users\")\n\n\n@users_app.callback()\ndef user_callback():\n    print(\"Callback override, running users command\")\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Here we had defined a callback when creating the <code>cligenius.Cligenius()</code> sub-app, but then we override it with a new callback with the function <code>user_callback()</code>.</p> <p>As <code>@app.callback()</code> takes precedence over <code>cligenius.Cligenius(callback=some_function)</code>, now our CLI app will use this new callback.</p> <p>Check it:</p> <pre><code>$ python main.py users create Camila\n\n// Notice the message from the new callback\nCallback override, running users command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/callback-override/#overriding-the-callback-when-adding-a-sub-cligenius","title":"Overriding the callback when adding a sub-Cligenius","text":"<p>Lastly, you can override the callback defined anywhere else when adding a sub-Cligenius with <code>app.add_cligenius()</code> using the <code>callback</code> parameter.</p> <p>This has the highest priority:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef default_callback():\n    print(\"Running a users command\")\n\n\nusers_app = cligenius.Cligenius(callback=default_callback)\n\n\ndef callback_for_add_cligenius():\n    print(\"I have the high land! Running users command\")\n\n\napp.add_cligenius(users_app, name=\"users\", callback=callback_for_add_cligenius)\n\n\n@users_app.callback()\ndef user_callback():\n    print(\"Callback override, running users command\")\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Notice that the precedence goes to <code>app.add_cligenius()</code> and is not affected by the order of execution. There's another callback defined below, but the one from <code>app.add_cligenius()</code> wins.</p> <p>Now when you use the CLI program it will use the new callback function <code>callback_for_add_cligenius()</code>.</p> <p>Check it:</p> <pre><code>$ python users create Camila\n\n// Notice the message from the callback added in add_cligenius()\nI have the high land! Running users command\nCreating user: Camila\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/","title":"SubCommand Name and Help","text":"<p>When adding a Cligenius app to another we have seen how to set the <code>name</code> to use for the command.</p> <p>For example to set the command to <code>users</code>:</p> <pre><code>app.add_cligenius(users.app, name=\"users\")\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#add-a-help-text","title":"Add a help text","text":"<p>We can also set the <code>help</code> while adding a Cligenius:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\", help=\"Manage users in the app.\")\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And then we get that help text for that command in the CLI program:</p> <pre><code>// Check the main help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre> <p>We can set the <code>name</code> and <code>help</code> in several places, each one taking precedence over the other, overriding the previous value.</p> <p>Let's see those locations.</p> <p>Tip</p> <p>There are other attributes that can be set in that same way in the same places we'll see next.</p> <p>But those are documented later in another section.</p>"},{"location":"tutorial/subcommands/name-and-help/#inferring-name-and-help-from-callback","title":"Inferring name and help from callback","text":""},{"location":"tutorial/subcommands/name-and-help/#inferring-a-commands-name-and-help","title":"Inferring a command's name and help","text":"<p>When you create a command with <code>@app.command()</code>, by default, it generates the name from the function name.</p> <p>And by default, the help text is extracted from the function's docstring.</p> <p>For example:</p> <pre><code>@app.command()\ndef create(item: str):\n    \"\"\"\n    Create an item.\n    \"\"\"\n    cligenius.echo(f\"Creating item: {item}\")\n</code></pre> <p>...will create a command <code>create</code> with a help text of <code>Create an item</code>.</p>"},{"location":"tutorial/subcommands/name-and-help/#inferring-name-and-help-from-appcallback","title":"Inferring name and help from <code>@app.callback()</code>","text":"<p>The same way, if you define a callback in a <code>cligenius.Cligenius()</code>, the help text is extracted from the callback function's docstring.</p> <p>And if that Cligenius app is added to another Cligenius app, the default name of the command is generated from the name of the callback function.</p> <p>Here's an example:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app)\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Notice that now we added the sub-Cligenius without specifying a <code>name</code> nor a <code>help</code>.</p> <p>They are now inferred from the callback function.</p> <p>The command name will be the same callback function's name: <code>users</code>.</p> <p>And the help text for that <code>users</code> command will be the callback function's docstring: <code>Manage users in the app.</code>.</p> <p>Check it:</p> <pre><code>// Check the main help\n$ python main.py --help\n\n// Notice the command name \"users\" and the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#name-and-help-from-callback-parameter-in-cligeniuscligenius","title":"Name and help from callback parameter in <code>cligenius.Cligenius()</code>","text":"<p>If you pass a <code>callback</code> parameter while creating a <code>cligenius.Cligenius(callback=some_function)</code> it will be used to infer the name and help text.</p> <p>This has the lowest priority, we'll see later what has a higher priority and can override it.</p> <p>Check the code:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(callback=users)\napp.add_cligenius(users_app)\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>This achieves exactly the same as the previous example.</p> <p>Check it:</p> <pre><code>// Check the main help\n$ python main.py --help\n\n// Notice the command name \"users\" and the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#override-a-callback-set-in-cligeniuscligenius-with-appcallback","title":"Override a callback set in <code>cligenius.Cligenius()</code> with <code>@app.callback()</code>","text":"<p>The same as with normal Cligenius apps, if you pass a <code>callback</code> to <code>cligenius.Cligenius(callback=some_function)</code> and then override it with <code>@app.callback()</code>, the name and help text will be inferred from the new callback:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(callback=old_callback)\napp.add_cligenius(users_app)\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now the name of the command will be <code>users</code> instead of <code>old-callback</code>, and the help text will be <code>Manage users in the app.</code> instead of <code>Old callback help.</code>.</p> <p>Check it:</p> <pre><code>// Check the main help\n$ python main.py --help\n\n// Notice the command name \"users\" and the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#infer-name-and-help-from-callback-in-appadd_cligenius","title":"Infer name and help from callback in <code>app.add_cligenius()</code>","text":"<p>If you override the callback in <code>app.add_cligenius()</code> when including a sub-app, the name and help will be inferred from this callback function.</p> <p>This takes precedence over inferring the name and help from a callback set in <code>@sub_app.callback()</code> and <code>cligenius.Cligenius(callback=sub_app_callback)</code>.</p> <p>Check the code:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(callback=old_callback)\n\n\ndef new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\n\n\napp.add_cligenius(users_app, callback=new_users)\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Now the command will be <code>new-users</code> instead of <code>users</code>. And the help text will be <code>I have the highland! Create some users.</code> instead of the previous ones.</p> <p>Check it:</p> <pre><code>// Check the main help\n$ python main.py --help\n\n// Check the command new-users and its help text\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  new-users  I have the highland! Create some users.\n\n// Now check the help for the new-users command\n$ python main.py new-users --help\n\n// Notice the help text\nUsage: main.py new-users [OPTIONS] COMMAND [ARGS]...\n\n  I have the highland! Create some users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#enough-inferring","title":"Enough inferring","text":"<p>So, when inferring a name and help text, the precedence order from lowest priority to highest is:</p> <ul> <li><code>sub_app = cligenius.Cligenius(callback=some_function)</code></li> <li><code>@sub_app.callback()</code></li> <li><code>app.add_cligenius(sub_app, callback=new_function)</code></li> </ul> <p>That's for inferring the name and help text from functions.</p> <p>But if you set the name and help text explicitly, that has a higher priority than these.</p>"},{"location":"tutorial/subcommands/name-and-help/#set-the-name-and-help","title":"Set the name and help","text":"<p>Let's now see the places where you can set the command name and help text, from lowest priority to highest.</p> <p>Tip</p> <p>Setting the name and help text explicitly always has a higher precedence than inferring from a callback function.</p>"},{"location":"tutorial/subcommands/name-and-help/#name-and-help-in-cligeniuscligenius","title":"Name and help in <code>cligenius.Cligenius()</code>","text":"<p>You could have all the callbacks and overrides we defined before, but the name and help text was inferred from the function name and docstring.</p> <p>If you set it explicitly, that takes precedence over inferring.</p> <p>You can set it when creating a new <code>cligenius.Cligenius()</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(\n    callback=old_callback, name=\"exp-users\", help=\"Explicit help.\"\n)\n\n\ndef new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\n\n\napp.add_cligenius(users_app, callback=new_users)\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Info</p> <p>The rest of the callbacks and overrides are there only to show you that they don't affect the name and help text when you set it explicitly.</p> <p>We set an explicit name <code>exp-users</code>, and an explicit help <code>Explicit help.</code>.</p> <p>So that will take precedence now.</p> <p>Check it:</p> <pre><code>// Check the main help\n$ python main.py --help\n\n// Notice the command name is exp-users and the help text is \"Explicit help.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  exp-users  Explicit help.\n\n// Check the help for the exp-users command\n$ python main.py exp-users --help\n\n// Notice the main help text\nUsage: main.py exp-users [OPTIONS] COMMAND [ARGS]...\n\n  Explicit help.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#name-and-help-in-appcallback","title":"Name and help in <code>@app.callback()</code>","text":"<p>Any parameter that you use when creating a <code>cligenius.Cligenius()</code> app can be overridden in the parameters of <code>@app.callback()</code>.</p> <p>Continuing with the previous example, we now override the values in <code>@user_app.callback()</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(\n    callback=old_callback, name=\"exp-users\", help=\"Explicit help.\"\n)\n\n\ndef new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\n\n\napp.add_cligenius(users_app, callback=new_users)\n\n\n@users_app.callback(\"call-users\", help=\"Help from callback for users.\")\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now the command name will be <code>call-users</code> and the help text will be <code>Help from callback for users.</code>.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// The command name now is call-users and the help text is \"Help from callback for users.\".\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  call-users  Help from callback for users.\n\n// Check the call-users command help\n$ python main.py call-users --help\n\n// Notice the main help text\nUsage: main.py call-users [OPTIONS] COMMAND [ARGS]...\n\n  Help from callback for users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#name-and-help-in-appadd_cligenius","title":"Name and help in <code>app.add_cligenius()</code>","text":"<p>And finally, with the highest priority, you can override all that by explicitly setting the <code>name</code> and <code>help</code> in <code>app.add_cligenius()</code>, just like we did on the first example above:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n\n\nusers_app = cligenius.Cligenius(\n    callback=old_callback, name=\"exp-users\", help=\"Explicit help.\"\n)\n\n\ndef new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\n\n\napp.add_cligenius(\n    users_app,\n    callback=new_users,\n    name=\"cake-sith-users\",\n    help=\"Unlimited powder! Eh, users.\",\n)\n\n\n@users_app.callback(\"call-users\", help=\"Help from callback for users.\")\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now, with the highest priorities of them all, the command name will now be <code>cake-sith-users</code> and the help text will be <code>Unlimited powder! Eh, users.</code>.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python main.py --help\n\n// Notice the command name cake-sith-users and the new help text \"Unlimited powder! Eh, users.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  cake-sith-users  Unlimited powder! Eh, users.\n\n// And check the help for the command cake-sith-users\n$ python main.py cake-sith-users --help\n\n// Notice the main help text\nUsage: main.py cake-sith-users [OPTIONS] COMMAND [ARGS]...\n\n  Unlimited powder! Eh, users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n</code></pre>"},{"location":"tutorial/subcommands/name-and-help/#recap","title":"Recap","text":"<p>The precedence to generate a command's name and help, from lowest priority to highest, is:</p> <ul> <li>Implicitly inferred from <code>sub_app = cligenius.Cligenius(callback=some_function)</code></li> <li>Implicitly inferred from the callback function under <code>@sub_app.callback()</code></li> <li>Implicitly inferred from <code>app.add_cligenius(sub_app, callback=some_function)</code></li> <li>Explicitly set on <code>sub_app = cligenius.Cligenius(name=\"some-name\", help=\"Some help.\")</code></li> <li>Explicitly set on <code>@sub_app.callback(\"some-name\", help=\"Some help.\")</code></li> <li>Explicitly set on <code>app.add_cligenius(sub_app, name=\"some-name\", help=\"Some help.\")</code></li> </ul> <p>So, <code>app.add_cligenius(sub_app, name=\"some-name\", help=\"Some help.\")</code> always wins.</p>"},{"location":"tutorial/subcommands/nested-subcommands/","title":"Nested SubCommands","text":"<p>We'll now see how these same ideas can be extended for deeply nested commands.</p> <p>Let's imagine that the same CLI program from the previous examples now needs to handle <code>lands</code>.</p> <p>But a land could be a <code>reign</code> or <code>town</code>.</p> <p>And each of those could have their own commands, like <code>create</code> and <code>delete</code>.</p>"},{"location":"tutorial/subcommands/nested-subcommands/#a-cli-app-for-reigns","title":"A CLI app for reigns","text":"<p>Let's start with a file <code>reigns.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef conquer(name: str):\n    print(f\"Conquering reign: {name}\")\n\n\n@app.command()\ndef destroy(name: str):\n    print(f\"Destroying reign: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>This is already a simple CLI program to manage reigns:</p> <pre><code>// Check the help\n$ python reigns.py --help\n\nUsage: reigns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n// Try it\n$ python reigns.py conquer Cintra\n\nConquering reign: Cintra\n\n$ python reigns.py destroy Mordor\n\nDestroying reign: Mordor\n</code></pre>"},{"location":"tutorial/subcommands/nested-subcommands/#a-cli-app-for-towns","title":"A CLI app for towns","text":"<p>And now the equivalent for managing towns in <code>towns.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef found(name: str):\n    print(f\"Founding town: {name}\")\n\n\n@app.command()\ndef burn(name: str):\n    print(f\"Burning town: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>With it, you can manage towns:</p> <pre><code>// Check the help\n$ python towns.py --help\n\nUsage: towns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  burn\n  found\n\n// Try it\n$ python towns.py found \"New Asgard\"\n\nFounding town: New Asgard\n\n$ python towns.py burn Vizima\n\nBurning town: Vizima\n</code></pre>"},{"location":"tutorial/subcommands/nested-subcommands/#manage-the-land-in-a-cli-app","title":"Manage the land in a CLI app","text":"<p>Now let's put the <code>reigns</code> and <code>towns</code> together in the same CLI program in <code>lands.py</code>:</p> <pre><code>import cligenius\n\nimport reigns\nimport towns\n\napp = cligenius.Cligenius()\napp.add_cligenius(reigns.app, name=\"reigns\")\napp.add_cligenius(towns.app, name=\"towns\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now we have a single CLI program with a command (or command group) <code>reigns</code> that has its own commands. And another command <code>towns</code> with its own subcommands.</p> <p>Check it:</p> <pre><code>// Check the help\n$ python lands.py --help\n\nUsage: lands.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  reigns\n  towns\n\n// We still have the help for reigns\n$ python lands.py reigns --help\n\nUsage: lands.py reigns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n// And the help for towns\n$ python lands.py towns --help\n\nUsage: lands.py towns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  burn\n  found\n</code></pre> <p>Now try it, manage the lands through the CLI:</p> <pre><code>// Try the reigns command\n$ python lands.py reigns conquer Gondor\n\nConquering reign: Gondor\n\n$ python lands.py reigns destroy Nilfgaard\n\nDestroying reign: Nilfgaard\n\n// Try the towns command\n$ python lands.py towns found Springfield\n\nFounding town: Springfield\n\n$ python lands.py towns burn Atlantis\n\nBurning town: Atlantis\n</code></pre>"},{"location":"tutorial/subcommands/nested-subcommands/#deeply-nested-subcommands","title":"Deeply nested subcommands","text":"<p>Now let's say that all these commands in the <code>lands.py</code> CLI program should be part of the previous CLI program we built in the first example.</p> <p>We want our CLI program to have these commands/command groups:</p> <ul> <li><code>users</code>:<ul> <li><code>create</code></li> <li><code>delete</code></li> </ul> </li> <li><code>items</code>:<ul> <li><code>create</code></li> <li><code>delete</code></li> <li><code>sell</code></li> </ul> </li> <li><code>lands</code>:<ul> <li><code>reigns</code>:<ul> <li><code>conquer</code></li> <li><code>destroy</code></li> </ul> </li> <li><code>towns</code>:<ul> <li><code>found</code></li> <li><code>burn</code></li> </ul> </li> </ul> </li> </ul> <p>This already is a quite deeply nested \"tree\" of commands/command groups.</p> <p>But to achieve that, we just have to add the <code>lands</code> Cligenius app to the same <code>main.py</code> file we already had:</p> <pre><code>import cligenius\n\nimport items\nimport lands\nimport users\n\napp = cligenius.Cligenius()\napp.add_cligenius(users.app, name=\"users\")\napp.add_cligenius(items.app, name=\"items\")\napp.add_cligenius(lands.app, name=\"lands\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>And now we have everything in a single CLI program:</p> <pre><code>// Check the main help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  lands\n  users\n\n// Try some users commands\n$ python main.py users create Camila\n\nCreating user: Camila\n\n// Now try some items commands\n$ python main.py items create Sword\n\nCreating item: Sword\n\n// And now some lands commands for reigns\n$ python main.py lands reigns conquer Gondor\n\nConquering reign: Gondor\n\n// And for towns\n$ python main.py lands towns found Cartagena\n\nFounding town: Cartagena\n</code></pre>"},{"location":"tutorial/subcommands/nested-subcommands/#review-the-files","title":"Review the files","text":"<p>Here are all the files if you want to review/copy them:</p> <p><code>reigns.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef conquer(name: str):\n    print(f\"Conquering reign: {name}\")\n\n\n@app.command()\ndef destroy(name: str):\n    print(f\"Destroying reign: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p><code>towns.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef found(name: str):\n    print(f\"Founding town: {name}\")\n\n\n@app.command()\ndef burn(name: str):\n    print(f\"Burning town: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p><code>lands.py</code>:</p> <pre><code>import cligenius\n\nimport reigns\nimport towns\n\napp = cligenius.Cligenius()\napp.add_cligenius(reigns.app, name=\"reigns\")\napp.add_cligenius(towns.app, name=\"towns\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p><code>users.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@app.command()\ndef delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p><code>items.py</code>:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\n\n\n@app.command()\ndef create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@app.command()\ndef delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@app.command()\ndef sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p><code>main.py</code>:</p> <pre><code>import cligenius\n\nimport items\nimport lands\nimport users\n\napp = cligenius.Cligenius()\napp.add_cligenius(users.app, name=\"users\")\napp.add_cligenius(items.app, name=\"items\")\napp.add_cligenius(lands.app, name=\"lands\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>Tip</p> <p>All these files have an <code>if __name__ == \"__main__\"</code> block just to demonstrate how each of them can also be an independent CLI app.</p> <p>But for your final application, only <code>main.py</code> would need it.</p>"},{"location":"tutorial/subcommands/nested-subcommands/#recap","title":"Recap","text":"<p>That's it, you can just add Cligenius applications one inside another as much as you want and create complex CLI programs while writing simple code.</p> <p>You can probably achieve a simpler CLI program design that's easier to use than the example here. But if your requirements are complex, Cligenius helps you build your CLI app easily.</p> <p>Tip</p> <p>Auto completion helps a lot, specially with complex programs.</p> <p>Check the docs about adding auto completion to your CLI apps.</p>"},{"location":"tutorial/subcommands/single-file/","title":"SubCommands in a Single File","text":"<p>In some cases, it's possible that your application code needs to live on a single file.</p> <p>You can still use the same ideas:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\nitems_app = cligenius.Cligenius()\napp.add_cligenius(items_app, name=\"items\")\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\")\n\n\n@items_app.command(\"create\")\ndef items_create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@items_app.command(\"delete\")\ndef items_delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@items_app.command(\"sell\")\ndef items_sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\n@users_app.command(\"create\")\ndef users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@users_app.command(\"delete\")\ndef users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>There are several things to notice here...</p>"},{"location":"tutorial/subcommands/single-file/#apps-at-the-top","title":"Apps at the top","text":"<p>First, you can create <code>cligenius.Cligenius()</code> objects and add them to another one at the top.</p> <p>It doesn't have to be done after creating the subcommands:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\nitems_app = cligenius.Cligenius()\napp.add_cligenius(items_app, name=\"items\")\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\")\n\n\n@items_app.command(\"create\")\ndef items_create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@items_app.command(\"delete\")\ndef items_delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@items_app.command(\"sell\")\ndef items_sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\n@users_app.command(\"create\")\ndef users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@users_app.command(\"delete\")\ndef users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre> <p>You can add the commands (subcommands) to each <code>cligenius.Cligenius()</code> app later and it will still work.</p>"},{"location":"tutorial/subcommands/single-file/#function-names","title":"Function names","text":"<p>As you now have subcommands like <code>create</code> for <code>users</code> and for <code>items</code>, you can no longer call the functions with just the name, like <code>def create()</code>, because they would overwrite each other.</p> <p>So we use longer names:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\nitems_app = cligenius.Cligenius()\napp.add_cligenius(items_app, name=\"items\")\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\")\n\n\n@items_app.command(\"create\")\ndef items_create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@items_app.command(\"delete\")\ndef items_delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@items_app.command(\"sell\")\ndef items_sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\n@users_app.command(\"create\")\ndef users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@users_app.command(\"delete\")\ndef users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"tutorial/subcommands/single-file/#command-name","title":"Command name","text":"<p>We are naming the functions with longer names so that they don't overwrite each other.</p> <p>But we still want the subcommands to be <code>create</code>, <code>delete</code>, etc.</p> <p>To call them like:</p> <pre><code>// We want this \u2714\ufe0f\n$ python main.py items create\n</code></pre> <p>instead of:</p> <pre><code>// We don't want this \u26d4\ufe0f\n$ python main.py items items-create\n</code></pre> <p>So we pass the name we want to use for each subcommand as the function argument to the decorator:</p> <pre><code>import cligenius\n\napp = cligenius.Cligenius()\nitems_app = cligenius.Cligenius()\napp.add_cligenius(items_app, name=\"items\")\nusers_app = cligenius.Cligenius()\napp.add_cligenius(users_app, name=\"users\")\n\n\n@items_app.command(\"create\")\ndef items_create(item: str):\n    print(f\"Creating item: {item}\")\n\n\n@items_app.command(\"delete\")\ndef items_delete(item: str):\n    print(f\"Deleting item: {item}\")\n\n\n@items_app.command(\"sell\")\ndef items_sell(item: str):\n    print(f\"Selling item: {item}\")\n\n\n@users_app.command(\"create\")\ndef users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@users_app.command(\"delete\")\ndef users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"tutorial/subcommands/single-file/#check-it","title":"Check it","text":"<p>It still works the same:</p> <pre><code>// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  users\n</code></pre> <p>Check the <code>items</code> command:</p> <pre><code>// Check the help for items\n$ python main.py items --help\n\n// It shows its own commands (subcommands): create, delete, sell\nUsage: main.py items [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n  sell\n\n// Try it\n$ python main.py items create Wand\n\nCreating item: Wand\n\n$ python main.py items sell Vase\n\nSelling item: Vase\n</code></pre> <p>And the same for the <code>users</code> command:</p> <pre><code>$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Try it\n$ python main.py users create Camila\n\nCreating user: Camila\n</code></pre>"}]}